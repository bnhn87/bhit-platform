=== PROJECT SNAPSHOT:       98 files ===

----- FILE: ./.eslintrc.json -----
{
  "root": true,
  "extends": ["next/core-web-vitals"]
}

----- FILE: ./components/ActivityFeed.tsx -----
import { panelStyle, theme } from "../lib/theme";

export default function ActivityFeed({
  title,
  rows
}: {
  title: string;
  rows: { id: string; text: string; occurred_at: string }[];
}) {
  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ fontWeight: 600, marginBottom: 8 }}>{title}</div>
      {rows.length === 0 ? (
        <div style={{ color: theme.colors.subtext, fontSize: 14 }}>No recent activity.</div>
      ) : (
        <ul style={{ listStyle: "none", padding: 0, margin: 0, display: "grid", gap: 10 }}>
          {rows.map((r) => (
            <li
              key={r.id}
              style={{
                display: "grid",
                gridTemplateColumns: "auto 1fr auto",
                gap: 10,
                padding: "10px 12px",
                border: `1px solid ${theme.colors.panelBorder}`,
                borderRadius: 10
              }}
            >
              <span
                aria-hidden
                style={{
                  width: 8,
                  height: 8,
                  borderRadius: 99,
                  background: theme.colors.brand,
                  alignSelf: "center"
                }}
              />
              <div>{r.text}</div>
              <div style={{ color: theme.colors.subtext, fontSize: 12 }}>
                {new Date(r.occurred_at).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

----- FILE: ./components/AppNav.tsx -----
// apps/web/components/AppNav.tsx
import Link from "next/link";
import { useRouter } from "next/router";
import { useUserRole } from "@/hooks/useUserRole";
import { supabase } from "@/lib/supabaseClient";

type Role = "guest" | "installer" | "ops" | "director" | "admin";

/**
 * LEFT CLUSTER = core links (always visible, no flicker, never duplicated)
 * RIGHT CLUSTER = role EXTRAS only (no Dashboard/Today/Jobs/Clients here)
 */
const EXTRAS_BY_ROLE: Record<Role, { label: string; href: string }[]> = {
  guest: [],
  installer: [],
  ops: [
    { label: "Smart Quote", href: "/smart-quote" },
    { label: "Settings", href: "/settings" }
  ],
  director: [
    { label: "Smart Quote", href: "/smart-quote" },
    { label: "Admin Panel", href: "/admin-panel" },
    { label: "Costing", href: "/admin/costing" },
    { label: "Settings", href: "/settings" }
  ],
  admin: [
    { label: "Smart Quote", href: "/smart-quote" },
    { label: "Admin Panel", href: "/admin-panel" },
    { label: "Costing", href: "/admin/costing" },
    { label: "Settings", href: "/settings" }
  ]
};

const bar: React.CSSProperties = {
  position: "sticky",
  top: 0,
  zIndex: 50,
  display: "flex",
  alignItems: "center",
  gap: 14,
  padding: "10px 16px",
  background: "#0b1118",
  borderBottom: "1px solid #1d2733"
};

const brand: React.CSSProperties = {
  fontWeight: 900,
  letterSpacing: 0.4,
  color: "#e8eef6",
  textDecoration: "none"
};

const group: React.CSSProperties = {
  display: "flex",
  gap: 8,
  alignItems: "center",
  flexWrap: "wrap"
};

const pill: React.CSSProperties = {
  padding: "8px 12px",
  borderRadius: 10,
  background: "#0f151c",
  border: "1px solid #1d2733",
  color: "#e8eef6",
  textDecoration: "none",
  fontSize: 13,
  fontWeight: 700
};

const pillActive: React.CSSProperties = {
  ...pill,
  background: "#1d91ff",
  color: "#fff",
  boxShadow: "0 6px 16px rgba(29,145,255,0.25)"
};

const roleBadge: React.CSSProperties = {
  padding: "6px 10px",
  borderRadius: 999,
  background: "#14202b",
  border: "1px solid #284054",
  color: "#cfe3ff",
  fontSize: 12,
  fontWeight: 800
};

function Skeleton({ w = 64 }: { w?: number }) {
  return (
    <span
      style={{
        display: "inline-block",
        width: w,
        height: 14,
        borderRadius: 7,
        background: "linear-gradient(90deg, #0f151c, #14202b, #0f151c)",
        backgroundSize: "200% 100%",
        animation: "pulse 1.2s ease-in-out infinite"
      }}
    />
  );
}

function NavLink({ href, label, active }: { href: string; label: string; active: boolean }) {
  return (
    <Link href={href} style={active ? pillActive : pill}>
      {label}
    </Link>
  );
}

export default function AppNav() {
  const { role, loading } = useUserRole();
  const r = useRouter();

  async function signOut() {
    await supabase.auth.signOut();
    window.location.href = "/login";
  }

  return (
    <>
      <style>{`
        @keyframes pulse { 0% {background-position: 0% 0%} 100% {background-position: -200% 0%} }
        @media (max-width: 900px) { main { padding-top: 8px } }
      `}</style>
      <nav style={bar}>
        <Link href="/dashboard" style={brand}>BHIT&nbsp;OS</Link>

        {/* LEFT: core links (never duplicated) */}
        <div style={{ ...group, marginLeft: 8 }}>
          <NavLink href="/dashboard" label="Dashboard" active={r.pathname === "/dashboard"} />
          <NavLink href="/today" label="Today" active={r.pathname.startsWith("/today")} />
          <NavLink
            href="/jobs"
            label="Jobs"
            active={r.pathname.startsWith("/jobs") || r.pathname.startsWith("/job")}
          />
          <NavLink href="/clients" label="Clients" active={r.pathname.startsWith("/clients")} />
        </div>

        {/* RIGHT: extras + auth */}
        <div style={{ marginLeft: "auto", ...group }}>
          {loading ? (
            <>
              <span style={pill}><Skeleton w={90} /></span>
              <span style={pill}><Skeleton w={80} /></span>
              <span style={pill}><Skeleton w={70} /></span>
            </>
          ) : (
            <>
              {(EXTRAS_BY_ROLE[role] || []).map((it) => (
                <NavLink
                  key={it.href}
                  href={it.href}
                  label={it.label}
                  active={r.pathname === it.href || r.asPath === it.href}
                />
              ))}

              {/* Role badge */}
              <span style={roleBadge}>{role.toUpperCase()}</span>

              {/* Auth control */}
              {role === "guest" ? (
                <Link href="/login" style={pill}>Sign in</Link>
              ) : (
                <button onClick={signOut} style={{ ...pill, cursor: "pointer", border: "1px solid #2b3542" }}>
                  Sign out
                </button>
              )}
            </>
          )}
        </div>
      </nav>
    </>
  );
}

----- FILE: ./components/charts/BarChart.tsx -----
import { panelStyle, theme } from "../../lib/theme";

export default function BarChart({
  title,
  x,
  series
}: {
  title: string;
  x: string[];
  series: { name: string; data: number[] }[];
}) {
  const max = Math.max(1, ...series.flatMap((s) => s.data));
  const barW = 18;
  const gap = 8;
  const groupW = series.length * barW + (series.length - 1) * 6;
  const totalW = x.length * (groupW + gap) + gap;

  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ fontWeight: 600, marginBottom: 8 }}>{title}</div>
      <div style={{ overflowX: "auto" }}>
        <div style={{ display: "grid", gridTemplateRows: "240px auto", gap: 8, minWidth: totalW }}>
          {/* Chart area */}
          <div
            style={{
              display: "flex",
              alignItems: "flex-end",
              height: 240,
              gap
            }}
          >
            {x.map((label, i) => (
              <div key={i} style={{ width: groupW, display: "flex", alignItems: "flex-end", gap: 6 }}>
                {series.map((s, si) => {
                  const v = s.data[i] ?? 0;
                  const h = Math.round((v / max) * 220);
                  const color =
                    si === 0 ? theme.colors.brand : theme.colors.accent;
                  return (
                    <div key={si} style={{ width: barW, height: h, background: color, borderRadius: 6 }} title={`${s.name}: ${v}`} />
                  );
                })}
              </div>
            ))}
          </div>
          {/* X labels */}
          <div style={{ display: "flex", gap, color: theme.colors.subtext, fontSize: 12 }}>
            {x.map((label, i) => (
              <div key={i} style={{ width: groupW, textAlign: "center" }}>{label}</div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

----- FILE: ./components/charts/Heatmap.tsx -----
/**
 * BHIT Heatmap (safe, self-contained, default export)
 *
 * Fixes:
 * - Guarantees a DEFAULT EXPORT (prevents "Element type is invalid" from Dashboard).
 * - Null-safe color utilities (no crashes when a color is undefined).
 *
 * Props contract (kept compatible with your Dashboard usage):
 *   title?: string;
 *   cols: string[];      // column labels
 *   rows: string[];      // row labels
 *   data: number[][];    // same shape as rows x cols
 *
 * Rendering:
 * - Lightweight canvas heatmap for performance.
 * - Falls back to a simple grid when canvas is unavailable.
 */

import React, { useEffect, useMemo, useRef } from "react";
import { panelStyle } from "../../lib/theme";

type Props = {
  title?: string;
  cols: string[];
  rows: string[];
  data: number[][];
};

const DEFAULT_HEX = "#3b82f6"; // blue

// ---- Safe color utils ----
function hexToRgb(hex?: string) {
  const fallback: [number, number, number] = [59, 130, 246];
  if (!hex || typeof hex !== "string") return fallback;
  const h = hex.trim().replace(/^#/, "");
  if (!/^(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(h)) return fallback;
  const hh = h.length === 3 ? h.split("").map((c) => c + c).join("") : h;
  const n = parseInt(hh, 16);
  return [(n >> 16) & 255, (n >> 8) & 255, n & 255] as [number, number, number];
}

function color(hex?: string, alpha = 1) {
  const [r, g, b] = hexToRgb(hex ?? DEFAULT_HEX);
  const a = Number.isFinite(alpha) ? Math.max(0, Math.min(1, alpha)) : 1;
  return `rgba(${r}, ${g}, ${b}, ${a})`;
}
// --------------------------

function clamp(n: number, min: number, max: number) {
  return Math.max(min, Math.min(max, n));
}

function HeatmapCanvas({ cols, rows, data }: Omit<Props, "title">) {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  const stats = useMemo(() => {
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    for (let r = 0; r < rows.length; r++) {
      for (let c = 0; c < cols.length; c++) {
        const v = data?.[r]?.[c] ?? 0;
        if (v < min) min = v;
        if (v > max) max = v;
      }
    }
    if (!isFinite(min)) min = 0;
    if (!isFinite(max)) max = 1;
    if (min === max) max = min + 1; // avoid div-by-zero
    return { min, max, range: max - min };
  }, [cols.length, rows.length, data]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    const cellW = 24;
    const cellH = 18;
    const padTop = 22;
    const padLeft = 80;

    const width = padLeft + cols.length * cellW + 1;
    const height = padTop + rows.length * cellH + 1;
    canvas.width = width;
    canvas.height = height;

    // bg
    ctx.fillStyle = "#121a23";
    ctx.fillRect(0, 0, width, height);

    // column labels
    ctx.fillStyle = "#9fb2c8";
    ctx.font = "12px system-ui, -apple-system, Segoe UI, Roboto, sans-serif";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    cols.forEach((label, i) => {
      ctx.fillText(label, padLeft + i * cellW + cellW / 2, padTop - 10);
    });

    // row labels
    ctx.textAlign = "right";
    rows.forEach((label, r) => {
      ctx.fillText(label, padLeft - 8, padTop + r * cellH + cellH / 2);
    });

    // cells
    const [rr, gg, bb] = hexToRgb(DEFAULT_HEX);
    for (let r = 0; r < rows.length; r++) {
      for (let c = 0; c < cols.length; c++) {
        const v = data?.[r]?.[c] ?? 0;
        const t = clamp((v - stats.min) / stats.range, 0, 1);
        // ease slightly so mid values are visible
        const eased = Math.pow(t, 0.85);
        ctx.fillStyle = `rgba(${rr}, ${gg}, ${bb}, ${0.08 + 0.92 * eased})`;
        ctx.fillRect(padLeft + c * cellW, padTop + r * cellH, cellW - 2, cellH - 2);
      }
    }

    // grid lines (subtle)
    ctx.strokeStyle = "rgba(255,255,255,0.06)";
    for (let c = 0; c <= cols.length; c++) {
      const x = padLeft + c * cellW - 1;
      ctx.beginPath();
      ctx.moveTo(x, padTop - 2);
      ctx.lineTo(x, height);
      ctx.stroke();
    }
    for (let r = 0; r <= rows.length; r++) {
      const y = padTop + r * cellH - 1;
      ctx.beginPath();
      ctx.moveTo(padLeft - 2, y);
      ctx.lineTo(width, y);
      ctx.stroke();
    }
  }, [cols, rows, data, stats]);

  return (
    <div style={{ overflowX: "auto" }}>
      <canvas ref={canvasRef} />
    </div>
  );
}

export default function Heatmap({ title, cols, rows, data }: Props) {
  return (
    <section style={{ ...panelStyle, padding: 16 }}>
      {title && (
        <div
          style={{
            marginBottom: 8,
            fontWeight: 700,
            color: "#e8eef6",
            letterSpacing: 0.2,
          }}
        >
          {title}
        </div>
      )}
      <HeatmapCanvas cols={cols} rows={rows} data={data} />
      {/* Simple legend */}
      <div style={{ display: "flex", alignItems: "center", gap: 8, marginTop: 8, color: "#9fb2c8", fontSize: 12 }}>
        <span>Low</span>
        <div style={{ flex: 1, height: 6, background: `linear-gradient(90deg, ${color(DEFAULT_HEX, 0.15)} 0%, ${color(DEFAULT_HEX, 1)} 100%)`, borderRadius: 999 }} />
        <span>High</span>
      </div>
    </section>
  );
}

----- FILE: ./components/CostControlPanel.tsx -----
// apps/web/components/CostControlPanel.tsx
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { panelStyle, theme } from "../lib/theme";

type Rates = {
  installer?: number;
  supervisor?: number;
  vehicle?: number;
  waste_load?: number;
};

type CostRow = {
  job_id: string;
  quoted_total: number | string;
  installer_days: number | string;
  supervisor_days: number | string;
  vehicle_days: number | string;
  waste_loads: number | string;
  materials_cost: number | string;
  misc_cost: number | string;
  notes?: string | null;
};

export default function CostControlPanel({ jobId }: { jobId: string }) {
  const [rates, setRates] = useState<Rates>({});
  const [row, setRow] = useState<CostRow | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    let cancel = false;
    (async () => {
      setErr(null);
      // 1) load day rates
      const { data: org } = await supabase.from("org_settings").select("day_rates").eq("id", 1).maybeSingle();
      const dr = (org?.day_rates || {}) as Record<string, number>;
      if (!cancel) {
        setRates({
          installer: Number(dr.installer || 0),
          supervisor: Number(dr.supervisor || 0),
          vehicle: Number(dr.vehicle || 0),
          waste_load: Number(dr.waste_load || 0),
        });
      }
      // 2) load or create job_costs row
      const { data: jc } = await supabase.from("job_costs").select("*").eq("job_id", jobId).maybeSingle();
      if (!cancel) {
        if (jc) {
          setRow(normalizeRow(jc));
        } else {
          setRow({
            job_id: jobId,
            quoted_total: 0,
            installer_days: 0,
            supervisor_days: 0,
            vehicle_days: 0,
            waste_loads: 0,
            materials_cost: 0,
            misc_cost: 0,
            notes: "",
          });
        }
      }
    })().catch((e) => !cancel && setErr(e?.message || "Failed to load costs"));
    return () => { cancel = true; };
  }, [jobId]);

  const numbers = useMemo(() => {
    const r = row || ({} as any);
    const n = (v: any) => Number(v || 0);

    const price = n(r.quoted_total);

    const labour =
      n(r.installer_days) * (rates.installer || 0) +
      n(r.supervisor_days) * (rates.supervisor || 0);

    const vehicles = n(r.vehicle_days) * (rates.vehicle || 0);
    const waste = n(r.waste_loads) * (rates.waste_load || 0);
    const materials = n(r.materials_cost);
    const misc = n(r.misc_cost);

    const direct = labour + vehicles + waste + materials + misc;
    const margin = price - direct;
    const marginPct = price > 0 ? (margin / price) * 100 : 0;

    return { price, labour, vehicles, waste, materials, misc, direct, margin, marginPct };
  }, [row, rates]);

  async function save() {
    if (!row) return;
    setBusy(true); setMsg(null); setErr(null);
    const payload = {
      job_id: jobId,
      quoted_total: toNum(row.quoted_total),
      installer_days: toNum(row.installer_days),
      supervisor_days: toNum(row.supervisor_days),
      vehicle_days: toNum(row.vehicle_days),
      waste_loads: toNum(row.waste_loads),
      materials_cost: toNum(row.materials_cost),
      misc_cost: toNum(row.misc_cost),
      notes: row.notes ?? null,
    };
    const { error } = await supabase.from("job_costs").upsert(payload, { onConflict: "job_id" });
    setBusy(false);
    if (error) setErr(error.message);
    else setMsg("Saved");
  }

  if (!row) return <div style={{ ...panelStyle, padding: 16 }}>Loading…</div>;

  return (
    <div style={{ display: "grid", gap: 12 }}>
      {/* KPIs */}
      <div style={{ display: "grid", gap: 12, gridTemplateColumns: "repeat(auto-fit, minmax(220px, 1fr))" }}>
        <KPI title="Price (Quoted)" value={fmtCurrency(numbers.price)} />
        <KPI title="Direct Cost" value={fmtCurrency(numbers.direct)} />
        <KPI title="Net Margin" value={fmtCurrency(numbers.margin)} />
        <KPI title="Margin %" value={`${numbers.marginPct.toFixed(1)}%`} />
      </div>

      {/* Inputs */}
      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Inputs</div>

        <GridRow label="Quoted total (£)">
          <NumInput value={row.quoted_total} onChange={(v) => setRow({ ...row, quoted_total: v })} />
        </GridRow>

        <Divider />

        <GridRow label="Installer days">
          <NumInput value={row.installer_days} onChange={(v) => setRow({ ...row, installer_days: v })} />
          <Hint right label="Rate" value={fmtCurrency(rates.installer || 0)} />
          <Hint right label="Cost" value={fmtCurrency(numbers.labour - (Number(row.supervisor_days || 0) * (rates.supervisor || 0)))} />
        </GridRow>

        <GridRow label="Supervisor days">
          <NumInput value={row.supervisor_days} onChange={(v) => setRow({ ...row, supervisor_days: v })} />
          <Hint right label="Rate" value={fmtCurrency(rates.supervisor || 0)} />
        </GridRow>

        <GridRow label="Vehicle days">
          <NumInput value={row.vehicle_days} onChange={(v) => setRow({ ...row, vehicle_days: v })} />
          <Hint right label="Rate" value={fmtCurrency(rates.vehicle || 0)} />
          <Hint right label="Cost" value={fmtCurrency(numbers.vehicles)} />
        </GridRow>

        <GridRow label="Waste loads">
          <NumInput value={row.waste_loads} onChange={(v) => setRow({ ...row, waste_loads: v })} />
          <Hint right label="Rate" value={fmtCurrency(rates.waste_load || 0)} />
          <Hint right label="Cost" value={fmtCurrency(numbers.waste)} />
        </GridRow>

        <GridRow label="Materials cost (£)">
          <NumInput value={row.materials_cost} onChange={(v) => setRow({ ...row, materials_cost: v })} />
        </GridRow>

        <GridRow label="Misc cost (£)">
          <NumInput value={row.misc_cost} onChange={(v) => setRow({ ...row, misc_cost: v })} />
        </GridRow>

        <GridRow label="Notes">
          <textarea
            value={row.notes || ""}
            onChange={(e) => setRow({ ...row, notes: e.target.value })}
            style={inputStyle({ height: 90, resize: "vertical" })}
          />
        </GridRow>

        <div style={{ display: "flex", gap: 8, marginTop: 10 }}>
          <button onClick={save} disabled={busy} style={btnPrimary()}>
            Save
          </button>
          {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
          {err && <div style={{ alignSelf: "center", color: theme.colors.danger }}>{err}</div>}
        </div>
      </div>

      {/* Breakdown */}
      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Breakdown</div>
        <div style={{ display: "grid", gridTemplateColumns: "1fr auto", rowGap: 6 }}>
          <Row label="Labour">{fmtCurrency(numbers.labour)}</Row>
          <Row label="Vehicles">{fmtCurrency(numbers.vehicles)}</Row>
          <Row label="Waste">{fmtCurrency(numbers.waste)}</Row>
          <Row label="Materials">{fmtCurrency(numbers.materials)}</Row>
          <Row label="Misc">{fmtCurrency(numbers.misc)}</Row>
          <Row label="Direct Cost" strong>{fmtCurrency(numbers.direct)}</Row>
          <Row label="Price (Quoted)" strong>{fmtCurrency(numbers.price)}</Row>
          <Row label="Net Margin" brand big>
            {fmtCurrency(numbers.margin)}
          </Row>
          <Row label="Margin %" brand big>
            {numbers.marginPct.toFixed(1)}%
          </Row>
        </div>
      </div>
    </div>
  );
}

/* ---------- atoms / helpers ---------- */

function normalizeRow(x: any): CostRow {
  return {
    job_id: x.job_id,
    quoted_total: x.quoted_total ?? 0,
    installer_days: x.installer_days ?? 0,
    supervisor_days: x.supervisor_days ?? 0,
    vehicle_days: x.vehicle_days ?? 0,
    waste_loads: x.waste_loads ?? 0,
    materials_cost: x.materials_cost ?? 0,
    misc_cost: x.misc_cost ?? 0,
    notes: x.notes ?? "",
  };
}
const toNum = (v: any) => Number(v || 0);

function KPI({ title, value }: { title: string; value: string }) {
  return (
    <div style={{ ...panelStyle, padding: 14 }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 4 }}>{title}</div>
      <div style={{ fontSize: 24, fontWeight: 800, letterSpacing: "0.2px" }}>{value}</div>
    </div>
  );
}

function GridRow({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "220px 1fr", gap: 10, alignItems: "center", margin: "6px 0" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      <div style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap" }}>{children}</div>
    </div>
  );
}

function Hint({ label, value, right }: { label: string; value: string; right?: boolean }) {
  return (
    <div style={{ marginLeft: right ? "auto" : 0, fontSize: 12, color: theme.colors.subtext }}>
      {label}: <span style={{ color: theme.colors.text }}>{value}</span>
    </div>
  );
}

function Divider() {
  return <div style={{ height: 1, background: theme.colors.panelBorder, margin: "10px 0" }} />;
}

function NumInput({ value, onChange }: { value: any; onChange: (v: number) => void }) {
  return (
    <input
      type="number"
      step="0.01"
      value={Number(value || 0)}
      onChange={(e) => onChange(Number(e.target.value))}
      style={inputStyle({ textAlign: "right", maxWidth: 180 })}
    />
  );
}
function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    ...extra,
  };
}

function btnPrimary(): React.CSSProperties {
  return {
    padding: "10px 14px",
    background: theme.colors.accent,
    color: "#fff",
    border: 0,
    borderRadius: 8,
    cursor: "pointer",
    fontWeight: 700,
  };
}

function Row({
  label, children, strong, brand, big,
}: {
  label: string;
  children: React.ReactNode;
  strong?: boolean;
  brand?: boolean;
  big?: boolean;
}) {
  return (
    <>
      <div style={{ color: theme.colors.subtext }}>{label}</div>
      <div
        style={{
          textAlign: "right",
          fontWeight: strong || big ? 700 : 500,
          color: brand ? (theme.colors as any).brand || theme.colors.accent : theme.colors.text,
          fontSize: big ? 18 : 14,
          letterSpacing: big ? "0.2px" : undefined,
        }}
      >
        {children}
      </div>
    </>
  );
}

function fmtCurrency(n: number) {
  if (!isFinite(n)) return "£0";
  return "£" + n.toLocaleString(undefined, { maximumFractionDigits: 2 });
}

----- FILE: ./components/CostSummary.tsx -----
// apps/web/components/CostSummary.tsx
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { panelStyle, theme } from "../lib/theme";
import { useHasCostAccess } from "../hooks/useHasCostAccess";

type Rates = { installer?: number; supervisor?: number; vehicle?: number; waste_load?: number };
type CostRow = {
  job_id: string;
  quoted_total: number;
  installer_days: number;
  supervisor_days: number;
  vehicle_days: number;
  waste_loads: number;
  materials_cost: number;
  misc_cost: number;
};

export default function CostSummary({ jobId }: { jobId: string }) {
  const { allowed, loading: loadingPerm } = useHasCostAccess();

  const [rates, setRates] = useState<Rates>({});
  const [row, setRow] = useState<CostRow | null>(null);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    let cancel = false;
    (async () => {
      if (loadingPerm || !allowed) return;
      setErr(null);

      const { data: org, error: rErr } = await supabase.from("org_settings").select("day_rates").eq("id", 1).maybeSingle();
      if (rErr) { if (!cancel) setErr(rErr.message); return; }
      const dr = (org?.day_rates || {}) as Record<string, number>;
      if (!cancel) {
        setRates({
          installer: Number(dr.installer || 0),
          supervisor: Number(dr.supervisor || 0),
          vehicle: Number(dr.vehicle || 0),
          waste_load: Number(dr.waste_load || 0),
        });
      }

      const { data: jc, error: cErr } = await supabase.from("job_costs").select("*").eq("job_id", jobId).maybeSingle();
      if (cErr) { if (!cancel) setErr(cErr.message); return; }
      if (!cancel) {
        setRow(jc ? normalizeRow(jc) : null);
      }
    })().catch((e) => !cancel && setErr(e?.message || "Failed to load"));
    return () => { cancel = true; };
  }, [jobId, allowed, loadingPerm]);

  if (loadingPerm) return null;              // wait until we know
  if (!allowed) return null;                 // hide entirely if no permission
  if (err) return <div style={{ ...panelStyle, padding: 16, color: theme.colors.danger }}>{err}</div>;
  if (!row) return <div style={{ ...panelStyle, padding: 16 }}>No cost data.</div>;

  const n = (v: any) => Number(v || 0);
  const price = n(row.quoted_total);
  const labour = n(row.installer_days) * (rates.installer || 0) + n(row.supervisor_days) * (rates.supervisor || 0);
  const vehicles = n(row.vehicle_days) * (rates.vehicle || 0);
  const waste = n(row.waste_loads) * (rates.waste_load || 0);
  const materials = n(row.materials_cost);
  const misc = n(row.misc_cost);
  const direct = labour + vehicles + waste + materials + misc;
  const margin = price - direct;

  return (
    <div style={{ display: "grid", gap: 12, gridTemplateColumns: "repeat(auto-fit, minmax(220px,1fr))" }}>
      <KPI title="Quoted" value={fmt(price)} />
      <KPI title="Cost of Sale" value={fmt(direct)} />
      <KPI title="Net Margin" value={fmt(margin)} highlight />
    </div>
  );
}

function normalizeRow(x: any): CostRow {
  return {
    job_id: x.job_id,
    quoted_total: Number(x.quoted_total || 0),
    installer_days: Number(x.installer_days || 0),
    supervisor_days: Number(x.supervisor_days || 0),
    vehicle_days: Number(x.vehicle_days || 0),
    waste_loads: Number(x.waste_loads || 0),
    materials_cost: Number(x.materials_cost || 0),
    misc_cost: Number(x.misc_cost || 0),
  };
}

function KPI({ title, value, highlight }: { title: string; value: string; highlight?: boolean }) {
  return (
    <div style={{ ...panelStyle, padding: 14 }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 4 }}>{title}</div>
      <div style={{ fontSize: 24, fontWeight: 800, letterSpacing: "0.2px", color: highlight ? (theme.colors as any).brand || theme.colors.accent : theme.colors.text }}>
        {value}
      </div>
    </div>
  );
}

function fmt(n: number) {
  if (!isFinite(n)) return "£0";
  return "£" + n.toLocaleString(undefined, { maximumFractionDigits: 2 });
}

----- FILE: ./components/drawings/DrawingsTab.tsx -----
import React, { useEffect, useMemo, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";
import { signedUrl, uploadJobDrawing, removeJobDrawing } from "../../lib/storage";

type Row = {
  id: string;
  title: string | null;
  storage_path: string;
  content_type: string | null;
  bytes: number | null;
  is_catalogue: boolean;
  created_at: string;
  url?: string | null;
};

export default function DrawingsTab({ jobId, canManage }: { jobId: string; canManage: boolean }) {
  const [rows, setRows] = useState<Row[] | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  async function load() {
    setMsg(null);
    const { data, error } = await supabase
      .from("job_drawings")
      .select("id,title,storage_path,content_type,bytes,is_catalogue,created_at")
      .eq("job_id", jobId)
      .order("created_at", { ascending: false });

    if (error) {
      setRows([]);
      setMsg(error.message);
      return;
    }
    const list = (data || []) as Row[];
    // signed URLs (best-effort)
    const withUrls = await Promise.all(
      list.map(async (r) => {
        try {
          const url = await signedUrl(r.storage_path, 3600);
          return { ...r, url };
        } catch {
          return { ...r, url: null };
        }
      })
    );
    setRows(withUrls);
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function onFilesChosen(files: FileList | null) {
    if (!files || !files.length) return;
    setBusy(true);
    setMsg(null);
    try {
      for (const f of Array.from(files)) {
        await uploadJobDrawing(jobId, f);
      }
      await load();
    } catch (e: any) {
      setMsg(e?.message || "Upload failed");
    } finally {
      setBusy(false);
    }
  }

  async function onDelete(r: Row) {
    if (!confirm(`Delete ${r.title || r.storage_path}?`)) return;
    setBusy(true);
    setMsg(null);
    try {
      await removeJobDrawing(r.storage_path, r.id);
      await load();
    } catch (e: any) {
      setMsg(e?.message || "Delete failed");
    } finally {
      setBusy(false);
    }
  }

  async function onPromote(r: Row, value: boolean) {
    setBusy(true);
    setMsg(null);
    const { error } = await supabase.from("job_drawings").update({ is_catalogue: value }).eq("id", r.id);
    setBusy(false);
    if (error) setMsg(error.message);
    else setRows((prev) => (prev ? prev.map((x) => (x.id === r.id ? { ...x, is_catalogue: value } : x)) : prev));
  }

  const isImage = (ct: string | null) => !!ct && ct.startsWith("image/");
  const isPdf = (ct: string | null) => ct === "application/pdf";

  return (
    <div style={{ display: "grid", gap: 12 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
        {canManage && (
          <label
            style={{
              padding: "8px 12px",
              borderRadius: 8,
              background: theme.colors.accent,
              color: "#fff",
              cursor: busy ? "not-allowed" : "pointer",
              opacity: busy ? 0.7 : 1,
            }}
          >
            Upload drawings
            <input
              type="file"
              multiple
              accept=".png,.jpg,.jpeg,.webp,.svg,.pdf"
              onChange={(e) => onFilesChosen(e.target.files)}
              style={{ display: "none" }}
              disabled={busy}
            />
          </label>
        )}
        {msg && <div style={{ color: theme.colors.subtext }}>{msg}</div>}
      </div>

      <div
        style={{
          ...panelStyle,
          padding: 12,
          display: "grid",
          gap: 12,
          gridTemplateColumns: "repeat(auto-fill, minmax(240px, 1fr))",
        }}
      >
        {!rows && <div style={{ opacity: 0.7 }}>Loading…</div>}
        {rows && rows.length === 0 && <div style={{ color: theme.colors.subtext }}>No drawings yet.</div>}
        {rows &&
          rows.map((r) => (
            <div
              key={r.id}
              style={{
                border: `1px solid ${theme.colors.panelBorder}`,
                borderRadius: 10,
                overflow: "hidden",
                background: "#0f151c",
                display: "grid",
                gridTemplateRows: "160px auto",
              }}
            >
              {/* preview */}
              <div
                style={{
                  display: "grid",
                  placeItems: "center",
                  background: "#0b1117",
                  borderBottom: `1px solid ${theme.colors.panelBorder}`,
                }}
              >
                {isImage(r.content_type) && r.url ? (
                  <img
                    src={r.url}
                    alt={r.title || "drawing"}
                    style={{ maxWidth: "100%", maxHeight: 160, objectFit: "contain" }}
                  />
                ) : isPdf(r.content_type) && r.url ? (
                  <a href={r.url} target="_blank" rel="noreferrer" style={{ color: theme.colors.text }}>
                    Open PDF
                  </a>
                ) : (
                  <div style={{ color: theme.colors.subtext, fontSize: 12 }}>No preview</div>
                )}
              </div>

              {/* meta + actions */}
              <div style={{ padding: 10, display: "grid", gap: 8 }}>
                <div style={{ fontWeight: 600, overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>
                  {r.title || r.storage_path.split("/").pop()}
                </div>
                <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                  <a
                    href={r.url || "#"}
                    target="_blank"
                    rel="noreferrer"
                    style={{
                      textDecoration: "none",
                      padding: "6px 10px",
                      borderRadius: 8,
                      border: `1px solid ${theme.colors.panelBorder}`,
                      color: theme.colors.text,
                      pointerEvents: r.url ? "auto" : "none",
                      opacity: r.url ? 1 : 0.5,
                    }}
                  >
                    View
                  </a>
                  {canManage && (
                    <>
                      <button
                        onClick={() => onPromote(r, !r.is_catalogue)}
                        style={{
                          padding: "6px 10px",
                          borderRadius: 8,
                          border: `1px solid ${theme.colors.panelBorder}`,
                          background: r.is_catalogue ? theme.colors.brand : "#111823",
                          color: r.is_catalogue ? "#000" : theme.colors.text,
                          cursor: "pointer",
                        }}
                      >
                        {r.is_catalogue ? "Promoted" : "Promote"}
                      </button>
                      <button
                        onClick={() => onDelete(r)}
                        style={{
                          padding: "6px 10px",
                          borderRadius: 8,
                          border: `1px solid ${theme.colors.panelBorder}`,
                          background: "#1a232e",
                          color: theme.colors.danger,
                          cursor: "pointer",
                        }}
                      >
                        Delete
                      </button>
                    </>
                  )}
                  <div style={{ marginLeft: "auto", color: theme.colors.subtext, fontSize: 12 }}>
                    {new Date(r.created_at).toLocaleDateString()}
                  </div>
                </div>
              </div>
            </div>
          ))}
      </div>
    </div>
  );
}

----- FILE: ./components/job/DrawingsPanel.tsx -----
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";
import { uploadJobAsset, removeJobAsset, signedUrl } from "../../lib/storage";

type Drawing = {
  id: string;
  job_id: string;
  name: string;
  path: string;
  promoted: boolean;
  created_at: string;
};

export default function DrawingsPanel({ jobId }: { jobId: string }) {
  const [rows, setRows] = useState<Drawing[]>([]);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  const isPlanned = useMemo(
    () => true, // optional: pass job.status to gate UI; DB trigger will still enforce
    []
  );

  async function load() {
    const { data, error } = await supabase
      .from("job_drawings")
      .select("*")
      .eq("job_id", jobId)
      .order("created_at", { ascending: false });
    if (error) {
      setMsg(error.message);
      return;
    }
    setRows((data as Drawing[]) || []);
  }

  useEffect(() => {
    if (jobId) load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function onUpload(ev: React.ChangeEvent<HTMLInputElement>) {
    const files = ev.target.files;
    if (!files || !files.length) return;
    setBusy(true);
    setMsg(null);
    try {
      for (const file of Array.from(files)) {
        const { path } = await uploadJobAsset(jobId, file, "drawings");
        const { error } = await supabase.from("job_drawings").insert({
          job_id: jobId,
          name: file.name,
          path
        });
        if (error) throw error;
      }
      await load();
    } catch (e: any) {
      setMsg(e?.message || "Upload failed.");
    } finally {
      setBusy(false);
      ev.target.value = "";
    }
  }

  async function promote(id: string, promoted: boolean) {
    setBusy(true);
    setMsg(null);
    try {
      const { error } = await supabase.from("job_drawings").update({ promoted }).eq("id", id);
      if (error) throw error;
      await load();
    } catch (e: any) {
      setMsg(e?.message || "Update failed.");
    } finally {
      setBusy(false);
    }
  }

  async function remove(d: Drawing) {
    setBusy(true);
    setMsg(null);
    try {
      const { error } = await supabase.from("job_drawings").delete().eq("id", d.id);
      if (error) throw error;
      await removeJobAsset(d.path);
      await load();
    } catch (e: any) {
      setMsg(e?.message || "Delete failed.");
    } finally {
      setBusy(false);
    }
  }

  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 10 }}>
        <div style={{ fontWeight: 600 }}>Drawings</div>
        <div style={{ flex: 1 }} />
        <label style={btnSecondary(busy || !isPlanned)}>
          <input
            type="file"
            accept=".pdf,.png,.jpg,.jpeg,.svg,.webp"
            multiple
            onChange={onUpload}
            disabled={busy || !isPlanned}
            style={{ display: "none" }}
          />
          Upload
        </label>
      </div>

      {msg && <div style={{ color: theme.colors.subtext, marginTop: 8 }}>{msg}</div>}

      {rows.length === 0 ? (
        <div style={{ color: theme.colors.subtext, marginTop: 10 }}>No drawings yet.</div>
      ) : (
        <div style={{ display: "grid", gap: 10, marginTop: 10 }}>
          {rows.map((d) => (
            <DrawingRow key={d.id} d={d} onPromote={promote} onRemove={remove} />
          ))}
        </div>
      )}
    </div>
  );
}

function DrawingRow({
  d,
  onPromote,
  onRemove
}: {
  d: Drawing;
  onPromote: (id: string, promoted: boolean) => Promise<void>;
  onRemove: (d: Drawing) => Promise<void>;
}) {
  const [url, setUrl] = useState<string>("");

  useEffect(() => {
    let active = true;
    (async () => {
      try {
        const u = await signedUrl(d.path, 3600);
        if (active) setUrl(u);
      } catch {
        // ignore
      }
    })();
    return () => {
      active = false;
    };
  }, [d.path]);

  return (
    <div
      style={{
        display: "grid",
        gridTemplateColumns: "auto 1fr auto auto",
        gap: 10,
        alignItems: "center",
        padding: "8px 10px",
        border: `1px solid ${theme.colors.panelBorder}`,
        borderRadius: 10
      }}
    >
      <div style={{ width: 40, height: 40, borderRadius: 6, overflow: "hidden", background: "#111823", display: "flex", alignItems: "center", justifyContent: "center" }}>
        {url ? (
          // Image preview for images, generic icon for others
          /\.(png|jpe?g|webp|svg)$/i.test(d.name) ? (
            // eslint-disable-next-line @next/next/no-img-element
            <img src={url} alt={d.name} style={{ width: "100%", height: "100%", objectFit: "cover" }} />
          ) : (
            <span style={{ fontSize: 11, color: theme.colors.subtext }}>FILE</span>
          )
        ) : (
          <span style={{ fontSize: 11, color: theme.colors.subtext }}>...</span>
        )}
      </div>

      <div style={{ overflow: "hidden" }}>
        <div style={{ whiteSpace: "nowrap", textOverflow: "ellipsis", overflow: "hidden" }}>{d.name}</div>
        <div style={{ fontSize: 12, color: theme.colors.subtext }}>
          {new Date(d.created_at).toLocaleString()}
        </div>
      </div>

      <a
        href={url || "#"}
        target="_blank"
        rel="noreferrer"
        style={btnSecondary(false)}
        onClick={(e) => {
          if (!url) e.preventDefault();
        }}
      >
        Open
      </a>

      <div style={{ display: "flex", gap: 6 }}>
        <button
          onClick={() => onPromote(d.id, !d.promoted)}
          style={d.promoted ? btnSecondary(false) : btnPrimary()}
        >
          {d.promoted ? "Unpromote" : "Promote"}
        </button>
        <button onClick={() => onRemove(d)} style={btnSecondary(false)}>
          Delete
        </button>
      </div>
    </div>
  );
}

function btnPrimary(): React.CSSProperties {
  return {
    padding: "8px 10px",
    background: theme.colors.accent,
    color: "white",
    border: 0,
    borderRadius: 8,
    cursor: "pointer"
  };
}

function btnSecondary(disabled: boolean): React.CSSProperties {
  return {
    padding: "8px 10px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    cursor: disabled ? "not-allowed" : "pointer",
    opacity: disabled ? 0.6 : 1
  };
}

----- FILE: ./components/job/PhotoGrid.tsx -----
// apps/web/components/job/PhotoGrid.tsx
import { panelStyle, theme } from "../../lib/theme";

export default function PhotoGrid({
  items,
  onDelete
}: {
  items: { name: string; url: string }[];
  onDelete?: (name: string) => void;
}) {
  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ fontWeight: 600, marginBottom: 10 }}>Photos</div>
      {items.length === 0 ? (
        <div style={{ color: theme.colors.subtext, fontSize: 14 }}>No photos yet.</div>
      ) : (
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fill, minmax(120px, 1fr))",
            gap: 10
          }}
        >
          {items.map((img) => (
            <div key={img.name} style={{ position: "relative", borderRadius: 8, overflow: "hidden", border: `1px solid ${theme.colors.panelBorder}` }}>
              <img src={img.url} alt={img.name} style={{ width: "100%", height: 100, objectFit: "cover", display: "block" }} />
              {onDelete && (
                <button
                  onClick={() => onDelete(img.name)}
                  style={{
                    position: "absolute",
                    top: 6,
                    right: 6,
                    padding: "4px 6px",
                    fontSize: 12,
                    background: "#111823",
                    border: `1px solid ${theme.colors.panelBorder}`,
                    color: theme.colors.text,
                    borderRadius: 6,
                    cursor: "pointer"
                  }}
                >
                  Delete
                </button>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

----- FILE: ./components/jobs/AddJobModal.tsx -----
import React, { useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { theme } from "../../lib/theme";

export default function AddJobModal({
  open,
  onClose,
  onCreated
}: {
  open: boolean;
  onClose: () => void;
  onCreated: (jobId: string) => void;
}) {
  const [title, setTitle] = useState("");
  const [client, setClient] = useState("");
  const [ref, setRef] = useState("");
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  if (!open) return null;

  async function submit() {
    if (!title.trim()) {
      setMsg("Title is required.");
      return;
    }
    setBusy(true);
    setMsg(null);

    const { data, error } = await supabase
      .from("jobs")
      .insert({
        title: title.trim(),
        client_name: client.trim() || null,
        reference: ref.trim() || null,
        status: "planned",
        percent_complete: 0
      })
      .select("id")
      .single();

    if (error) {
      setMsg(error.message);
      setBusy(false);
      return;
    }

    const jobId = data!.id as string;

    // Ensure planning row exists
    await supabase
      .from("job_planning")
      .upsert({ job_id: jobId, status: "pending" }, { onConflict: "job_id" });

    setBusy(false);
    onCreated(jobId);
  }

  return (
    <div
      style={{
        position: "fixed",
        inset: 0,
        background: "rgba(0,0,0,0.6)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 1000
      }}
      onClick={onClose}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        style={{
          width: 520,
          maxWidth: "92vw",
          background: theme.colors.panel,
          color: theme.colors.text,
          border: `1px solid ${theme.colors.panelBorder}`,
          borderRadius: 14,
          padding: 16
        }}
      >
        <div style={{ fontWeight: 700, marginBottom: 12 }}>Add Job</div>
        <div style={{ display: "grid", gap: 10 }}>
          <Field label="Title">
            <input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              style={inputStyle()}
              placeholder="Project title"
            />
          </Field>
          <Field label="Client">
            <input
              value={client}
              onChange={(e) => setClient(e.target.value)}
              style={inputStyle()}
              placeholder="Client name"
            />
          </Field>
          <Field label="Reference">
            <input
              value={ref}
              onChange={(e) => setRef(e.target.value)}
              style={inputStyle()}
              placeholder="Internal ref (optional)"
            />
          </Field>
        </div>
        {msg && (
          <div
            style={{
              marginTop: 10,
              padding: 8,
              borderLeft: `4px solid ${theme.colors.brand}`,
              color: theme.colors.text,
              background: "#0f151c",
              borderRadius: 8
            }}
          >
            {msg}
          </div>
        )}
        <div style={{ display: "flex", gap: 8, marginTop: 14, justifyContent: "flex-end" }}>
          <button
            onClick={onClose}
            style={{
              padding: "8px 12px",
              borderRadius: 10,
              border: `1px solid ${theme.colors.panelBorder}`,
              background: "#0f151c",
              color: theme.colors.text
            }}
          >
            Cancel
          </button>
          <button
            onClick={submit}
            disabled={busy}
            style={{
              padding: "8px 12px",
              borderRadius: 10,
              border: 0,
              background: theme.colors.accent,
              color: "white",
              opacity: busy ? 0.7 : 1,
              cursor: busy ? "not-allowed" : "pointer"
            }}
          >
            Create
          </button>
        </div>
      </div>
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}

function inputStyle(): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8
  };
}

----- FILE: ./components/jobs/JobCard.tsx -----
import Link from "next/link";
import StatusPill, { JobStatus } from "../ui/StatusPill";
import { panelStyle, theme } from "../../lib/theme";

export type JobTile = {
  id: string;
  title: string;
  client_name: string | null;
  status: JobStatus;
  created_at: string;
};

export default function JobCard({
  job,
  canManage,
  onChangeStatus,
}: {
  job: JobTile;
  canManage: boolean;
  onChangeStatus: (id: string) => void;
}) {
  return (
    <div
      style={{
        ...panelStyle,
        padding: 14,
        borderRadius: 12,
        display: "grid",
        gap: 8,
      }}
    >
      <div
        style={{
          display: "flex",
          alignItems: "center",
          gap: 12,
        }}
      >
        <Link
          href={`/job/${job.id}`}
          style={{ color: theme.colors.text, textDecoration: "none", fontWeight: 700 }}
        >
          {job.title}
        </Link>

        <div style={{ marginLeft: "auto" }}>
          <StatusPill
            value={job.status}
            onClick={canManage ? () => onChangeStatus(job.id) : undefined}
            title={canManage ? "Click to cycle status" : undefined}
          />
        </div>
      </div>

      <div style={{ color: theme.colors.subtext, fontSize: 12 }}>
        {job.client_name ?? "—"} • {new Date(job.created_at).toLocaleString()}
      </div>
    </div>
  );
}

----- FILE: ./components/jobs/ShareAndStartModal.tsx -----
import React, { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { theme } from "../../lib/theme";

export default function ShareAndStartModal({
  open,
  jobId,
  onClose
}: {
  open: boolean;
  jobId: string | null;
  onClose: () => void;
}) {
  const [pin, setPin] = useState("");
  const [token, setToken] = useState<string>("");
  const [validTo, setValidTo] = useState<string>("");
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    if (!open || !jobId) return;
    (async () => {
      setMsg(null);
      // Load existing PIN if present
      const { data: pRow } = await supabase.from("job_pins").select("pin").eq("job_id", jobId).maybeSingle();
      if (pRow?.pin) setPin(pRow.pin);
      // Get or create token
      const rpc = await supabase.rpc("get_or_create_job_token", { p_job_id: jobId, p_hours_valid: 72 });
      if (rpc.error) {
        setMsg(rpc.error.message);
      } else {
        const row = (rpc.data as any[])?.[0];
        if (row) {
          setToken(row.token);
          setValidTo(row.valid_to);
        }
      }
    })();
  }, [open, jobId]);

  async function savePin() {
    if (!jobId) return;
    if (!/^\d{4}$/.test(pin)) {
      setMsg("PIN must be exactly 4 digits");
      return;
    }
    setBusy(true);
    const { error } = await supabase.rpc("set_job_pin", { p_job_id: jobId, p_pin: pin });
    setBusy(false);
    if (error) setMsg(error.message);
    else setMsg("PIN saved");
  }

  function guestUrl() {
    if (!token) return "";
    const base = typeof window === "undefined" ? "" : window.location.origin;
    return `${base}/today/guest?token=${encodeURIComponent(token)}`;
  }

  async function copy(s: string) {
    await navigator.clipboard.writeText(s);
    setMsg("Copied");
    setTimeout(() => setMsg(null), 1200);
  }

  if (!open) return null;

  return (
    <div
      onClick={onClose}
      style={{
        position: "fixed",
        inset: 0,
        background: "rgba(0,0,0,.6)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 2000
      }}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        style={{
          width: 640,
          maxWidth: "95vw",
          background: theme.colors.panel,
          color: theme.colors.text,
          border: `1px solid ${theme.colors.panelBorder}`,
          borderRadius: 14,
          padding: 16
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <div style={{ fontWeight: 700 }}>Share & Start</div>
          <button
            onClick={onClose}
            style={{ marginLeft: "auto", color: theme.colors.subtext, background: "transparent", border: 0, cursor: "pointer" }}
          >
            Close
          </button>
        </div>

        <div style={{ marginTop: 12, display: "grid", gap: 12 }}>
          <div>
            <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>Guest URL</div>
            <div style={{ display: "flex", gap: 8 }}>
              <input readOnly value={guestUrl()} style={inputStyle({ flex: 1 })} />
              <button onClick={() => copy(guestUrl())} style={btnSecondary()}>Copy</button>
            </div>
            {validTo && (
              <div style={{ marginTop: 6, fontSize: 12, color: theme.colors.subtext }}>
                Valid until: {new Date(validTo).toLocaleString()}
              </div>
            )}
          </div>

          <div>
            <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>Supervisor / Guest PIN (same)</div>
            <div style={{ display: "flex", gap: 8 }}>
              <input
                value={pin}
                onChange={(e) => setPin(e.target.value.replace(/[^\d]/g, "").slice(0, 4))}
                placeholder="1234"
                maxLength={4}
                style={inputStyle({ width: 120, textAlign: "center", fontWeight: 700, letterSpacing: 2 })}
              />
              <button onClick={savePin} disabled={busy} style={btnPrimary(busy)}>Save PIN</button>
            </div>
          </div>

          {msg && (
            <div
              style={{
                padding: 8,
                borderLeft: `4px solid ${theme.colors.brand}`,
                background: "#0f151c",
                borderRadius: 8,
                color: theme.colors.text
              }}
            >
              {msg}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    ...(extra || {})
  };
}
function btnPrimary(disabled?: boolean): React.CSSProperties {
  return {
    padding: "8px 12px",
    borderRadius: 10,
    border: 0,
    background: theme.colors.accent,
    color: "white",
    cursor: disabled ? "not-allowed" : "pointer",
    opacity: disabled ? 0.7 : 1
  };
}
function btnSecondary(): React.CSSProperties {
  return {
    padding: "8px 12px",
    borderRadius: 10,
    border: `1px solid ${theme.colors.panelBorder}`,
    background: "#0f151c",
    color: theme.colors.text,
    cursor: "pointer"
  };
}

----- FILE: ./components/jobs/StatusPill.tsx -----
import React from "react";
import { supabase } from "../../lib/supabaseClient";
import { theme } from "../../lib/theme";

export type JobStatus = "planned" | "in_progress" | "snagging" | "completed";

function isUUID(v?: string | null) {
  return !!v && /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(v);
}

export default function StatusPill(props: {
  status: JobStatus;
  jobId?: string | null;
  canManage?: boolean;
  onChanged?: (next: JobStatus) => void;
}) {
  const { status, jobId, canManage = false, onChanged } = props;
  const hasValidId = isUUID(jobId);
  const clickable = canManage && hasValidId;

  function nextStatus(s: JobStatus): JobStatus {
    switch (s) {
      case "planned": return "in_progress";
      case "in_progress": return "snagging";
      case "snagging": return "completed";
      case "completed": default: return "planned";
    }
  }
  function prevStatus(s: JobStatus): JobStatus {
    switch (s) {
      case "planned": return "completed";
      case "in_progress": return "planned";
      case "snagging": return "in_progress";
      case "completed": default: return "snagging";
    }
  }
  function labelFor(s: JobStatus) {
    switch (s) {
      case "planned": return "Planned";
      case "in_progress": return "Installing";
      case "snagging": return "Snagging";
      case "completed": return "Completed";
    }
  }
  function dotColor(s: JobStatus) {
    switch (s) {
      case "planned": return theme.colors.subtext;
      case "in_progress": return theme.colors.accent;
      case "snagging": return theme.colors.warning;
      case "completed": return theme.colors.success;
      default: return theme.colors.subtext;
    }
  }

  async function updateStatus(next: JobStatus) {
    if (!hasValidId) return;
    onChanged?.(next); // optimistic
    const { error } = await supabase.from("jobs").update({ status: next }).eq("id", jobId!);
    if (error) {
      onChanged?.(status); // revert if parent supplied state handler
      alert("Couldn't update status: " + error.message);
    }
  }

  async function handleClick(e: React.MouseEvent) {
    if (!clickable) return;
    const next = e.shiftKey ? prevStatus(status) : nextStatus(status);
    await updateStatus(next);
  }

  return (
    <button
      type="button"
      onClick={handleClick}
      disabled={!clickable}
      title={
        clickable
          ? "Click to change status (Shift+Click for previous)"
          : hasValidId ? "No permission" : "Job id not ready yet"
      }
      style={{
        display: "inline-flex",
        alignItems: "center",
        gap: 8,
        padding: "6px 12px",
        borderRadius: 999,
        border: `1px solid ${theme.colors.panelBorder}`,
        background: clickable ? "linear-gradient(180deg,#111823,#0c121a)" : "#111823",
        color: theme.colors.text,
        fontSize: 12,
        lineHeight: 1,
        cursor: clickable ? "pointer" : "default",
        opacity: clickable ? 1 : 0.7
      }}
    >
      <span
        style={{
          width: 8,
          height: 8,
          borderRadius: 999,
          background: dotColor(status),
          boxShadow: "0 0 0 2px rgba(0,0,0,0.35)"
        }}
      />
      {labelFor(status)}
    </button>
  );
}

----- FILE: ./components/Layout.tsx -----
import { ReactNode } from "react";
import NavBar from "./NavBar";
import { theme } from "../lib/theme";

export default function Layout({
  children,
  withNav = true,
}: {
  children: ReactNode;
  withNav?: boolean;
}) {
  return (
    <div
      style={{
        minHeight: "100vh",
        background: theme.colors.bg,
        color: theme.colors.text,
        fontFamily:
          "var(--font-body, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji','Segoe UI Emoji')",
      }}
    >
      {withNav && <NavBar />}
      <div style={{ maxWidth: 1200, margin: "0 auto", padding: "20px" }}>{children}</div>
    </div>
  );
}

----- FILE: ./components/MapPanel.tsx -----
import { panelStyle, theme } from "../lib/theme";

export default function MapPanel({
  pins
}: {
  pins: { id: string; x: number; y: number; title: string }[];
}) {
  return (
    <div style={{ ...panelStyle, padding: 12, height: 300, position: "relative", overflow: "hidden" }}>
      <div style={{ fontWeight: 600, marginBottom: 6, paddingLeft: 4 }}>Jobs Map (mock)</div>
      <div
        style={{
          position: "absolute",
          inset: 12,
          borderRadius: 10,
          border: `1px solid ${theme.colors.panelBorder}`,
          background:
            "linear-gradient(0deg, rgba(255,255,255,0.02) 1px, transparent 1px), linear-gradient(90deg, rgba(255,255,255,0.02) 1px, transparent 1px)",
          backgroundSize: "24px 24px"
        }}
      />
      {pins.map((p) => (
        <div
          key={p.id}
          title={p.title}
          style={{
            position: "absolute",
            left: `${Math.max(0, Math.min(100, p.x))}%`,
            top: `${Math.max(0, Math.min(100, p.y))}%`,
            transform: "translate(-50%, -50%)",
            display: "flex",
            alignItems: "center",
            gap: 6
          }}
        >
          <div
            style={{
              width: 10,
              height: 10,
              borderRadius: 99,
              background: theme.colors.brand,
              boxShadow: "0 0 0 3px rgba(245,158,11,0.25)"
            }}
          />
          <div
            style={{
              fontSize: 12,
              padding: "4px 6px",
              borderRadius: 6,
              background: "#111823",
              border: `1px solid ${theme.colors.panelBorder}`
            }}
          >
            {p.title}
          </div>
        </div>
      ))}
    </div>
  );
}

----- FILE: ./components/MetricCard.tsx -----
// apps/web/components/MetricCard.tsx
import { panelStyle, theme } from "../lib/theme";

export default function MetricCard({
  title,
  value,
  hint
}: {
  title: string;
  value: string | number;
  hint?: string;
}) {
  return (
    <div
      style={{
        ...panelStyle,
        padding: 20,
        display: "flex",
        flexDirection: "column",
        minHeight: 120
      }}
    >
      <div style={{ fontSize: 13, color: theme.colors.subtext }}>{title}</div>
      <div style={{ fontSize: 28, fontWeight: 700, marginTop: 6 }}>{value}</div>
      {hint && <div style={{ fontSize: 12, color: theme.colors.subtext, marginTop: 8 }}>{hint}</div>}
    </div>
  );
}

----- FILE: ./components/modals/ShareAndStartModal.tsx -----
/**
 * ShareAndStartModal — QR + link + 4-digit PIN (idempotent)
 *
 * Assumptions:
 * - Table: public.temp_access_tokens (token uuid, job_id uuid, pin text, created_at, expires_at)
 * - Intended usage: <ShareAndStartModal open jobId onClose={() => …} />
 * - Uses a free QR image API for convenience; link + PIN are sufficient if blocked.
 */

import React from "react";
import { createPortal } from "react-dom";
import { supabase } from "@/lib/supabaseClient";
import { theme } from "@/lib/theme";

type Props = {
  open: boolean;
  jobId: string;
  onClose: () => void;
};

export default function ShareAndStartModal({ open, jobId, onClose }: Props) {
  const [pin, setPin] = React.useState<string>("");
  const [token, setToken] = React.useState<string>("");
  const [err, setErr] = React.useState<string | null>(null);

  const origin =
    typeof window !== "undefined" ? window.location.origin : "http://localhost:3000";
  const guestUrl = `${origin}/today/guest?token=${encodeURIComponent(token)}`;

  React.useEffect(() => {
    if (!open) return;
    (async () => {
      setErr(null);
      // 4-digit numeric PIN
      const p = Math.floor(1000 + Math.random() * 9000).toString();
      const { data, error } = await supabase
        .from("temp_access_tokens")
        .insert({ job_id: jobId, pin: p })
        .select("token")
        .single();
      if (error) {
        setErr(error.message);
      } else {
        setPin(p);
        setToken(data?.token ?? "");
      }
    })();
  }, [open, jobId]);

  if (!open) return null;

  return createPortal(
    <div
      role="dialog"
      aria-modal="true"
      style={{
        position: "fixed",
        inset: 0,
        background: "rgba(0,0,0,0.55)",
        display: "grid",
        placeItems: "center",
        zIndex: 1000,
      }}
      onClick={onClose}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        style={{
          width: "min(720px, 92vw)",
          borderRadius: 16,
          padding: 16,
          background: "rgba(255,255,255,0.06)",
          backdropFilter: "blur(10px)",
          border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
          color: theme?.colors?.text ?? "#e8eef6",
          boxShadow: "0 10px 30px rgba(0,0,0,0.5)",
        }}
      >
        <header style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
          <h3 style={{ margin: 0 }}>Share & Start</h3>
          <button onClick={onClose} style={chipBtn()}>Close</button>
        </header>

        <div style={{ marginTop: 12, display: "grid", gridTemplateColumns: "220px 1fr", gap: 16 }}>
          <div
            style={{
              borderRadius: 12,
              border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
              background: "rgba(0,0,0,0.35)",
              display: "grid",
              placeItems: "center",
              padding: 10,
            }}
          >
            {token ? (
              <img
                alt="QR"
                src={`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(
                  guestUrl
                )}`}
                style={{ display: "block", width: 200, height: 200 }}
              />
            ) : (
              <div style={{ opacity: 0.7 }}>Generating…</div>
            )}
          </div>

          <div style={{ display: "grid", gap: 10 }}>
            {err && <div style={{ color: "#ff7777" }}>{err}</div>}

            <div>
              <div style={{ opacity: 0.8, fontSize: 12, marginBottom: 4 }}>Guest Link</div>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "1fr auto",
                  gap: 8,
                  alignItems: "center",
                }}
              >
                <input readOnly value={guestUrl} style={inputStyle()} />
                <button
                  style={chipBtn()}
                  onClick={() => navigator.clipboard.writeText(guestUrl)}
                >
                  Copy
                </button>
              </div>
            </div>

            <div>
              <div style={{ opacity: 0.8, fontSize: 12, marginBottom: 4 }}>PIN (valid until expiry)</div>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "120px auto",
                  gap: 8,
                  alignItems: "center",
                }}
              >
                <input readOnly value={pin} style={inputStyle()} />
                <span style={{ opacity: 0.7, fontSize: 12 }}>
                  Expires end of day automatically.
                </span>
              </div>
            </div>
          </div>
        </div>

        <footer style={{ marginTop: 16, display: "flex", justifyContent: "space-between" }}>
          <div style={{ opacity: 0.7, fontSize: 12 }}>
            Use this to unlock the job via <code>/today/guest</code> (token + PIN).
          </div>
          <button onClick={onClose} style={primaryBtn()}>
            Done
          </button>
        </footer>
      </div>
    </div>,
    document.body
  );
}

/* ---------- styles ---------- */
function chipBtn(): React.CSSProperties {
  return {
    height: 34,
    padding: "0 12px",
    borderRadius: 10,
    border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
    background: "rgba(255,255,255,0.05)",
    color: theme?.colors?.text ?? "#e8eef6",
    fontWeight: 800,
  };
}
function inputStyle(): React.CSSProperties {
  return {
    height: 36,
    padding: "0 10px",
    borderRadius: 10,
    border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
    background: "rgba(0,0,0,0.35)",
    color: theme?.colors?.text ?? "#e8eef6",
  };
}
function primaryBtn(): React.CSSProperties {
  return {
    height: 36,
    padding: "0 14px",
    borderRadius: 10,
    border: "none",
    background: theme?.colors?.accent ?? "#3b82f6",
    color: "#0c1116",
    fontWeight: 900,
  };
}

----- FILE: ./components/NavBar.tsx -----
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { NAV_BY_ROLE, DEFAULT_ROLE, Role } from "../lib/roles";
import { theme } from "../lib/theme";

type DbUserRow = { role?: Role | string | null };

async function getRoleForUser(): Promise<Role> {
  const { data: u } = await supabase.auth.getUser();
  const uid = u.user?.id;
  if (!uid) return DEFAULT_ROLE;
  const { data, error } = await supabase.from("users").select("role").eq("id", uid).maybeSingle<DbUserRow>();
  if (error) {
    console.warn("[NavBar] role fetch error:", error.message);
    return DEFAULT_ROLE;
  }
  const raw = (data?.role || "").toString().toLowerCase();
  if (raw === "supervisor" || raw === "ops" || raw === "director" || raw === "installer") return raw as Role;
  return DEFAULT_ROLE;
}

export default function NavBar() {
  const router = useRouter();
  const [ready, setReady] = useState(false);
  const [role, setRole] = useState<Role>(DEFAULT_ROLE);

  useEffect(() => {
    let alive = true;
    (async () => {
      try { const r = await getRoleForUser(); if (!alive) return; setRole(r); }
      finally { if (alive) setReady(true); }
    })();
    return () => { alive = false; };
  }, []);

  const items = useMemo(() => NAV_BY_ROLE[role], [role]);

  async function signOut() {
    await supabase.auth.signOut();
    router.replace("/login");
  }

  return (
    <div style={{
      position:"sticky", top:0, zIndex:50, display:"flex", alignItems:"center", gap:12,
      padding:"12px 16px", background: theme.colors.bg, borderBottom:`1px solid ${theme.colors.border}`
    }}>
      <div style={{ fontWeight:700, color: theme.colors.text }}>BHIT Work OS</div>
      <nav style={{ display:"flex", gap:10, marginLeft:16 }}>
        {(ready ? items : new Array(4).fill(null)).map((it, idx) =>
          ready ? (
            <Link
              key={it.href}
              href={it.href}
              style={{
                padding:"8px 12px", borderRadius: theme.radii.sm,
                border:`1px solid ${theme.colors.border}`, color: theme.colors.text, textDecoration:"none"
              }}
            >
              {it.label}
            </Link>
          ) : (
            <span key={idx} style={{
              width:96, height:34, borderRadius: theme.radii.sm,
              background: theme.colors.muted, display:"inline-block", opacity:0.5
            }} />
          )
        )}
      </nav>
      <div style={{ marginLeft:"auto", display:"flex", gap:8 }}>
        <button onClick={() => router.push("/jobs")} style={{
          padding:"8px 12px", borderRadius: theme.radii.sm, border:`1px solid ${theme.colors.border}`,
          background: theme.colors.panel, color: theme.colors.text, cursor:"pointer"
        }}>Jobs</button>
        <button onClick={signOut} aria-label="Sign out" style={{
          padding:"8px 12px", borderRadius: theme.radii.sm, border:`1px solid ${theme.colors.border}`,
          background: theme.colors.panelAlt, color: theme.colors.textSubtle, cursor:"pointer"
        }}>Sign out</button>
      </div>
    </div>
  );
}

----- FILE: ./components/PinInput.tsx -----
// apps/web/components/PinInput.tsx
import { useEffect, useRef } from "react";
import { theme } from "../lib/theme";

type Props = {
  value: string;
  onChange: (v: string) => void;
  disabled?: boolean;
  autoFocus?: boolean;
};

export default function PinInput({ value, onChange, disabled, autoFocus }: Props) {
  const ref = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (autoFocus && ref.current) ref.current.focus();
  }, [autoFocus]);

  function normalize(v: string) {
    return v.replace(/\D/g, "").slice(0, 4);
  }

  return (
    <input
      ref={ref}
      inputMode="numeric"
      maxLength={4}
      value={value}
      disabled={disabled}
      onChange={(e) => onChange(normalize(e.target.value))}
      placeholder="1234"
      aria-label="PIN"
      style={{
        padding: "12px 14px",
        width: 120,
        textAlign: "center",
        letterSpacing: 3,
        borderRadius: 10,
        border: `1px solid ${theme.colors.panelBorder}`,
        background: "#111823",
        color: theme.colors.text,
        fontWeight: 700,
        fontSize: 18,
      }}
    />
  );
}

----- FILE: ./components/ShareAndStartModal.tsx -----
// apps/web/components/ShareAndStartModal.tsx
import { useEffect, useState } from "react";
import { panelStyle, theme } from "../lib/theme";

type Props = {
  jobId: string;
  jobTitle?: string;
  open: boolean;
  onClose: () => void;
};

export default function ShareAndStartModal({ jobId, jobTitle, open, onClose }: Props) {
  const [pin, setPin] = useState("");
  const [token, setToken] = useState<string | null>(null);
  const [shareUrl, setShareUrl] = useState<string | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    if (!open) {
      setPin("");
      setToken(null);
      setShareUrl(null);
      setBusy(false);
      setMsg(null);
      setErr(null);
    }
  }, [open]);

  if (!open) return null;

  async function createShare() {
    setErr(null); setMsg(null); setBusy(true);
    try {
      const res = await fetch("/api/jobs/create-share", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ jobId, pin: pin || undefined, hoursValid: 24 }),
      });
      const json = await res.json();
      if (!res.ok) throw new Error(json.error || "Failed to create share");
      setToken(json.token);
      setShareUrl(json.shareUrl);
      setPin(json.pin); // server can override to a valid 4-digit
      setMsg("Share link created");
    } catch (e: any) {
      setErr(e.message || String(e));
    } finally {
      setBusy(false);
    }
  }

  async function startJob() {
    setErr(null); setMsg(null); setBusy(true);
    try {
      const res = await fetch("/api/jobs/start", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ jobId, pin }),
      });
      const json = await res.json();
      if (!res.ok) throw new Error(json.error || "Failed to start job");
      setMsg(`Job "${json.job.title}" started`);
    } catch (e: any) {
      setErr(e.message || String(e));
    } finally {
      setBusy(false);
    }
  }

  function copy(text: string) {
    navigator.clipboard.writeText(text).then(() => setMsg("Copied"));
  }

  return (
    <div style={screen}>
      <div style={{ ...panelStyle, width: 560, maxWidth: "96vw", padding: 16 }}>
        <div style={{ display: "flex", alignItems: "center" }}>
          <div style={{ fontWeight: 700, fontSize: 16 }}>Share & Start</div>
          <div style={{ marginLeft: "auto" }}>
            <button onClick={onClose} style={btn({ background: theme.colors.panelBorder })}>Close</button>
          </div>
        </div>

        {jobTitle && <div style={{ color: theme.colors.subtext, marginTop: 6 }}>{jobTitle}</div>}

        <div style={{ marginTop: 14 }}>
          <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>Supervisor PIN (4 digits)</div>
          <input
            value={pin}
            onChange={(e) => setPin(e.target.value.replace(/[^0-9]/g, "").slice(0, 4))}
            placeholder="1234"
            style={input({ width: 120 })}
          />
        </div>

        <div style={{ display: "flex", gap: 8, marginTop: 12 }}>
          <button disabled={busy} onClick={createShare} style={btnPrimary()}>Generate Link</button>
          <button disabled={busy || !pin} onClick={startJob} style={btn({ background: theme.colors.accent, color: "#fff" })}>Start Job</button>
        </div>

        {shareUrl && (
          <div style={{ marginTop: 14 }}>
            <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>Guest link (valid 24h)</div>
            <div style={{ display: "flex", gap: 8 }}>
              <input value={shareUrl} readOnly style={input({ flex: 1 })} />
              <button onClick={() => copy(shareUrl)} style={btn()}>Copy</button>
            </div>
          </div>
        )}

        {(msg || err) && (
          <div style={{ marginTop: 12, color: err ? theme.colors.danger : theme.colors.subtext }}>{err || msg}</div>
        )}
      </div>
    </div>
  );
}

/* styles */
const screen: React.CSSProperties = {
  position: "fixed", inset: 0, background: "rgba(0,0,0,0.5)",
  display: "flex", alignItems: "center", justifyContent: "center", zIndex: 1000,
};
function input(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    borderRadius: 10,
    border: `1px solid ${theme.colors.panelBorder}`,
    background: "#111823",
    color: theme.colors.text,
    ...extra,
  };
}
function btn(extra?: React.CSSProperties): React.CSSProperties {
  return { padding: "10px 12px", borderRadius: 10, border: 0, color: theme.colors.text, cursor: "pointer", ...extra };
}
function btnPrimary(): React.CSSProperties { return btn({ background: theme.colors.brand || theme.colors.accent, color: "#fff", fontWeight: 700 }); }

----- FILE: ./components/StatusPill.tsx -----
import React from "react";
import { theme } from "@/lib/theme";

export type JobStatus = "planned" | "in_progress" | "snagging" | "completed";

const statusMeta: Record<
  JobStatus,
  { label: string; bg: string; dot: string; border: string }
> = {
  planned: {
    label: "Planned",
    bg: "rgba(245, 158, 11, 0.12)",
    dot: theme.colors.warning,
    border: theme.colors.panelBorder,
  },
  in_progress: {
    label: "Installing",
    bg: "rgba(59, 130, 246, 0.14)",
    dot: theme.colors.accent,
    border: theme.colors.panelBorder,
  },
  snagging: {
    label: "Snagging",
    bg: "rgba(245, 158, 11, 0.18)",
    dot: theme.colors.brand ?? theme.colors.warning,
    border: theme.colors.panelBorder,
  },
  completed: {
    label: "Completed",
    bg: "rgba(22, 163, 74, 0.14)",
    dot: theme.colors.success,
    border: theme.colors.panelBorder,
  },
};

type Props = {
  value: JobStatus;
  onClick?: () => void;
  size?: "sm" | "md";
  title?: string;
};

export default function StatusPill({ value, onClick, size = "md", title }: Props) {
  const m = statusMeta[value];
  const padY = size === "sm" ? 6 : 8;
  const padX = size === "sm" ? 10 : 12;
  const font = size === "sm" ? 12 : 13;

  return (
    <button
      type="button"
      title={title}
      onClick={onClick}
      style={{
        display: "inline-flex",
        alignItems: "center",
        gap: 8,
        padding: `${padY}px ${padX}px`,
        background: m.bg,
        color: theme.colors.text,
        border: `1px solid ${m.border}`,
        borderRadius: 999,
        boxShadow: "inset 0 1px 0 rgba(255,255,255,0.06), 0 6px 18px rgba(0,0,0,0.35)",
        fontSize: font,
        fontWeight: 600,
        letterSpacing: 0.2,
        cursor: onClick ? "pointer" : "default",
        transition: "transform .12s ease, border-color .12s ease",
      }}
      onMouseDown={(e) => onClick && e.currentTarget.classList.add("pill-press")}
      onMouseUp={(e) => onClick && e.currentTarget.classList.remove("pill-press")}
      onMouseLeave={(e) => onClick && e.currentTarget.classList.remove("pill-press")}
      className="status-pill"
    >
      <span
        style={{
          width: 8,
          height: 8,
          borderRadius: 8,
          background: m.dot,
          boxShadow: "0 0 0 2px rgba(0,0,0,0.25) inset",
        }}
      />
      {m.label}
      <style jsx>{`
        .status-pill:active,
        .pill-press {
          transform: scale(0.98);
          border-color: ${theme.colors.brand ?? theme.colors.accent};
        }
      `}</style>
    </button>
  );
}

----- FILE: ./components/tabs/DocumentsTab.tsx -----
import React, { useEffect, useMemo, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { theme } from "../../lib/theme";

type Row = {
  id: string;
  job_id: string;
  title: string;
  doc_type: string | null;
  storage_path: string;
  file_ext: string | null;
  bytes: number | null;
  created_at: string;
};

export default function DocumentsTab({ jobId, canManage }: { jobId: string; canManage: boolean }) {
  const [rows, setRows] = useState<Row[]>([]);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  const bucket = "job-docs";

  async function load() {
    const { data, error } = await supabase
      .from("job_documents")
      .select("*")
      .eq("job_id", jobId)
      .order("created_at", { ascending: false });
    if (error) setMsg(error.message);
    setRows((data as Row[]) || []);
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function upload(file: File) {
    setBusy(true);
    setMsg(null);
    const ext = (file.name.split(".").pop() || "").toLowerCase();
    const path = `jobs/${jobId}/docs/${Date.now()}-${file.name}`;
    // upload
    const up = await supabase.storage.from(bucket).upload(path, file, { upsert: true, contentType: file.type });
    if (up.error) {
      setMsg(up.error.message);
      setBusy(false);
      return;
    }
    // insert row
    const { error } = await supabase.from("job_documents").insert({
      job_id: jobId,
      title: file.name,
      doc_type: null,
      storage_path: path,
      file_ext: ext,
      bytes: file.size
    });
    if (error) setMsg(error.message);
    setBusy(false);
    await load();
  }

  async function download(row: Row) {
    const signed = await supabase.storage.from(bucket).createSignedUrl(row.storage_path, 60 * 60);
    if (signed.error) {
      alert(signed.error.message);
      return;
    }
    window.open(signed.data.signedUrl, "_blank");
  }

  async function remove(row: Row) {
    if (!canManage) return;
    if (!confirm("Delete this document?")) return;
    setBusy(true);
    // best-effort: delete storage first; then row
    await supabase.storage.from(bucket).remove([row.storage_path]).catch(() => {});
    const { error } = await supabase.from("job_documents").delete().eq("id", row.id);
    if (error) setMsg(error.message);
    setBusy(false);
    await load();
  }

  return (
    <div style={{ display: "grid", gap: 12 }}>
      <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>Documents</div>
        <div style={{ marginLeft: "auto", color: theme.colors.subtext }}>{rows.length} file(s)</div>
        {canManage && (
          <label
            style={{
              padding: "8px 12px",
              borderRadius: 8,
              border: `1px solid ${theme.colors.panelBorder}`,
              background: theme.colors.panel,
              color: theme.colors.text,
              cursor: "pointer",
              opacity: busy ? 0.7 : 1
            }}
          >
            Upload
            <input
              type="file"
              style={{ display: "none" }}
              onChange={(e) => {
                const f = e.target.files?.[0];
                if (f) upload(f);
                e.currentTarget.value = "";
              }}
            />
          </label>
        )}
      </div>

      <div
        style={{
          border: `1px solid ${theme.colors.panelBorder}`,
          borderRadius: 10,
          overflow: "hidden"
        }}
      >
        <table style={{ width: "100%", borderCollapse: "collapse" }}>
          <thead>
            <tr style={{ background: "#0f151c", color: theme.colors.subtext }}>
              <th style={{ textAlign: "left", padding: "10px 12px" }}>Title</th>
              <th style={{ textAlign: "left", padding: "10px 12px" }}>Type</th>
              <th style={{ textAlign: "right", padding: "10px 12px" }}>Size</th>
              <th style={{ textAlign: "right", padding: "10px 12px", width: 180 }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.id} style={{ borderTop: `1px solid ${theme.colors.panelBorder}` }}>
                <td style={{ padding: "10px 12px", color: theme.colors.text }}>{r.title}</td>
                <td style={{ padding: "10px 12px", color: theme.colors.subtext }}>{r.doc_type ?? "—"}</td>
                <td style={{ padding: "10px 12px", color: theme.colors.subtext, textAlign: "right" }}>
                  {r.bytes != null ? `${Math.round(r.bytes / 1024)} KB` : "—"}
                </td>
                <td style={{ padding: "10px 12px", textAlign: "right" }}>
                  <button
                    onClick={() => download(r)}
                    style={{
                      padding: "6px 10px",
                      borderRadius: 8,
                      border: `1px solid ${theme.colors.panelBorder}`,
                      background: theme.colors.panel,
                      color: theme.colors.text,
                      marginRight: 8
                    }}
                  >
                    Open
                  </button>
                  {canManage && (
                    <button
                      onClick={() => remove(r)}
                      style={{
                        padding: "6px 10px",
                        borderRadius: 8,
                        border: `1px solid ${theme.colors.panelBorder}`,
                        background: "#1a1313",
                        color: "#ffb4b4"
                      }}
                      disabled={busy}
                    >
                      Delete
                    </button>
                  )}
                </td>
              </tr>
            ))}
            {rows.length === 0 && (
              <tr>
                <td colSpan={4} style={{ padding: 16, color: theme.colors.subtext }}>
                  No documents yet.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {msg && (
        <div
          style={{
            padding: 10,
            borderLeft: `4px solid ${theme.colors.brand}`,
            background: "#0f151c",
            color: theme.colors.text,
            borderRadius: 8
          }}
        >
          {msg}
        </div>
      )}
    </div>
  );
}

----- FILE: ./components/tabs/DrawingsTab.tsx -----
import React, { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";

type Row = { id: string; job_id: string; path: string; created_at: string };

export default function DrawingsTab({
  jobId,
  canManage,
}: {
  jobId: string;
  canManage: boolean;
}) {
  const [rows, setRows] = useState<Row[]>([]);
  const [file, setFile] = useState<File | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  async function load() {
    const { data, error } = await supabase
      .from("job_drawings")
      .select("*")
      .eq("job_id", jobId)
      .order("created_at", { ascending: false });
    if (error) setMsg(error.message);
    else setRows((data || []) as Row[]);
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function upload() {
    if (!file) return;
    setBusy(true);
    setMsg(null);
    try {
      const path = `jobs/${jobId}/drawings/${Date.now()}_${file.name}`;
      const up = await supabase.storage
        .from("job-assets")
        .upload(path, file, {
          upsert: true,
          contentType: file.type || undefined,
        });
      if (up.error) throw up.error;

      const ins = await supabase
        .from("job_drawings")
        .insert({ job_id: jobId, path });
      if (ins.error) throw ins.error;

      setFile(null);
      await load();
    } catch (e: any) {
      setMsg(e.message || String(e));
    } finally {
      setBusy(false);
    }
  }

  async function remove(row: Row) {
    if (!canManage) return;
    setBusy(true);
    setMsg(null);
    try {
      const rm = await supabase.storage.from("job-assets").remove([row.path]);
      if (rm.error) throw rm.error;
      const del = await supabase
        .from("job_drawings")
        .delete()
        .eq("id", row.id);
      if (del.error) throw del.error;
      await load();
    } catch (e: any) {
      setMsg(e.message || String(e));
    } finally {
      setBusy(false);
    }
  }

  async function signedUrl(path: string) {
    const res = await supabase.storage
      .from("job-assets")
      .createSignedUrl(path, 60);
    return res.data?.signedUrl || "#";
  }

  return (
    <div style={{ display: "grid", gap: 12 }}>
      {canManage && (
        <div
          style={{
            ...panelStyle,
            padding: 12,
            display: "flex",
            gap: 8,
            alignItems: "center",
          }}
        >
          <input
            type="file"
            onChange={(e) => setFile(e.target.files?.[0] || null)}
            disabled={busy}
          />
          <button
            onClick={upload}
            disabled={!file || busy}
            style={{
              padding: "8px 12px",
              borderRadius: 8,
              border: `1px solid ${theme.colors.panelBorder}`,
              background: theme.colors.accent,
              color: "white",
              cursor: busy ? "not-allowed" : "pointer",
            }}
          >
            {busy ? "Uploading…" : "Upload Drawing"}
          </button>
        </div>
      )}

      {msg && (
        <div
          style={{
            ...panelStyle,
            padding: 12,
            borderLeft: `4px solid ${theme.colors.brand}`,
          }}
        >
          {msg}
        </div>
      )}

      <div style={{ ...panelStyle, padding: 12 }}>
        {rows.length === 0 ? (
          <div style={{ color: theme.colors.subtext }}>No drawings yet.</div>
        ) : (
          <div style={{ display: "grid", gap: 8 }}>
            {rows.map((r) => (
              <DrawingRow
                key={r.id}
                row={r}
                canManage={canManage}
                onDelete={() => remove(r)}
                getUrl={() => signedUrl(r.path)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

function DrawingRow({
  row,
  canManage,
  onDelete,
  getUrl,
}: {
  row: Row;
  canManage: boolean;
  onDelete: () => void;
  getUrl: () => Promise<string>;
}) {
  const [href, setHref] = useState<string>("#");
  useEffect(() => {
    let ok = true;
    getUrl().then((u) => ok && setHref(u));
    return () => {
      ok = false;
    };
  }, [getUrl]);
  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        gap: 12,
      }}
    >
      <div>
        <div style={{ fontWeight: 500 }}>{row.path.split("/").pop()}</div>
        <div style={{ fontSize: 12, color: theme.colors.subtext }}>
          {new Date(row.created_at).toLocaleString()}
        </div>
      </div>
      <div style={{ display: "flex", gap: 8 }}>
        <a
          href={href}
          target="_blank"
          rel="noreferrer"
          style={{
            padding: "6px 10px",
            borderRadius: 8,
            border: `1px solid ${theme.colors.panelBorder}`,
            background: "#0f151c",
            color: theme.colors.text,
            textDecoration: "none",
          }}
        >
          Open
        </a>
        {canManage && (
          <button
            onClick={onDelete}
            style={{
              padding: "6px 10px",
              borderRadius: 8,
              border: `1px solid ${theme.colors.panelBorder}`,
              background: "#5a1f1f",
              color: "#fff",
              cursor: "pointer",
            }}
          >
            Delete
          </button>
        )}
      </div>
    </div>
  );
}

----- FILE: ./components/tabs/FloorPlanTab.tsx -----
import React from "react";
import Link from "next/link";

export default function FloorPlanTab({ jobId }: { jobId: string }) {
  return (
    <div style={{ display: "grid", gap: 8 }}>
      <div>Open the full Floor Planner for this job:</div>
      <Link
        href={`/job/${jobId}/floorplan`}
        style={{
          padding: "10px 14px",
          borderRadius: 10,
          background: "#1d91ff",
          color: "#fff",
          textDecoration: "none",
          fontWeight: 800,
          width: "fit-content",
        }}
      >
        Launch Floor Planner
      </Link>
    </div>
  );
}

----- FILE: ./components/tabs/NotesTab.tsx -----
/**
 * NotesTab — CRUD for job notes (idempotent)
 *
 * Assumptions:
 * - Table: public.job_notes (id uuid, job_id uuid, author_id uuid, body text, created_at timestamptz)
 * - RLS allows select/insert for authenticated; delete permitted to note owner or privileged roles.
 */

import React from "react";
import { supabase } from "@/lib/supabaseClient";
import { theme } from "@/lib/theme";

type Note = {
  id: string;
  job_id: string;
  author_id: string | null;
  body: string;
  created_at: string | null;
};

type Props = { jobId: string };

export default function NotesTab({ jobId }: Props) {
  const [items, setItems] = React.useState<Note[]>([]);
  const [newBody, setNewBody] = React.useState("");
  const [err, setErr] = React.useState<string | null>(null);
  const [me, setMe] = React.useState<string | null>(null);

  React.useEffect(() => {
    let alive = true;
    (async () => {
      const { data: u } = await supabase.auth.getUser();
      setMe(u?.user?.id ?? null);
      const { data, error } = await supabase
        .from("job_notes")
        .select("*")
        .eq("job_id", jobId)
        .order("created_at", { ascending: false });
      if (!alive) return;
      if (error) setErr(error.message);
      setItems((data as Note[]) ?? []);
    })();
    return () => {
      alive = false;
    };
  }, [jobId]);

  async function addNote() {
    const body = newBody.trim();
    if (!body) return;
    setNewBody("");
    const temp: Note = {
      id: `tmp-${crypto.randomUUID()}`,
      job_id: jobId,
      author_id: me,
      body,
      created_at: new Date().toISOString(),
    };
    setItems((s) => [temp, ...s]);
    const { data, error } = await supabase
      .from("job_notes")
      .insert({ job_id: jobId, author_id: me, body })
      .select("*")
      .single();
    if (error) {
      setErr(error.message);
      setItems((s) => s.filter((n) => n.id !== temp.id));
    } else {
      setItems((s) => s.map((n) => (n.id === temp.id ? (data as Note) : n)));
    }
  }

  async function removeNote(id: string) {
    const cache = items;
    setItems((s) => s.filter((n) => n.id !== id));
    const { error } = await supabase.from("job_notes").delete().eq("id", id);
    if (error) {
      setErr(error.message);
      setItems(cache);
    }
  }

  return (
    <div style={{ maxWidth: 820 }}>
      <h3 style={{ marginTop: 0 }}>Notes</h3>

      <div style={{ display: "grid", gap: 8, marginBottom: 12 }}>
        <textarea
          value={newBody}
          onChange={(e) => setNewBody(e.target.value)}
          placeholder="Write a note…"
          rows={3}
          style={{
            borderRadius: 10,
            border: `1px solid ${panelBorder()}`,
            background: "rgba(255,255,255,0.04)",
            color: theme?.colors?.text ?? "#e8eef6",
            padding: 10,
            resize: "vertical",
          }}
        />
        <div style={{ display: "flex", gap: 8, justifyContent: "flex-end" }}>
          <button onClick={addNote} style={primaryBtn()}>
            Add note
          </button>
        </div>
      </div>

      {err && <div style={{ color: "#ff7777", marginBottom: 8 }}>{err}</div>}

      <ul style={{ listStyle: "none", margin: 0, padding: 0, display: "grid", gap: 8 }}>
        {items.map((n) => (
          <li
            key={n.id}
            style={{
              padding: 12,
              borderRadius: 10,
              border: `1px solid ${panelBorder()}`,
              background: "rgba(255,255,255,0.03)",
            }}
          >
            <div style={{ opacity: 0.7, fontSize: 12, marginBottom: 6 }}>
              {new Date(n.created_at ?? "").toLocaleString()}
            </div>
            <div style={{ whiteSpace: "pre-wrap" }}>{n.body}</div>
            {n.author_id === me && (
              <div style={{ marginTop: 8, display: "flex", gap: 8 }}>
                <button style={dangerBtn()} onClick={() => removeNote(n.id)}>
                  Delete
                </button>
              </div>
            )}
          </li>
        ))}
        {items.length === 0 && <li style={{ opacity: 0.6 }}>No notes yet.</li>}
      </ul>
    </div>
  );
}

/* ---------- styles ---------- */
function panelBorder() {
  return theme?.colors?.panelBorder ?? "rgba(255,255,255,0.08)";
}
function primaryBtn(): React.CSSProperties {
  return {
    height: 36,
    padding: "0 14px",
    borderRadius: 10,
    border: "none",
    background: theme?.colors?.accent ?? "#3b82f6",
    color: "#0c1116",
    fontWeight: 800,
  };
}
function dangerBtn(): React.CSSProperties {
  return {
    height: 30,
    padding: "0 10px",
    borderRadius: 8,
    border: `1px solid ${panelBorder()}`,
    background: "rgba(255,0,0,0.08)",
    color: "#ff9393",
    fontWeight: 800,
  };
}

----- FILE: ./components/tabs/PhotosTab.tsx -----
/**
 * PhotosTab — private bucket upload + list with signed URLs (idempotent)
 *
 * Assumptions:
 * - Storage bucket: "job-photos" (private)
 * - Table: public.job_photos (id uuid, job_id uuid, author_id uuid, storage_path text, caption text, created_at timestamptz)
 * - RLS: authenticated users may select their account’s job_photos and insert for job_id; delete own rows.
 */

import React from "react";
import { supabase } from "@/lib/supabaseClient";
import { theme } from "@/lib/theme";

type Photo = {
  id: string;
  job_id: string;
  author_id: string | null;
  storage_path: string;
  caption: string | null;
  created_at: string | null;
};

type Props = { jobId: string };

export default function PhotosTab({ jobId }: Props) {
  const [items, setItems] = React.useState<Photo[]>([]);
  const [urls, setUrls] = React.useState<Record<string, string>>({});
  const [err, setErr] = React.useState<string | null>(null);
  const [busy, setBusy] = React.useState(false);
  const [me, setMe] = React.useState<string | null>(null);

  React.useEffect(() => {
    let alive = true;
    (async () => {
      const { data: u } = await supabase.auth.getUser();
      setMe(u?.user?.id ?? null);
      const { data, error } = await supabase
        .from("job_photos")
        .select("*")
        .eq("job_id", jobId)
        .order("created_at", { ascending: false });
      if (!alive) return;
      if (error) setErr(error.message);
      setItems((data as Photo[]) ?? []);
    })();
    return () => {
      alive = false;
    };
  }, [jobId]);

  // Resolve signed URLs on demand
  async function ensureUrl(path: string) {
    if (urls[path]) return;
    const { data, error } = await supabase.storage.from("job-photos").createSignedUrl(path, 3600);
    if (error) {
      console.error(error);
      return;
    }
    setUrls((m) => ({ ...m, [path]: data.signedUrl }));
  }

  async function onFilesSelected(files: FileList | null) {
    if (!files || files.length === 0) return;
    setBusy(true);
    setErr(null);

    for (const file of Array.from(files)) {
      const key = `${jobId}/${crypto.randomUUID()}-${file.name}`;
      const { error: upErr } = await supabase.storage.from("job-photos").upload(key, file, {
        cacheControl: "3600",
        upsert: false,
        contentType: file.type,
      });
      if (upErr) {
        setErr(upErr.message);
        continue;
      }
      const { data, error: insErr } = await supabase
        .from("job_photos")
        .insert({ job_id: jobId, author_id: me, storage_path: key, caption: file.name })
        .select("*")
        .single();
      if (!insErr && data) {
        setItems((s) => [data as Photo, ...s]);
      }
    }
    setBusy(false);
  }

  async function removePhoto(id: string, path: string) {
    const cache = items;
    setItems((s) => s.filter((p) => p.id !== id));
    const { error: delRowErr } = await supabase.from("job_photos").delete().eq("id", id);
    const { error: delObjErr } = await supabase.storage.from("job-photos").remove([path]);
    if (delRowErr || delObjErr) {
      setErr((delRowErr || delObjErr)?.message ?? "Delete failed");
      setItems(cache);
    }
  }

  return (
    <div style={{ maxWidth: 980 }}>
      <h3 style={{ marginTop: 0 }}>Photos</h3>

      {/* Uploader */}
      <div
        style={{
          padding: 12,
          borderRadius: 10,
          border: `1px solid ${panelBorder()}`,
          background: "rgba(255,255,255,0.03)",
          marginBottom: 12,
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          gap: 10,
        }}
      >
        <input
          type="file"
          multiple
          accept="image/*"
          onChange={(e) => onFilesSelected(e.currentTarget.files)}
          disabled={busy}
        />
        <span style={{ opacity: 0.7, fontSize: 12 }}>{busy ? "Uploading…" : "JPG/PNG, multiple allowed"}</span>
      </div>

      {err && <div style={{ color: "#ff7777", marginBottom: 8 }}>{err}</div>}

      {/* Grid */}
      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fill, minmax(160px, 1fr))",
          gap: 12,
        }}
      >
        {items.map((p) => (
          <figure
            key={p.id}
            style={{
              margin: 0,
              borderRadius: 12,
              overflow: "hidden",
              border: `1px solid ${panelBorder()}`,
              background: "rgba(255,255,255,0.03)",
            }}
          >
            {/* Use img; Next<Image> may warn without configured domain */}
            <img
              alt={p.caption ?? "photo"}
              src={urls[p.storage_path] || (ensureUrl(p.storage_path), "")}
              style={{ width: "100%", height: 140, objectFit: "cover", display: "block", background: "#0d0f12" }}
            />
            <figcaption style={{ padding: "6px 8px", display: "flex", justifyContent: "space-between", alignItems: "center", gap: 8 }}>
              <span style={{ fontSize: 12, opacity: 0.9, overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>
                {p.caption ?? "—"}
              </span>
              {p.author_id === me && (
                <button style={dangerBtn()} onClick={() => removePhoto(p.id, p.storage_path)}>
                  Delete
                </button>
              )}
            </figcaption>
          </figure>
        ))}
      </div>

      {items.length === 0 && <div style={{ opacity: 0.6, marginTop: 8 }}>No photos yet.</div>}
    </div>
  );
}

/* ---------- styles ---------- */
function panelBorder() {
  return theme?.colors?.panelBorder ?? "rgba(255,255,255,0.08)";
}
function dangerBtn(): React.CSSProperties {
  return {
    height: 28,
    padding: "0 10px",
    borderRadius: 8,
    border: `1px solid ${panelBorder()}`,
    background: "rgba(255,0,0,0.08)",
    color: "#ff9393",
    fontWeight: 800,
  };
}

----- FILE: ./components/tabs/PlanningTab.tsx -----
// apps/web/components/tabs/PlanningTab.tsx
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";

type Planning = { job_id: string; status: "pending" | "ready" | "blocked"; notes: string | null };
type RiskRow = { id: string; job_id: string; code: string; label: string; level: "info" | "warn" | "critical" };

const RISK_OPTIONS: Array<{ code: string; label: string; level: RiskRow["level"] }> = [
  { code: "ELEVATION", label: "Work at height", level: "warn" },
  { code: "ASBESTOS", label: "Asbestos present/suspected", level: "critical" },
  { code: "LIVE_SITE", label: "Live client site constraints", level: "info" },
  { code: "POWER_ISOLATION", label: "Power isolation required", level: "warn" },
];

export default function PlanningTab({ jobId, canManage }: { jobId: string; canManage: boolean }) {
  const [p, setP] = useState<Planning | null>(null);
  const [risks, setRisks] = useState<RiskRow[]>([]);
  const [saving, setSaving] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  const riskByCode = useMemo(() => {
    const m = new Map<string, RiskRow>();
    risks.forEach((r) => m.set(r.code, r));
    return m;
  }, [risks]);

  async function load() {
    const [{ data: pData }, { data: rData }] = await Promise.all([
      supabase.from("job_planning").select("*").eq("job_id", jobId).maybeSingle(),
      supabase.from("job_risk_flags").select("*").eq("job_id", jobId).order("created_at", { ascending: false }),
    ]);
    if (pData) setP(pData as Planning);
    if (Array.isArray(rData)) setRisks(rData as RiskRow[]);
  }

  useEffect(() => {
    load();
    // live refresh on flags changes
    const ch = supabase
      .channel(`risk_${jobId}`)
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "job_risk_flags", filter: `job_id=eq.${jobId}` },
        () => load()
      )
      .subscribe();
    return () => { supabase.removeChannel(ch); };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function savePlanning(next: Partial<Planning>) {
    if (!p) return;
    setSaving(true);
    setMsg(null);
    try {
      const payload = { ...p, ...next };
      const { error } = await supabase.from("job_planning").upsert(payload, { onConflict: "job_id" });
      if (error) throw error;
      setP(payload as Planning);
    } catch (e: any) {
      setMsg(e.message ?? "Save failed");
    } finally {
      setSaving(false);
    }
  }

  async function toggleRisk(opt: typeof RISK_OPTIONS[number]) {
    const existing = riskByCode.get(opt.code);
    if (existing) {
      await supabase.from("job_risk_flags").delete().eq("id", existing.id);
    } else {
      await supabase.from("job_risk_flags").insert({
        job_id: jobId, code: opt.code, label: opt.label, level: opt.level,
      });
    }
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Planning status</div>
        <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
          {(["pending", "ready", "blocked"] as const).map((s) => {
            const active = p?.status === s;
            return (
              <button
                key={s}
                disabled={!canManage}
                onClick={() => savePlanning({ status: s })}
                style={{
                  padding: "8px 12px",
                  borderRadius: 10,
                  border: `1px solid ${active ? theme.colors.brand : theme.colors.panelBorder}`,
                  background: active ? "rgba(245, 158, 11, 0.15)" : "#0f151c",
                  color: theme.colors.text,
                  cursor: canManage ? "pointer" : "default",
                }}
              >
                {s[0].toUpperCase() + s.slice(1)}
              </button>
            );
          })}
          <span style={{ marginLeft: 12, color: theme.colors.subtext, fontSize: 12 }}>
            {saving ? "Saving…" : msg}
          </span>
        </div>
      </div>

      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Risk flags</div>
        <div style={{ display: "grid", gap: 8 }}>
          {RISK_OPTIONS.map((opt) => {
            const active = !!riskByCode.get(opt.code);
            return (
              <label key={opt.code} style={{ display: "flex", alignItems: "center", gap: 10 }}>
                <input
                  type="checkbox"
                  disabled={!canManage}
                  checked={active}
                  onChange={() => toggleRisk(opt)}
                />
                <span>{opt.label}</span>
                <span style={{ marginLeft: 8, fontSize: 12, color: theme.colors.subtext }}>
                  {opt.level.toUpperCase()}
                </span>
              </label>
            );
          })}
        </div>
      </div>

      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Notes</div>
        <textarea
          disabled={!canManage}
          value={p?.notes ?? ""}
          onChange={(e) => savePlanning({ notes: e.target.value })}
          placeholder="Planning notes, special instructions, access details..."
          style={{
            width: "100%",
            minHeight: 120,
            resize: "vertical",
            borderRadius: 10,
            border: `1px solid ${theme.colors.panelBorder}`,
            background: "#111823",
            color: theme.colors.text,
            padding: 12,
          }}
        />
      </div>
    </div>
  );
}

----- FILE: ./components/tabs/ProductsTab.tsx -----
import React from "react";

export default function ProductsTab({
  jobId,
  canManage,
}: {
  jobId: string;
  canManage: boolean;
}) {
  return (
    <div style={{ opacity: 0.9 }}>
      Products placeholder for job <b>{jobId}</b>. Wire to Smart Quote output
      and product lines. {canManage ? "(manage enabled later)" : ""}
    </div>
  );
}

----- FILE: ./components/tabs/TasksTab.tsx -----
/**
 * TasksTab (hardened)
 * - No hard dependency on tasks.created_at.
 * - Selects "*" to avoid errors if optional columns are missing.
 * - Orders by sort_order only (server). Client displays gracefully.
 */

import React from "react";
import { supabase } from "@/lib/supabaseClient";
import { theme } from "@/lib/theme";

type Task = {
  id: string;
  job_id: string;
  title: string;
  is_done: boolean;
  sort_order: number | null;
  // Optional — may not exist in older DBs; never required.
  created_at?: string | null;
};

export default function TasksTab({ jobId }: { jobId: string }) {
  const [tasks, setTasks] = React.useState<Task[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [err, setErr] = React.useState<string | null>(null);
  const [newTitle, setNewTitle] = React.useState("");

  async function load() {
    setLoading(true);
    setErr(null);
    // Select "*" to be resilient to schema differences
    const { data, error } = await supabase
      .from("tasks")
      .select("*")
      .eq("job_id", jobId)
      .order("sort_order", { ascending: true, nullsFirst: true });
    if (error) {
      setErr(error.message);
      setTasks([]);
    } else {
      setTasks((data as Task[]) || []);
    }
    setLoading(false);
  }

  React.useEffect(() => {
    if (jobId) load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  async function addTask(e: React.FormEvent) {
    e.preventDefault();
    if (!newTitle.trim()) return;
    setErr(null);

    // Compute next sort_order
    const nextOrder =
      tasks.reduce<number>((m, t) => (t.sort_order ?? 0) > m ? (t.sort_order ?? 0) : m, 0) + 1;

    const { error } = await supabase
      .from("tasks")
      .insert({ job_id: jobId, title: newTitle.trim(), sort_order: nextOrder, is_done: false });

    if (error) {
      setErr(error.message);
      return;
    }
    setNewTitle("");
    await load();
  }

  async function toggleDone(task: Task) {
    setErr(null);
    const { error } = await supabase
      .from("tasks")
      .update({ is_done: !task.is_done })
      .eq("id", task.id);
    if (error) {
      setErr(error.message);
      return;
    }
    setTasks((prev) => prev.map((t) => (t.id === task.id ? { ...t, is_done: !t.is_done } : t)));
  }

  async function deleteTask(task: Task) {
    setErr(null);
    const { error } = await supabase.from("tasks").delete().eq("id", task.id);
    if (error) {
      setErr(error.message);
      return;
    }
    setTasks((prev) => prev.filter((t) => t.id !== task.id));
  }

  return (
    <div>
      {err && (
        <div style={{ color: "#ff8a8a", marginBottom: 10 }}>
          {err}
        </div>
      )}

      <form onSubmit={addTask} style={{ display: "flex", gap: 8, marginBottom: 12 }}>
        <input
          placeholder="Add a task…"
          value={newTitle}
          onChange={(e) => setNewTitle(e.target.value)}
          style={{
            flex: 1,
            height: 36,
            padding: "0 10px",
            borderRadius: 10,
            border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
            background: "rgba(0,0,0,0.35)",
            color: theme?.colors?.text ?? "#e8eef6",
          }}
        />
        <button
          type="submit"
          style={{
            height: 36,
            padding: "0 14px",
            borderRadius: 10,
            border: "none",
            background: theme?.colors?.accent ?? "#3b82f6",
            color: "#0c1116",
            fontWeight: 900,
          }}
        >
          Add
        </button>
      </form>

      {loading ? (
        <div style={{ opacity: 0.7 }}>Loading…</div>
      ) : tasks.length === 0 ? (
        <div style={{ opacity: 0.7 }}>No tasks yet.</div>
      ) : (
        <ul style={{ listStyle: "none", margin: 0, padding: 0, display: "grid", gap: 8 }}>
          {tasks.map((t) => (
            <li
              key={t.id}
              style={{
                display: "grid",
                gridTemplateColumns: "auto 1fr auto",
                alignItems: "center",
                gap: 10,
                padding: "8px 10px",
                borderRadius: 10,
                border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.08)"}`,
                background: "rgba(255,255,255,0.03)",
              }}
            >
              <input
                type="checkbox"
                checked={!!t.is_done}
                onChange={() => toggleDone(t)}
                style={{ width: 18, height: 18 }}
              />
              <div style={{ opacity: t.is_done ? 0.6 : 1, textDecoration: t.is_done ? "line-through" : "none" }}>
                {t.title}
              </div>
              <button
                onClick={() => deleteTask(t)}
                style={{
                  height: 30,
                  padding: "0 10px",
                  borderRadius: 8,
                  border: `1px solid ${theme?.colors?.panelBorder ?? "rgba(255,255,255,0.12)"}`,
                  background: "rgba(255,255,255,0.05)",
                  color: theme?.colors?.text ?? "#e8eef6",
                  fontWeight: 800,
                }}
              >
                Delete
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

----- FILE: ./components/ui/ProgressBar.tsx -----
import { theme } from "../../lib/theme";

export default function ProgressBar({ value }: { value: number }) {
  const v = Math.max(0, Math.min(100, value));
  return (
    <div style={{ width: 160, height: 10, borderRadius: 999, background: "#111823", border: `1px solid ${theme.colors.panelBorder}` }}>
      <div
        style={{
          width: `${v}%`,
          height: "100%",
          borderRadius: 999,
          background: theme.colors.accent
        }}
      />
    </div>
  );
}

----- FILE: ./components/ui/RingGauge.tsx -----
import { theme } from "../../lib/theme";

export default function RingGauge({ percent, size = 64 }: { percent: number; size?: number }) {
  const r = (size / 2) - 6;
  const c = 2 * Math.PI * r;
  const p = Math.max(0, Math.min(100, percent));
  const dash = (p / 100) * c;

  return (
    <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
      <circle cx={size/2} cy={size/2} r={r} stroke={theme.colors.panelBorder} strokeWidth={6} fill="none" />
      <circle
        cx={size/2} cy={size/2} r={r}
        stroke={theme.colors.brand}
        strokeWidth={6}
        strokeDasharray={`${dash} ${c - dash}`}
        strokeLinecap="round"
        fill="none"
        transform={`rotate(-90 ${size/2} ${size/2})`}
      />
      <text
        x="50%" y="50%" dominantBaseline="middle" textAnchor="middle"
        fontSize={14} fill={theme.colors.text} fontWeight={700}
      >
        {Math.round(p)}%
      </text>
    </svg>
  );
}

----- FILE: ./components/ui/StatCard.tsx -----
import { ReactNode } from "react";
import { panelStyle, theme } from "../../lib/theme";

export default function StatCard({
  title,
  value,
  right
}: {
  title: string;
  value: string | number;
  right?: ReactNode;
}) {
  return (
    <div style={{ ...panelStyle, padding: 16, display: "flex", alignItems: "center", gap: 12 }}>
      <div style={{ flex: 1 }}>
        <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>
          {title.toUpperCase()}
        </div>
        <div style={{ fontSize: 28, fontWeight: 800, letterSpacing: 0.2 }}>{value}</div>
      </div>
      {right && <div>{right}</div>}
    </div>
  );
}

----- FILE: ./components/ui/StatusPill.tsx -----
/**
 * StatusPill — Glassmorphic neon pill (benchmark‑matched)
 *
 * Locked behavior:
 *  - Click            → advance status
 *  - Alt/Ctrl/Cmd+Click → revert status
 *  - Single control only (no multi-buttons)
 *
 * Visuals:
 *  - Glassmorphic capsule with toned outer glow and soft inner highlight.
 *  - Uses styled‑jsx so the CSS exactly matches your HTML benchmark.
 *  - No inner ring; just a tiny dot + text.
 *
 * Safe defaults:
 *  - If theme isn't wired, fall back to hard-coded colors.
 */

import React from "react";
import { theme } from "../../lib/theme";

export type JobStatus = "planned" | "in_progress" | "snagging" | "completed";

type Props = {
  value: JobStatus;
  onChange?: (next: JobStatus) => void;
  /** Optional override for order */
  sequence?: JobStatus[];
  /** Optional label overrides */
  labels?: Partial<Record<JobStatus, string>>;
  title?: string;
  disabled?: boolean;
  size?: "sm" | "md" | "lg";
};

const ORDER: JobStatus[] = ["planned", "in_progress", "snagging", "completed"];

// Benchmark tones
const tone = {
  installing: "#00dfff",
  planned: "#ffcc00",
  completed: "#4caf50",
  snagging: theme?.colors?.brand ?? "#ff9900",
  text: theme?.colors?.text ?? "#e8eef6",
};

export default function StatusPill({
  value,
  onChange,
  sequence = ORDER,
  labels,
  title,
  disabled,
  size = "md",
}: Props) {
  const i = sequence.indexOf(value);
  const next = (i >= 0 ? sequence[Math.min(i + 1, sequence.length - 1)] : sequence[0]) as JobStatus;
  const prev = (i >= 0 ? sequence[Math.max(i - 1, 0)] : sequence[0]) as JobStatus;

  const label =
    labels?.[value] ??
    ({
      planned: "Planned",
      in_progress: "Installing",
      snagging: "Snagging",
      completed: "Completed",
    } as Record<JobStatus, string>)[value];

  const cls =
    value === "in_progress"
      ? "status-installing"
      : value === "planned"
      ? "status-planned"
      : value === "completed"
      ? "status-completed"
      : "status-snagging";

  const sizes = {
    sm: { padY: 6, padX: 12, font: 12, dot: 6 },
    md: { padY: 8, padX: 14, font: 13.5, dot: 7 },
    lg: { padY: 10, padX: 18, font: 15, dot: 8 },
  }[size];

  function handleMouseDown(e: React.MouseEvent<HTMLButtonElement>) {
    if (disabled) return;
    const goPrev = e.altKey || e.ctrlKey || e.metaKey;
    const target = goPrev ? prev : next;
    if (onChange && target !== value) onChange(target);
  }

  return (
    <button
      type="button"
      title={title ?? hint(sequence, value)}
      className={`status-pill ${cls}`}
      disabled={!!disabled}
      onMouseDown={handleMouseDown}
      style={{
        padding: `${sizes.padY}px ${sizes.padX}px`,
        fontSize: sizes.font,
        opacity: disabled ? 0.6 : 1,
      }}
    >
      <span className="dot" style={{ width: sizes.dot, height: sizes.dot }} />
      {label}

      <style jsx>{`
        .status-pill {
          display: inline-flex;
          align-items: center;
          gap: 8px;
          border-radius: 999px;
          font-weight: 700;
          letter-spacing: 0.2px;
          line-height: 1;
          color: ${tone.text};
          cursor: ${disabled ? "not-allowed" : "pointer"};
          white-space: nowrap;

          /* Glass base + border */
          background: rgba(255, 255, 255, 0.08);
          backdrop-filter: blur(10px);
          -webkit-backdrop-filter: blur(10px);
          border: 1px solid rgba(255, 255, 255, 0.1);

          /* Soft inner highlight */
          box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.12);

          transition: box-shadow 0.25s cubic-bezier(0.25, 0.8, 0.25, 1), transform 0.06s ease;
        }

        .status-pill .dot {
          display: inline-block;
          border-radius: 999px;
          opacity: 0.95;
          box-shadow: 0 0 6px currentColor;
        }

        /* Variants (outer glow toned to match benchmark) */
        .status-installing {
          color: ${tone.installing};
          box-shadow: 0 0 10px 2px rgba(0, 223, 255, 0.25), inset 0 1px 2px rgba(255, 255, 255, 0.1);
        }
        .status-planned {
          color: ${tone.planned};
          box-shadow: 0 0 10px 2px rgba(255, 204, 0, 0.25), inset 0 1px 2px rgba(255, 255, 255, 0.1);
        }
        .status-completed {
          color: ${tone.completed};
          box-shadow: 0 0 10px 2px rgba(76, 175, 80, 0.25), inset 0 1px 2px rgba(255, 255, 255, 0.1);
        }
        .status-snagging {
          color: ${tone.snagging};
          box-shadow: 0 0 10px 2px rgba(255, 153, 0, 0.25), inset 0 1px 2px rgba(255, 255, 255, 0.1);
        }

        /* Hover pulse (subtle) */
        .status-pill:hover {
          box-shadow: 0 0 14px 4px currentColor, inset 0 1px 2px rgba(255, 255, 255, 0.15);
        }

        /* Press feedback — keeps capsule (no inner ring) */
        .status-pill:active {
          transform: translateY(1px);
          box-shadow: 0 0 6px 1px rgba(128, 128, 128, 0.2), inset 0 1px 2px rgba(0, 0, 0, 0.12);
          background: rgba(255, 255, 255, 0.05);
          border-color: rgba(255, 255, 255, 0.08);
        }

        @media (prefers-reduced-motion: reduce) {
          .status-pill {
            transition: none;
          }
        }
      `}</style>
    </button>
  );
}

function hint(seq: JobStatus[], current: JobStatus) {
  const i = seq.indexOf(current);
  const nice = (s: string) => s.replace(/_/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());
  const n = i >= 0 && i < seq.length - 1 ? nice(seq[i + 1]) : nice(seq[Math.max(i, 0)]);
  const p = i > 0 ? nice(seq[i - 1]) : nice(seq[Math.max(i, 0)]);
  return `Click → ${n}. Alt/Ctrl/Cmd+Click → ${p}.`;
}

----- FILE: ./hooks/useAuth.ts -----
// apps/web/hooks/useAuth.ts
import { useAuthCtx } from "../lib/AuthProvider";
export function useAuth() {
  return useAuthCtx();
}

----- FILE: ./hooks/useDashboardData.ts -----
import { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";

export type DashboardData = {
  jobsInProgress: number;
  quotesPending: number;
  crewUtilization: number; // 0..100
  vehiclesInUse: number;
  wasteLoadsToday: number;
  avgBufferUsed: number;   // 0..100
  netMargin: number;       // numeric (e.g., 24800)

  installsX: string[];     // day labels
  installsSeries: { name: string; data: number[] }[];

  pins: { id: string; x: number; y: number; title: string }[];

  heatRows: string[];
  heatCols: string[];
  heatValues: number[];    // row-major

  feed: { id: string; text: string; occurred_at: string }[];
};

function startOfTodayISO(): string {
  const d = new Date();
  d.setHours(0, 0, 0, 0);
  return d.toISOString();
}

export function useDashboardData() {
  const [data, setData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let active = true;

    (async () => {
      setLoading(true);

      const todayISO = startOfTodayISO();

      // Top KPIs
      const [
        cInProg,
        cQuotes,
        cVehicles,
        cWasteToday,
        crewUsage,
        bufferUsage,
        finance,
        installs,
        heat,
        feed,
        pins
      ] = await Promise.all([
        supabase.from("jobs").select("*", { count: "exact", head: true }).eq("status", "in_progress"),
        supabase.from("quotes").select("*", { count: "exact", head: true }).eq("status", "pending"),
        supabase.from("vehicles").select("*", { count: "exact", head: true }).eq("in_use", true),
        supabase.from("waste_loads").select("*", { count: "exact", head: true }).gte("booked_at", todayISO),
        supabase.from("crew_usage").select("d, utilization").order("d", { ascending: false }).limit(1),
        supabase.from("buffer_usage").select("d, percent").order("d", { ascending: false }).limit(1),
        supabase.from("finance_metrics").select("d, net_margin").order("d", { ascending: false }).limit(1),
        supabase.from("installs_by_day").select("*").order("d", { ascending: true }).limit(30),
        supabase.from("pipeline_heatmap").select("*"),
        supabase.from("activity_log").select("id, text, occurred_at").order("occurred_at", { ascending: false }).limit(12),
        supabase.from("jobs").select("id, title, location_x, location_y").is("location_x", null, false).is("location_y", null, false)
      ]);

      if (!active) return;

      // Installs series → labels + 2 series
      const instRows = (installs.data || []) as { d: string; installs: number; crews: number }[];
      const installsX = instRows.map((r) => new Date(r.d).toLocaleDateString(undefined, { month: "short", day: "numeric" }));
      const installsSeries = [
        { name: "Installs", data: instRows.map((r) => r.installs) },
        { name: "Crews", data: instRows.map((r) => r.crews) }
      ];

      // Heatmap → unique rows/cols + dense matrix
      const heatRowsSet = new Set<string>();
      const heatColsSet = new Set<string>();
      const heatRowsList = (heat.data || []) as { row_label: string; col_label: string; value: number }[];
      heatRowsList.forEach((h) => { heatRowsSet.add(h.row_label); heatColsSet.add(h.col_label); });
      const heatRowsSorted = Array.from(heatRowsSet);
      const heatColsSorted = Array.from(heatColsSet);
      // preserve insertion order as inserted (can sort if needed)
      const heatIndex = new Map<string, number>();
      const values = new Array(heatRowsSorted.length * heatColsSorted.length).fill(0);
      heatRowsSorted.forEach((r, ri) => {
        heatColsSorted.forEach((c, ci) => {
          heatIndex.set(`${r}||${c}`, ri * heatColsSorted.length + ci);
        });
      });
      heatRowsList.forEach((h) => {
        const idx = heatIndex.get(`${h.row_label}||${h.col_label}`);
        if (typeof idx === "number") values[idx] = h.value;
      });

      // Pins
      const pinRows = (pins.data || []) as { id: string; title: string; location_x: number | null; location_y: number | null }[];
      const pinsOut = pinRows
        .filter((p) => typeof p.location_x === "number" && typeof p.location_y === "number")
        .map((p) => ({ id: p.id, title: p.title, x: p.location_x as number, y: p.location_y as number }));

      setData({
        jobsInProgress: cInProg.count || 0,
        quotesPending: cQuotes.count || 0,
        crewUtilization: Number((crewUsage.data?.[0]?.utilization as number) ?? 0),
        vehiclesInUse: cVehicles.count || 0,
        wasteLoadsToday: cWasteToday.count || 0,
        avgBufferUsed: Number((bufferUsage.data?.[0]?.percent as number) ?? 0),
        netMargin: Number((finance.data?.[0]?.net_margin as number) ?? 0),

        installsX,
        installsSeries,

        pins: pinsOut,

        heatRows: heatRowsSorted,
        heatCols: heatColsSorted,
        heatValues: values,

        feed: (feed.data || []) as any
      });

      setLoading(false);
    })();

    return () => {
      active = false;
    };
  }, []);

  return { data, loading };
}

----- FILE: ./hooks/useHasCostAccess.ts -----
// apps/web/hooks/useHasCostAccess.ts
import { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { useUserRole } from "./useUserRole";

export function useHasCostAccess() {
  const { role, loading: loadingRole } = useUserRole();
  const [allowed, setAllowed] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let cancel = false;
    (async () => {
      if (loadingRole) return;
      if (role === "director") {
        if (!cancel) { setAllowed(true); setLoading(false); }
        return;
      }
      const { data: auth } = await supabase.auth.getUser();
      const uid = auth.user?.id;
      if (!uid) { if (!cancel) { setAllowed(false); setLoading(false); } return; }
      const { data, error } = await supabase.from("cost_access").select("user_id").eq("user_id", uid).maybeSingle();
      if (!cancel) {
        setAllowed(!!data && !error);
        setLoading(false);
      }
    })().catch(() => { if (!cancel) { setAllowed(false); setLoading(false); } });
    return () => { cancel = true; };
  }, [role, loadingRole]);

  return { allowed, loading };
}

----- FILE: ./hooks/useJobDetail.ts -----
// apps/web/hooks/useJobDetail.ts
import { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";

export type JobRow = {
  id: string;
  reference: string | null;
  title: string;
  client_name: string | null;
  status: "planned" | "in_progress" | "completed" | "snagging";
  percent_complete: number | null;
  created_at: string;
};

export type TaskRow = {
  id: string;
  job_id: string;
  title: string;
  is_done: boolean;
  order_index: number;
};

export type NoteRow = {
  id: string;
  job_id: string;
  content: string;
  created_at: string;
};

export function useJobDetail(jobId: string | undefined) {
  const [job, setJob] = useState<JobRow | null>(null);
  const [tasks, setTasks] = useState<TaskRow[]>([]);
  const [notes, setNotes] = useState<NoteRow[]>([]);
  const [photos, setPhotos] = useState<{ name: string; url: string }[]>([]);
  const [loading, setLoading] = useState(true);

  async function refresh() {
    if (!jobId) return;
    setLoading(true);

    const [j, t, n, listed] = await Promise.all([
      supabase.from("jobs").select("*").eq("id", jobId).single(),
      supabase
        .from("job_tasks")
        .select("*")
        .eq("job_id", jobId)
        .order("order_index", { ascending: true }),
      supabase
        .from("job_notes")
        .select("*")
        .eq("job_id", jobId)
        .order("created_at", { ascending: false }),
      supabase.storage.from("job-photos").list(jobId, {
        limit: 1000,
        sortBy: { column: "name", order: "asc" }
      })
    ]);

    if (j.data) setJob(j.data as any);
    if (t.data) setTasks(t.data as any);
    if (n.data) setNotes(n.data as any);

    const files = listed.data || [];
    const urls = files.map((f) => {
      const { data } = supabase.storage.from("job-photos").getPublicUrl(`${jobId}/${f.name}`);
      return { name: f.name, url: data.publicUrl };
    });
    setPhotos(urls);
    setLoading(false);
  }

  useEffect(() => {
    refresh();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobId]);

  // mutations
  async function addTask(title: string) {
    if (!jobId || !title.trim()) return;
    const nextOrder = (tasks[tasks.length - 1]?.order_index || 0) + 1;
    await supabase.from("job_tasks").insert({ job_id: jobId, title: title.trim(), order_index: nextOrder });
    await refresh();
  }

  async function toggleTask(id: string, is_done: boolean) {
    await supabase.from("job_tasks").update({ is_done }).eq("id", id);
    setTasks((prev) => prev.map((t) => (t.id === id ? { ...t, is_done } : t)));
  }

  async function addNote(content: string) {
    if (!jobId || !content.trim()) return;
    await supabase.from("job_notes").insert({ job_id: jobId, content: content.trim() });
    await refresh();
  }

  async function uploadPhotos(files: FileList | null) {
    if (!files || !jobId) return;
    const bucket = supabase.storage.from("job-photos");
    for (const f of Array.from(files)) {
      const path = `${jobId}/${Date.now()}-${f.name.replace(/\s+/g, "_")}`;
      await bucket.upload(path, f, { upsert: false });
    }
    await refresh();
  }

  async function deletePhoto(name: string) {
    if (!jobId) return;
    await supabase.storage.from("job-photos").remove([`${jobId}/${name}`]);
    await refresh();
  }

  return { job, tasks, notes, photos, loading, addTask, toggleTask, addNote, uploadPhotos, deletePhoto };
}

----- FILE: ./hooks/useRequireAuth.ts -----
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { supabase } from "../lib/supabaseClient";

type Session = Awaited<ReturnType<typeof supabase.auth.getSession>>["data"]["session"];

export function useRequireAuth(redirectTo: string = "/login") {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [session, setSession] = useState<Session>(null);

  useEffect(() => {
    let alive = true;
    supabase.auth.getSession().then(({ data }) => {
      if (!alive) return;
      setSession(data.session);
      if (!data.session) {
        router.replace(redirectTo);
      } else {
        setLoading(false);
      }
    });
    const { data: sub } = supabase.auth.onAuthStateChange((_event, newSession) => {
      if (!alive) return;
      setSession(newSession);
      if (!newSession) router.replace(redirectTo);
    });
    return () => {
      alive = false;
      sub?.subscription?.unsubscribe();
    };
  }, [router, redirectTo]);

  return { loading, session, user: session?.user ?? null };
}

----- FILE: ./hooks/useUserRole.ts -----
// hooks/useUserRole.ts
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabaseClient";

export type Role = "guest" | "installer" | "ops" | "director" | "admin";

type UseUserRoleResult = {
  role: Role;
  userId: string | null;
  loading: boolean;
  refresh: () => Promise<void>;
};

export function useUserRole(): UseUserRoleResult {
  const [role, setRole] = useState<Role>("guest");
  const [userId, setUserId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  async function load() {
    setLoading(true);
    try {
      const { data: authData } = await supabase.auth.getUser();
      const uid = authData?.user?.id || null;
      setUserId(uid);

      if (!uid) {
        setRole("guest");
        return;
      }

      const { data, error } = await supabase
        .from("users")
        .select("role")
        .eq("id", uid)
        .maybeSingle();

      if (error) {
        console.warn("useUserRole: users select error", error);
        setRole("guest");
        return;
      }

      const r = (data?.role as Role) || "guest";
      setRole(r);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
    const { data: sub } = supabase.auth.onAuthStateChange(() => {
      load();
    });
    return () => {
      sub?.subscription?.unsubscribe();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return { role, userId, loading, refresh: load };
}

----- FILE: ./lib/AuthProvider.tsx -----
// apps/web/lib/AuthProvider.tsx
import { createContext, useContext, useEffect, useMemo, useState } from "react";
import type { Session, User } from "@supabase/supabase-js";
import { supabase } from "./supabaseClient";

type AuthCtx = {
  ready: boolean;
  user: User | null;
  session: Session | null;
  signOut: () => Promise<void>;
};

const Ctx = createContext<AuthCtx>({ ready: false, user: null, session: null, signOut: async () => {} });

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [ready, setReady] = useState(false);
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    let alive = true;

    (async () => {
      const { data } = await supabase.auth.getSession();
      if (!alive) return;
      setSession(data.session ?? null);
      setUser(data.session?.user ?? null);
      setReady(true);
    })();

    const { data: sub } = supabase.auth.onAuthStateChange((_evt, sess) => {
      setSession(sess ?? null);
      setUser(sess?.user ?? null);
      // keep ready=true after first hydration
      setReady((prev) => prev || true);
    });

    return () => {
      alive = false;
      sub.subscription.unsubscribe();
    };
  }, []);

  async function signOut() {
    await supabase.auth.signOut();
  }

  const value = useMemo(() => ({ ready, user, session, signOut }), [ready, user, session]);
  return <Ctx.Provider value={value}>{children}</Ctx.Provider>;
}

export function useAuthCtx() {
  return useContext(Ctx);
}

----- FILE: ./lib/docs.ts -----
import { supabase } from "./supabaseClient";

export type JobDoc = {
  id: string;
  job_id: string;
  title: string;
  doc_type: string | null;
  storage_path: string;
  file_ext: string | null;
  bytes: number | null;
  created_at: string;
};

const BUCKET = "job-docs";

export async function listJobDocs(jobId: string) {
  const { data, error } = await supabase
    .from("job_documents")
    .select("*")
    .eq("job_id", jobId)
    .order("created_at", { ascending: false });
  if (error) throw error;
  return (data ?? []) as JobDoc[];
}

export async function uploadJobDoc(jobId: string, file: File, title?: string, docType?: string) {
  const ext = (file.name.split(".").pop() || "").toLowerCase();
  const ts = Date.now();
  const safe = file.name.replace(/[^\w\-.]+/g, "_");
  const path = `${jobId}/${ts}-${safe}`;

  const { error: upErr } = await supabase.storage.from(BUCKET).upload(path, file, {
    upsert: true,
    cacheControl: "3600",
    contentType: file.type || undefined,
  });
  if (upErr) throw upErr;

  const { data: ins, error: insErr } = await supabase
    .from("job_documents")
    .insert({
      job_id: jobId,
      title: title || file.name,
      doc_type: docType || "Other",
      storage_path: path,
      file_ext: ext,
      bytes: file.size,
    })
    .select()
    .single();

  if (insErr) {
    // rollback file if DB insert fails
    await supabase.storage.from(BUCKET).remove([path]).catch(() => {});
    throw insErr;
  }
  return ins as JobDoc;
}

export async function removeJobDoc(doc: JobDoc) {
  const { error: delErr } = await supabase.storage.from(BUCKET).remove([doc.storage_path]);
  if (delErr) throw delErr;
  const { error } = await supabase.from("job_documents").delete().eq("id", doc.id);
  if (error) throw error;
}

export async function getDocSignedUrl(path: string, seconds = 60 * 10) {
  const { data, error } = await supabase.storage.from(BUCKET).createSignedUrl(path, seconds);
  if (error) throw error;
  return data.signedUrl as string;
}

----- FILE: ./lib/floorplan.ts -----
// apps/web/lib/floorplan.ts
import { supabase } from "./supabaseClient";

export function planAssetPath(jobId: string, filename: string) {
  const clean = filename.replace(/\s+/g, "-").toLowerCase();
  return `jobs/${jobId}/plans/${Date.now()}-${clean}`;
}

export function completionPhotoPath(jobId: string, filename: string) {
  const clean = filename.replace(/\s+/g, "-").toLowerCase();
  return `jobs/${jobId}/components/${Date.now()}-${clean}`;
}

export async function uploadToBucket(bucket: "job-assets" | "job-photos", path: string, file: File) {
  const { data, error } = await supabase.storage.from(bucket).upload(path, file, {
    cacheControl: "3600",
    upsert: false
  });
  if (error) throw error;
  return data;
}

export async function getSignedUrl(bucket: "job-assets" | "job-photos", path: string, expiresSec = 3600) {
  const { data, error } = await supabase.storage.from(bucket).createSignedUrl(path, expiresSec);
  if (error) throw error;
  return data.signedUrl;
}

----- FILE: ./lib/fonts.ts -----
// apps/web/lib/fonts.ts
import { Outfit, Manrope, Geist } from "next/font/google";

const outfit = Outfit({ subsets: ["latin"], display: "swap", variable: "--font-brand" });
const manrope = Manrope({ subsets: ["latin"], display: "swap", variable: "--font-brand" });
const geist = Geist({ subsets: ["latin"], display: "swap", variable: "--font-brand" });

// Pick the look you want here:
const ACTIVE_FONT: "outfit" | "manrope" | "geist" = "outfit";

export const brand =
  ACTIVE_FONT === "manrope" ? manrope : ACTIVE_FONT === "geist" ? geist : outfit;

----- FILE: ./lib/jobs.ts -----
import { supabase } from "./supabaseClient";

export const JOB_STATUSES = [
  "planned",
  "in_progress",
  "snagging",
  "completed",
] as const;

export type JobStatus = typeof JOB_STATUSES[number];

export function statusLabel(s: JobStatus): string {
  switch (s) {
    case "planned":
      return "Planned";
    case "in_progress":
      return "Installing";
    case "snagging":
      return "Snagging";
    case "completed":
      return "Completed";
    default:
      return s;
  }
}

export function nextStatus(s: JobStatus): JobStatus {
  const order: JobStatus[] = ["planned", "in_progress", "snagging", "completed"];
  const idx = order.indexOf(s);
  return order[(idx + 1) % order.length];
}

export async function updateJobStatus(jobId: string, status: JobStatus) {
  const { error } = await supabase.from("jobs").update({ status }).eq("id", jobId);
  if (error) throw error;
}

----- FILE: ./lib/jobsFetch.ts -----
// path: apps/web/lib/jobsFetch.ts
import { supabase } from "./supabaseClient";

export type JobRowUI = {
  id: string;
  reference: string | null;
  title: string | null;
  client_name: string | null;
  status: string | null;
  lead_installer_name: string | null;
  created_at: string | null;
};

/**
 * Bomb-proof jobs loader:
 * 1) Try view v_jobs_list
 * 2) On error (e.g., schema cache/view missing), fallback to relational select
 */
export async function loadJobsSafe(): Promise<{ data: JobRowUI[]; error: string | null }> {
  // Try the view first
  const v = await supabase
    .from("v_jobs_list")
    .select("id, reference, title, client_name, status, lead_installer_name, created_at")
    .order("created_at", { ascending: false });

  if (!v.error) return { data: (v.data ?? []) as JobRowUI[], error: null };

  // Fallback: relational select from base tables (works if view is missing)
  const r = await supabase
    .from("jobs")
    .select(`
      id, reference, title, status, created_at,
      clients:client_id ( name ),
      users:lead_installer_id ( full_name )
    `)
    .order("created_at", { ascending: false });

  if (r.error) {
    // Return the original error (view) to keep root cause visible, plus fallback detail
    const merged = `View failed: ${v.error.message}; Fallback failed: ${r.error.message}`;
    return { data: [], error: merged };
  }

  const map = (rows: any[]): JobRowUI[] =>
    (rows ?? []).map((x) => ({
      id: x.id,
      reference: x.reference ?? null,
      title: x.title ?? null,
      client_name: x.clients?.name ?? null,
      status: x.status ?? null,
      lead_installer_name: x.users?.full_name ?? null,
      created_at: x.created_at ?? null,
    }));

  return { data: map(r.data as any[]), error: null };
}

----- FILE: ./lib/roles.ts -----
export type Role = "installer" | "supervisor" | "ops" | "director";
export const NAV_BY_ROLE: Record<Role, { label: string; href: string }[]> = {
  installer: [
    { label: "Dashboard", href: "/dashboard" },
    { label: "Today", href: "/today" },
    { label: "Jobs", href: "/jobs" }
  ],
  supervisor: [
    { label: "Dashboard", href: "/dashboard" },
    { label: "Today", href: "/today" },
    { label: "Jobs", href: "/jobs" },
    { label: "Close Day", href: "/close-day" }
  ],
  ops: [
    { label: "Dashboard", href: "/dashboard" },
    { label: "Today", href: "/today" },
    { label: "Jobs", href: "/jobs" },
    { label: "Close Day", href: "/close-day" },
    { label: "Clients", href: "/clients" },
    { label: "Settings", href: "/settings" }
  ],
  director: [
    { label: "Dashboard", href: "/dashboard" },
    { label: "Today", href: "/today" },
    { label: "Jobs", href: "/jobs" },
    { label: "Close Day", href: "/close-day" },
    { label: "Clients", href: "/clients" },
    { label: "Settings", href: "/settings" }
  ],
};
export const DEFAULT_ROLE: Role = "installer";

----- FILE: ./lib/rpc.ts -----
// apps/web/lib/rpc.ts
import { supabase } from "./supabaseClient";

export async function ensureJobPin(jobId: string) {
  const { data, error } = await supabase.rpc("ensure_job_pin", { p_job: jobId });
  if (error) throw error;
  return data as string; // 4-digit PIN
}

export async function getOrCreateJobToken(jobId: string) {
  const { data, error } = await supabase.rpc("get_or_create_job_token", { p_job: jobId });
  if (error) throw error;
  return data as string; // token
}

export async function verifyGuestPin(token: string, pin: string) {
  const { data, error } = await supabase.rpc("verify_guest_pin", { token, pin });
  if (error) throw error;
  return (data ?? []) as Array<{
    id: string; title: string; client_name: string | null; status: string; created_at: string;
  }>;
}

export async function startJobWithPin(jobId: string, pin: string) {
  const { data, error } = await supabase.rpc("start_job_with_pin", { p_job: jobId, p_pin: pin });
  if (error) throw error;
  return !!data;
}

----- FILE: ./lib/server/supabaseAdmin.ts -----
// apps/web/lib/server/supabaseAdmin.ts
import { createClient } from "@supabase/supabase-js";

const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!url || !serviceKey) {
  throw new Error("Missing SUPABASE env vars. Set NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY");
}

export const supabaseAdmin = createClient(url, serviceKey, {
  auth: { persistSession: false, autoRefreshToken: false },
});

----- FILE: ./lib/storage.ts -----
// lib/storage.ts
import { supabase } from "./supabaseClient";

/** path: jobs/<jobId>/drawings/<timestamp>_<filename> */
export function jobDrawingPath(jobId: string, filename: string) {
  const safe = filename.replace(/[^\w.\-]/g, "_");
  const ts = Date.now();
  return `jobs/${jobId}/drawings/${ts}_${safe}`;
}

/** Upload a drawing file to the private 'job-assets' bucket */
export async function uploadJobDrawing(jobId: string, file: File) {
  const path = jobDrawingPath(jobId, file.name);
  const { error } = await supabase.storage.from("job-assets").upload(path, file, {
    upsert: true,
    cacheControl: "3600",
  });
  if (error) throw error;
  return { path };
}

/** Get a short-lived signed URL for display */
export async function getSignedUrl(path: string, expiresIn = 60 * 10) {
  const { data, error } = await supabase.storage
    .from("job-assets")
    .createSignedUrl(path, expiresIn);
  if (error) throw error;
  return data.signedUrl;
}

----- FILE: ./lib/supabaseAdmin.ts -----
import { createClient } from "@supabase/supabase-js";

const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!; // server-only
export const supabaseAdmin = createClient(url, serviceKey, {
  auth: { persistSession: false, autoRefreshToken: false },
});

----- FILE: ./lib/supabaseClient.ts -----
import { createClient } from "@supabase/supabase-js";
const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
if (!url || !anon) {
  // eslint-disable-next-line no-console
  console.warn("[supabaseClient] Missing NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY.");
}
export const supabase = createClient(url, anon, {
  auth: { persistSession: true, autoRefreshToken: true, detectSessionInUrl: true },
});

----- FILE: ./lib/theme.ts -----
export const theme = {
  colors: {
    bg: "#0e141b",
    panel: "#121a23",
    panelAlt: "#0b1117",
    border: "#1d2733",
    text: "#e8eef6",
    textSubtle: "#9fb2c8",
    accent: "#3b82f6",
    accentAlt: "#22c55e",
    warn: "#f59e0b",
    danger: "#ef4444",
    muted: "#223041"
  },
  radii: { xs: 6, sm: 8, md: 12, lg: 16, xl: 20 },
  spacing: (n: number) => `${n * 4}px`,
  shadow: "0 6px 24px rgba(0,0,0,0.25)"
} as const;

----- FILE: ./locales/en.json -----
{ "nav": { "dashboard": "Dashboard", "today": "Today", "jobs": "Jobs", "closeDay": "Close Day", "clients": "Clients", "settings": "Settings", "signOut": "Sign out" } }

----- FILE: ./locales/es.json -----
{ "nav": { "dashboard": "Panel", "today": "Hoy", "jobs": "Trabajos", "closeDay": "Cierre del día", "clients": "Clientes", "settings": "Ajustes", "signOut": "Cerrar sesión" } }

----- FILE: ./locales/pt.json -----
{ "nav": { "dashboard": "Painel", "today": "Hoje", "jobs": "Trabalhos", "closeDay": "Fechar dia", "clients": "Clientes", "settings": "Definições", "signOut": "Sair" } }

----- FILE: ./locales/ro.json -----
{ "nav": { "dashboard": "Panou", "today": "Astăzi", "jobs": "Lucrări", "closeDay": "Închidere zi", "clients": "Clienți", "settings": "Setări", "signOut": "Deconectare" } }

----- FILE: ./middleware.disabled.ts -----
/**
 * Disabled middleware stub — include this file when you want to temporarily
 * turn off auth gating for debugging. To disable, rename this file to
 * middleware.ts and rename the real middleware.ts to middleware.enabled.ts.
 */
export {};

----- FILE: ./middleware.enabled.ts -----
/**
 * Disabled middleware stub — include this file when you want to temporarily
 * turn off auth gating for debugging. To disable, rename this file to
 * middleware.ts and rename the real middleware.ts to middleware.enabled.ts.
 */
export {};

----- FILE: ./middleware.ts -----
/**
 * No-op middleware for local dev.
 * Prevents Next.js runtime errors and avoids login loops.
 * Replace with an auth-aware middleware later when cookie-based auth is in place.
 */
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(_req: NextRequest) {
  return NextResponse.next();
}

export const config = {
  matcher: ["/__noop_never_matches"], // never matches anything
};

----- FILE: ./next-env.d.ts -----
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.

----- FILE: ./next.config.js -----
// next.config.js
const path = require("path");

module.exports = {
  reactStrictMode: true,
  webpack: (config) => {
    config.resolve.alias["@"] = path.resolve(__dirname);
    config.resolve.alias["@/lib"] = path.resolve(__dirname, "lib");
    config.resolve.alias["@/hooks"] = path.resolve(__dirname, "hooks");
    config.resolve.alias["@/components"] = path.resolve(__dirname, "components");
    return config;
  },
};

----- FILE: ./package.json -----
{
  "name": "bhit-work-os-web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3001",
    "build": "next build",
    "start": "next start -p 3001",
    "lint": "eslint . --ext .ts,.tsx --max-warnings=0",
    "typecheck": "tsc --noEmit",
    "dev:check": "npm run lint && npm run typecheck"
  },
  "dependencies": {
    "@google/genai": "^1.13.0",
    "@google/generative-ai": "^0.24.1",
    "@react-pdf/renderer": "^4.3.0",
    "@supabase/supabase-js": "^2.42.0",
    "exceljs": "^4.4.0",
    "immer": "^10.1.1",
    "konva": "^9.3.22",
    "localforage": "^1.10.0",
    "multer": "^2.0.2",
    "nanoid": "^5.1.5",
    "next": "^15.4.6",
    "openai": "^5.12.2",
    "pdf-parse": "^1.1.1",
    "pdfjs-dist": "^5.4.54",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-konva": "^19.0.7",
    "xlsx": "^0.18.5",
    "zod": "^3.25.76",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@types/multer": "^2.0.0",
    "@types/node": "^20.19.10",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.57.1",
    "eslint-config-next": "^14.2.31",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.12",
    "typescript": "^5.9.2"
  }
}

----- FILE: ./pages/_app.tsx -----
// pages/_app.tsx
import type { AppProps } from "next/app";
import Head from "next/head";
import AppNav from "@/components/AppNav";
import "@/styles/globals.css"; // keep if present

export default function MyApp({ Component, pageProps }: AppProps) {
  return (
    <>
      <Head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>BHIT OS</title>
      </Head>
      <AppNav />
      <main style={{ padding: 16 }}>
        <Component {...pageProps} />
      </main>
    </>
  );
}

----- FILE: ./pages/admin-panel.tsx -----
export default function AdminPanelPage() { return <div style={{padding: '24px'}}>Admin Panel (Director Only)</div>; }

----- FILE: ./pages/admin/costing.tsx -----
// apps/web/pages/admin/costing.tsx
import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";
import { useRequireAuth } from "../../hooks/useRequireAuth";
import { useHasCostAccess } from "../../hooks/useHasCostAccess";
import CostControlPanel from "../../components/CostControlPanel";

type Job = { id: string; title: string; client_name: string | null; status: string; created_at: string };

export default function CostingAdmin() {
  useRequireAuth();
  const { allowed, loading } = useHasCostAccess();

  const [jobs, setJobs] = useState<Job[]>([]);
  const [selected, setSelected] = useState<string>("");

  useEffect(() => {
    if (loading || !allowed) return;
    (async () => {
      const { data } = await supabase
        .from("jobs")
        .select("id,title,client_name,status,created_at")
        .order("created_at", { ascending: false })
        .limit(100);
      setJobs(data || []);
      if (data && data.length && !selected) setSelected(data[0].id);
    })();
  }, [allowed, loading, selected]);

  if (loading) return <div style={{ ...panelStyle, padding: 16 }}>Checking access…</div>;
  if (!allowed) return <div style={{ ...panelStyle, padding: 16, color: theme.colors.danger }}>Not authorised.</div>;

  return (
    <div style={{ display: "grid", gap: 12 }}>
      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 700, marginBottom: 8 }}>Costing Admin</div>
        <div style={{ display: "grid", gridTemplateColumns: "220px 1fr", gap: 10, alignItems: "center" }}>
          <div style={{ fontSize: 12, color: theme.colors.subtext }}>Select job</div>
          <select
            value={selected}
            onChange={(e) => setSelected(e.target.value)}
            style={{
              padding: "10px 12px",
              background: "#111823",
              border: `1px solid ${theme.colors.panelBorder}`,
              color: theme.colors.text,
              borderRadius: 8,
              minWidth: 320
            }}
          >
            {jobs.map((j) => (
              <option key={j.id} value={j.id}>
                {j.title} — {j.client_name ?? "—"} ({new Date(j.created_at).toLocaleDateString()})
              </option>
            ))}
          </select>
        </div>
      </div>

      {selected && <CostControlPanel jobId={selected} />}
    </div>
  );
}

----- FILE: ./pages/api/guest/create-upload-url.ts -----
// apps/web/pages/api/guest/create-upload-url.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { supabaseAdmin } from "../../../lib/server/supabaseAdmin";

type Body = { token?: string; pin?: string; filename?: string; contentType?: string };

function slug(s: string) {
  return (s || "file")
    .toLowerCase()
    .replace(/[^a-z0-9._-]+/g, "-")
    .replace(/-+/g, "-")
    .replace(/^[-.]+|[-.]+$/g, "");
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method Not Allowed" });

  const { token, pin, filename, contentType } = (req.body || {}) as Body;
  if (!token || !pin || !filename) return res.status(400).json({ error: "token, pin, filename required" });

  // Settings gate: guest_enabled && guest_photos_upload
  const { data: org } = await supabaseAdmin.from("org_settings").select("guest_enabled, guest_photos_upload").eq("id", 1).single();
  if (!org?.guest_enabled || !org?.guest_photos_upload) {
    return res.status(403).json({ error: "Guest uploads are disabled" });
  }

  // Verify token + pin → get job
  const { data: rows, error: vErr } = await supabaseAdmin.rpc("verify_guest_pin", { token, pin });
  if (vErr) return res.status(400).json({ error: vErr.message });
  const job = Array.isArray(rows) ? rows[0] : rows;
  if (!job?.id) return res.status(401).json({ error: "Invalid token or PIN" });

  const bucket = "job-photos";
  const path = `${job.id}/${Date.now()}-${slug(filename!)}`;

  // Create signed upload URL (client will call uploadToSignedUrl with token)
  const { data, error } = await supabaseAdmin.storage.from(bucket).createSignedUploadUrl(path);
  if (error || !data) return res.status(500).json({ error: error?.message || "Failed to create signed upload URL" });

  // Optionally validate contentType client-side during actual upload
  return res.status(200).json({
    bucket,
    path: data.path,
    token: data.token, // required by uploadToSignedUrl
    contentType: contentType || "application/octet-stream",
  });
}

----- FILE: ./pages/api/guest/list-photos.ts -----
// apps/web/pages/api/guest/list-photos.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { supabaseAdmin } from "../../../lib/server/supabaseAdmin";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const token = (req.method === "GET" ? req.query.token : req.body?.token) as string | undefined;
  const pin   = (req.method === "GET" ? req.query.pin   : req.body?.pin) as string | undefined;
  if (!token || !pin) return res.status(400).json({ error: "token and pin required" });

  // Settings gate: guest_enabled && guest_photos_read
  const { data: org } = await supabaseAdmin.from("org_settings").select("guest_enabled, guest_photos_read").eq("id", 1).single();
  if (!org?.guest_enabled || !org?.guest_photos_read) {
    return res.status(403).json({ error: "Guest photo view is disabled" });
  }

  // Verify token + pin → get job
  const { data: rows, error: vErr } = await supabaseAdmin.rpc("verify_guest_pin", { token, pin });
  if (vErr) return res.status(400).json({ error: vErr.message });
  const job = Array.isArray(rows) ? rows[0] : rows;
  if (!job?.id) return res.status(401).json({ error: "Invalid token or PIN" });

  const bucket = "job-photos";
  const folder = `${job.id}`;

  // List objects under job folder
  const { data: objects, error: listErr } = await supabaseAdmin.storage.from(bucket).list(folder, {
    limit: 100,
    sortBy: { column: "created_at", order: "desc" },
  });
  if (listErr) return res.status(500).json({ error: listErr.message });

  // Sign each for short-lived read (10 minutes)
  const results: { name: string; path: string; url: string }[] = [];
  for (const obj of objects || []) {
    const key = `${folder}/${obj.name}`;
    const { data: signed, error: signErr } = await supabaseAdmin.storage.from(bucket).createSignedUrl(key, 600);
    if (!signErr && signed?.signedUrl) {
      results.push({ name: obj.name, path: key, url: signed.signedUrl });
    }
  }

  return res.status(200).json({ items: results });
}

----- FILE: ./pages/api/health.ts -----
// apps/web/pages/api/health.ts
import type { NextApiRequest, NextApiResponse } from "next";
export default function handler(_req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ ok: true });
}

----- FILE: ./pages/api/jobs/create-share.ts -----
// apps/web/pages/api/jobs/create-share.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { supabaseAdmin } from "../../../lib/supabaseAdmin";

type Body = { jobId?: string; pin?: string; hoursValid?: number };

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });

  const { jobId, pin, hoursValid = 24 } = (req.body || {}) as Body;
  if (!jobId) return res.status(400).json({ error: "jobId is required" });

  // Check job exists
  const { data: job, error: jobErr } = await supabaseAdmin.from("jobs").select("id,title").eq("id", jobId).single();
  if (jobErr || !job) return res.status(404).json({ error: "Job not found" });

  // PIN: use provided or generate 4-digit
  const chosenPin = (pin && /^[0-9]{4}$/.test(pin) ? pin : Math.floor(1000 + Math.random() * 9000).toString());

  // Upsert PIN
  const { error: pinErr } = await supabaseAdmin.from("job_pins").upsert({ job_id: jobId, pin: chosenPin }, { onConflict: "job_id" });
  if (pinErr) return res.status(500).json({ error: pinErr.message });

  // Create token valid for N hours
  const token = cryptoRandom(24);
  const { error: tokErr } = await supabaseAdmin.from("temp_access_tokens").upsert({
    token,
    job_id: jobId,
    valid_to: new Date(Date.now() + hoursValid * 3600_000).toISOString(),
  }, { onConflict: "token" });
  if (tokErr) return res.status(500).json({ error: tokErr.message });

  const origin =
    (process.env.NEXT_PUBLIC_APP_BASE_URL && process.env.NEXT_PUBLIC_APP_BASE_URL.trim()) ||
    (req.headers["x-forwarded-proto"] && req.headers.host ? `${req.headers["x-forwarded-proto"]}://${req.headers.host}` : `http://${req.headers.host}`);

  const shareUrl = `${origin}/today/guest?t=${encodeURIComponent(token)}`;

  return res.status(200).json({ token, pin: chosenPin, shareUrl, job: { id: job.id, title: job.title } });
}

function cryptoRandom(n: number) {
  // URL-safe base64 without padding
  const bytes = Buffer.allocUnsafe(n);
  for (let i = 0; i < n; i++) bytes[i] = Math.floor(Math.random() * 256);
  return bytes.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
}

----- FILE: ./pages/api/jobs/start.ts -----
// apps/web/pages/api/jobs/start.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { supabaseAdmin } from "../../../lib/supabaseAdmin";

type Body = { jobId?: string; pin?: string };

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });

  const { jobId, pin } = (req.body || {}) as Body;
  if (!jobId || !pin) return res.status(400).json({ error: "jobId and pin are required" });

  // Verify PIN
  const { data: jp, error: pinErr } = await supabaseAdmin.from("job_pins").select("job_id,pin").eq("job_id", jobId).single();
  if (pinErr || !jp) return res.status(404).json({ error: "PIN not set for job" });
  if (jp.pin !== pin) return res.status(401).json({ error: "Invalid PIN" });

  // Start job
  const { data, error: updErr } = await supabaseAdmin.from("jobs").update({ status: "in_progress" }).eq("id", jobId).select("id,title,status").single();
  if (updErr) return res.status(500).json({ error: updErr.message });

  return res.status(200).json({ job: data });
}

----- FILE: ./pages/api/parse-quote.ts -----
// apps/web/pages/api/parse-quote.ts

import { Configuration, OpenAIApi } from 'openai';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  const { text } = req.body;

  if (!text) {
    return res.status(400).json({ error: 'Missing text' });
  }

  try {
    const prompt = `
      You are a quoting expert for Rawside/BH Installation & Transport.
      Extract product lines from the input and return ONLY valid JSON.

      Rules:
      - Include: lines with product code or SKU
      - Exclude: "tray", "cable tray", "access door"
      - Pedestals: include, time = 0.00
      - Power modules: group into one line at end
      - Description: "Line X – [Name] – [Dimensions]"
      - Use "D" for diameter (round tables)
      - Preserve original order and quantities

      Time Rules:
      - FLX 1P: 0.60
      - FLX 4P: 1.45
      - Bass Rectangular L2400 x W1200: 1.60
      - Tapered Bass: base + 0.25h + 0.2h per metre over 2m
      - Pedestal: 0.00
      - INFIL PANEL: 0.15
      - Power: 0.20 per unit

      If time not resolvable, use "TBC".

      Return ONLY JSON: { "products": [ { "productCode": "", "quantity": 0, "cleanDescription": "", "timeHoursPerUnit": 0.6 } ] }

      Input: ${text}
    `;

    const response = await openai.createChatCompletion({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0,
    });

    console.log('Raw OpenAI Response:', response.data.choices[0].message.content); // Log the raw response

    const content = response.data.choices[0].message.content;

    // Parse and validate
    const parsed = JSON.parse(content);
    if (!Array.isArray(parsed.products)) {
      throw new Error('Invalid format');
    }

    res.status(200).json(parsed);
  } catch (error) {
    console.error('OpenAI Error:', error);
    res.status(500).json({ 
      error: 'Failed to parse', 
      details: error.message 
    });
  }
}

export const config = {
  api: {
    bodyParser: true,
  },
};
----- FILE: ./pages/api/save-quote.ts -----
// apps/web/pages/api/save-quote.ts
import { supabase } from '../../lib/supabaseClient';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { products } = req.body;

  const { error } = await supabase
    .from('quotes')
    .insert({ products, created_at: new Date().toISOString() });

  if (error) {
    return res.status(500).json({ error: error.message });
  }

  res.status(200).json({ success: true });
}
----- FILE: ./pages/api/storage/signed-url.ts -----
// apps/web/pages/api/storage/signed-url.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { supabaseAdmin } from "../../../lib/supabaseAdmin";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });

  const { bucket, path, expiresIn = 60 } = req.body || {};
  if (!bucket || !path) return res.status(400).json({ error: "bucket and path are required" });

  const { data, error } = await supabaseAdmin.storage.from(bucket).createSignedUrl(path, expiresIn);
  if (error || !data?.signedUrl) return res.status(500).json({ error: error?.message || "Unable to sign URL" });

  return res.status(200).json({ url: data.signedUrl });
}

----- FILE: ./pages/api/test-ai.ts -----
import type { NextApiRequest, NextApiResponse } from 'next';

// Note: The import is removed from the top of the file

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    // We now import the library dynamically inside the function
    const { GoogleGenerativeAI } = await import('@google/genai');
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
    
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const prompt = "What is the capital of France?";
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    res.status(200).json({ response: text });
  } catch (error: any) {
    console.error("AI Test Error:", error);
    res.status(500).json({ error: error.message });
  }
}
----- FILE: ./pages/clients/index.tsx -----
import { panelStyle, theme } from "../../lib/theme";

export default function Clients() {
  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ ...panelStyle, padding: 16 }}>
        <div style={{ fontWeight: 700, marginBottom: 8 }}>Clients</div>
        <div style={{ color: theme.colors.subtext }}>
          Client management list (hook up to data when ready).
        </div>
      </div>
    </div>
  );
}

----- FILE: ./pages/close-day/[jobId].tsx -----
import { useState } from "react";
import { useRouter } from "next/router";
import { supabase } from "../../lib/supabaseClient";
import { useRequireAuth } from "../../hooks/useRequireAuth";
import { panelStyle, theme } from "../../lib/theme";
import Link from "next/link";

export default function CloseDay() {
  useRequireAuth();
  const r = useRouter();
  const jobId = typeof r.query.jobId === "string" ? r.query.jobId : undefined;

  const [crew, setCrew] = useState(0);
  const [waste, setWaste] = useState(0);
  const [buffer, setBuffer] = useState(0);
  const [notes, setNotes] = useState("");
  const [photosCount, setPhotosCount] = useState(0);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  async function submit() {
    if (!jobId) return;
    setBusy(true);
    setMsg(null);

    try {
      // 1) Insert the day report
      const { error: reportErr } = await supabase.from("day_reports").insert({
        job_id: jobId,
        crew_count: crew,
        waste_loads: waste,
        buffer_used_percent: buffer,
        photos_count: photosCount,
        notes
      });
      if (reportErr) throw reportErr;

      // 2) Fetch org settings for rates (safe fallbacks)
      const { data: org } = await supabase
        .from("org_settings")
        .select("*")
        .eq("id", 1)
        .single();

      const rates = ((org?.day_rates as any) || {}) as Record<string, number>;
      const installerRate = Number(rates.installer || 0);
      const vehicleRate = Number(rates.vehicle || 0);
      const wasteRate = Number(rates.waste_load || 0);
      const vat = typeof org?.vat_rate === "number" ? org!.vat_rate : 0;

      // 3) Build baseline cost items from the form
      const items = [
        crew > 0
          ? {
              job_id: jobId,
              kind: "labour",
              description: "Crew days",
              qty: crew,
              unit: "day",
              unit_cost: installerRate,
              unit_price: null,
              tax_rate: vat,
              meta: {}
            }
          : null,
        waste > 0
          ? {
              job_id: jobId,
              kind: "waste",
              description: "Waste loads",
              qty: waste,
              unit: "load",
              unit_cost: wasteRate,
              unit_price: null,
              tax_rate: vat,
              meta: {}
            }
          : null,
        // Optional convention: one vehicle per active crew day
        crew > 0
          ? {
              job_id: jobId,
              kind: "vehicle",
              description: "Vehicle day",
              qty: 1,
              unit: "day",
              unit_cost: vehicleRate,
              unit_price: null,
              tax_rate: vat,
              meta: {}
            }
          : null
      ].filter(Boolean) as any[];

      if (items.length) {
        const { error: costErr } = await supabase.from("job_cost_items").insert(items);
        if (costErr) throw costErr;
      }

      setMsg("Day report saved.");
      // Optionally navigate back to the job after a short delay
      r.push(`/job/${jobId}`);
    } catch (e: any) {
      setMsg(e?.message || "Failed to save day report.");
    } finally {
      setBusy(false);
    }
  }

  return (
    <div style={{ ...panelStyle, padding: 16, maxWidth: 640 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 12, marginBottom: 10 }}>
        <Link href={`/job/${jobId}`} style={{ color: theme.colors.subtext, textDecoration: "none" }}>
          ← Back
        </Link>
        <h2 style={{ margin: 0 }}>Close Day</h2>
      </div>

      <div style={{ display: "grid", gap: 12 }}>
        <NumberRow label="Crew count" value={crew} onChange={setCrew} />
        <NumberRow label="Waste loads" value={waste} onChange={setWaste} />
        <NumberRow label="Buffer used (%)" value={buffer} onChange={setBuffer} />
        <NumberRow label="Photos taken" value={photosCount} onChange={setPhotosCount} />

        <div>
          <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>Notes</div>
          <textarea
            rows={4}
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            style={{
              width: "100%",
              padding: 10,
              background: "#111823",
              border: `1px solid ${theme.colors.panelBorder}`,
              color: theme.colors.text,
              borderRadius: 8
            }}
          />
        </div>

        <div style={{ display: "flex", gap: 8 }}>
          <button
            onClick={submit}
            disabled={busy}
            style={{
              padding: "10px 14px",
              background: theme.colors.accent,
              color: "white",
              border: 0,
              borderRadius: 8,
              cursor: busy ? "not-allowed" : "pointer",
              opacity: busy ? 0.7 : 1
            }}
          >
            Save Report
          </button>
          {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
        </div>
      </div>
    </div>
  );
}

function NumberRow({
  label,
  value,
  onChange
}: {
  label: string;
  value: number;
  onChange: (n: number) => void;
}) {
  return (
    <div>
      <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>{label}</div>
      <input
        type="number"
        value={value}
        onChange={(e) => onChange(Number(e.target.value))}
        style={{
          width: "100%",
          padding: "10px 12px",
          background: "#111823",
          border: `1px solid ${theme.colors.panelBorder}`,
          color: theme.colors.text,
          borderRadius: 8
        }}
      />
    </div>
  );
}

----- FILE: ./pages/close-day/index.tsx -----

----- FILE: ./pages/dashboard.tsx -----
import StatCard from "../components/ui/StatCard";
import RingGauge from "../components/ui/RingGauge";
import ProgressBar from "../components/ui/ProgressBar";
import BarChart from "../components/charts/BarChart";
import Heatmap from "../components/charts/Heatmap";
import MapPanel from "../components/MapPanel";
import ActivityFeed from "../components/ActivityFeed";
import { useRequireAuth } from "../hooks/useRequireAuth";
import { useDashboardData } from "../hooks/useDashboardData";
import { panelStyle } from "../lib/theme";

const bigNumStyle: React.CSSProperties = { letterSpacing: 0.2, fontWeight: 800 };
function SkeletonCard() {
  return <div style={{ ...panelStyle, padding: 18, minHeight: 108, opacity: 0.5 }} />;
}

export default function Dashboard() {
  useRequireAuth();
  const { data, loading } = useDashboardData();

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fit, minmax(220px, 1fr))",
          gap: 16,
        }}
      >
        {loading ? (
          <>
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
          </>
        ) : (
          <>
            <StatCard title="JOBS IN PROGRESS" value={data!.jobsInProgress} valueStyle={bigNumStyle} />
            <StatCard title="QUOTES PENDING" value={data!.quotesPending} valueStyle={bigNumStyle} />
            <StatCard title="CREW UTILIZATION" value="" right={<RingGauge percent={Math.round(data!.crewUtilization)} />} />
            <StatCard title="VEHICLES IN USE" value={data!.vehiclesInUse} valueStyle={bigNumStyle} />
            <StatCard title="WASTE LOADS BOOKED" value={data!.wasteLoadsToday} valueStyle={bigNumStyle} />
            <StatCard title="AVG BUFFER USED" value={`${Math.round(data!.avgBufferUsed)}%`} right={<ProgressBar value={data!.avgBufferUsed} />} />
            <StatCard title="NET MARGIN" value={`€${(data!.netMargin / 1000).toFixed(1)}k`} valueStyle={bigNumStyle} />
          </>
        )}
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1.3fr 1fr", gap: 16 }}>
        {loading ? (
          <div style={{ ...panelStyle, height: 260 }} />
        ) : (
          <BarChart title="Crew vs Install Days" x={data!.installsX} series={data!.installsSeries} />
        )}
        {loading ? <div style={{ ...panelStyle, height: 300 }} /> : <MapPanel pins={data!.pins} />}
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}>
        {loading ? <div style={{ ...panelStyle, height: 220 }} /> : <ActivityFeed title="Activity Feed" rows={data!.feed} />}
        {loading ? (
          <div style={{ ...panelStyle, height: 220 }} />
        ) : (
          <Heatmap title="Pipeline Heatmap" cols={data!.heatCols} rows={data!.heatRows} data={data!.heatValues} />
        )}
      </div>
    </div>
  );
}

----- FILE: ./pages/dev/admin-create-user.ts -----
// apps/web/pages/api/dev/admin-create-user.ts
// TEMPORARY: create a user with password and set director role.
// Remove this file after you create your account.
import type { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";

const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!; // server-side only

const admin = createClient(url, serviceKey, { auth: { persistSession: false, autoRefreshToken: false } });

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method Not Allowed" });

  const { email, password } = req.body || {};
  if (!email || !password) return res.status(400).json({ error: "email and password required" });

  // 1) Create (or fetch) auth user
  const { data: existing } = await admin.auth.admin.listUsers({ page: 1, perPage: 1, email });
  let userId = existing?.users?.[0]?.id as string | undefined;

  if (!userId) {
    const { data, error } = await admin.auth.admin.createUser({ email, password, email_confirm: true });
    if (error) return res.status(400).json({ error: error.message });
    userId = data.user?.id || undefined;
  } else {
    // ensure password set
    const { error } = await admin.auth.admin.updateUserById(userId, { password });
    if (error) return res.status(400).json({ error: error.message });
  }

  if (!userId) return res.status(500).json({ error: "No user id returned" });

  // 2) Upsert users row as director
  const { error: uErr } = await admin.from("users").upsert({ id: userId, email, role: "director" }, { onConflict: "id" });
  if (uErr) return res.status(400).json({ error: uErr.message });

  return res.status(200).json({ ok: true, userId });
}

----- FILE: ./pages/dev/bootstrap.tsx -----
// apps/web/pages/dev/bootstrap.tsx
import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";

export default function Bootstrap() {
  const [msg, setMsg] = useState<string>("Working…");

  useEffect(() => {
    (async () => {
      const { data: auth } = await supabase.auth.getUser();
      if (!auth.user) { setMsg("Sign in first at /login."); return; }

      // Create your users row with email (safe/idempotent)
      const email = auth.user.email || null;
      await supabase.rpc("upsert_user_self", { p_email: email, p_role: null });

      // Promote if no director exists yet
      const { data, error } = await supabase.rpc("bootstrap_director");
      if (error) { setMsg(error.message); return; }
      setMsg(data ? "You are now director." : "A director already exists. Your role remains unchanged.");
    })();
  }, []);

  return (
    <div style={{ ...panelStyle, padding: 16, marginTop: 20 }}>
      <div style={{ fontWeight: 700, marginBottom: 6, color: theme.colors.text }}>Bootstrap Director</div>
      <div style={{ color: theme.colors.subtext }}>{msg}</div>
    </div>
  );
}

----- FILE: ./pages/dev/diag.tsx -----
/* eslint-disable react/no-unescaped-entities */
// apps/web/pages/dev/diag.tsx
import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";

type X = { label: string; value: string | number | boolean | null };

export default function Diag() {
  const [rows, setRows] = useState<X[]>([{ label: "status", value: "loading" }]);

  useEffect(() => {
    (async () => {
      const out: X[] = [];
      out.push({ label: "NEXT_PUBLIC_SUPABASE_URL set", value: !!process.env.NEXT_PUBLIC_SUPABASE_URL });
      out.push({ label: "Anon key present", value: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY });

      const { data: sessionData } = await supabase.auth.getSession();
      out.push({ label: "Has session", value: !!sessionData.session });
      out.push({ label: "User email", value: sessionData.session?.user?.email ?? null });
      out.push({ label: "User id", value: sessionData.session?.user?.id ?? null });

      // server role via RPC
      const { data: roleData, error: roleErr } = await supabase.rpc("get_my_role");
      out.push({ label: "get_my_role error", value: roleErr ? roleErr.message : false });
      out.push({ label: "Role", value: roleData ?? "n/a" });

      // can read users self?
      const { data: meRow, error: meErr } = await supabase.from("users").select("*").eq("id", sessionData.session?.user?.id || "00000000-0000-0000-0000-000000000000").maybeSingle();
      out.push({ label: "users self row error", value: meErr ? meErr.message : false });
      out.push({ label: "users self role", value: meRow?.role ?? "none" });

      // settings row
      const { data: sRow, error: sErr } = await supabase.from("org_settings").select("id,guest_enabled,guest_token_days").eq("id", 1).maybeSingle();
      out.push({ label: "org_settings read error", value: sErr ? sErr.message : false });
      out.push({ label: "guest_enabled", value: sRow?.guest_enabled ?? "n/a" });
      out.push({ label: "guest_token_days", value: sRow?.guest_token_days ?? "n/a" });

      setRows(out);
    })();
  }, []);

  return (
    <div style={{ ...panelStyle, padding: 16, marginTop: 20 }}>
      <div style={{ fontWeight: 700, marginBottom: 6, color: theme.colors.text }}>Diagnostics</div>
      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <tbody>
          {rows.map((r, i) => (
            <tr key={i} style={{ borderTop: `1px solid ${theme.colors.panelBorder}` }}>
              <td style={{ padding: "6px 8px", color: theme.colors.subtext, width: 260 }}>{r.label}</td>
              <td style={{ padding: "6px 8px" }}>
                <code style={{ color: theme.colors.text }}>{String(r.value)}</code>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <div style={{ marginTop: 10, fontSize: 12, color: theme.colors.subtext }}>
        If <strong>Has session</strong> is false, sign in at <code>/login</code>. If <strong>Role</strong> isn’t "director",
        visit <code>/dev/bootstrap</code> once while signed in.
      </div>
    </div>
  );
}

----- FILE: ./pages/index.tsx -----
import { useEffect } from "react";
import { useRouter } from "next/router";
import { supabase } from "../lib/supabaseClient";

export default function Index() {
  const router = useRouter();

  useEffect(() => {
    let mounted = true;
    supabase.auth.getSession().then(({ data }) => {
      if (!mounted) return;
      if (data?.session) router.replace("/dashboard");
      else router.replace("/login");
    });
    return () => {
      mounted = false;
    };
  }, [router]);

  return null;
}

----- FILE: ./pages/job/[id]/documents.tsx -----
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useMemo } from "react";

const tabLink = (active: boolean): React.CSSProperties => ({
  padding: "8px 12px",
  borderRadius: 8,
  border: "1px solid #1d2733",
  background: active ? "#141d29" : "#0b1118",
  color: "#e8eef6",
  textDecoration: "none",
  fontWeight: active ? 800 : 700,
});
const btn = (solid = false): React.CSSProperties => ({
  padding: "10px 14px",
  borderRadius: 10,
  border: solid ? "1px solid #196ed1" : "1px solid #1d2733",
  background: solid ? "#1d91ff" : "#0f151c",
  color: solid ? "#fff" : "#e8eef6",
  fontWeight: 800,
  textDecoration: "none",
  cursor: "pointer",
});
const tile: React.CSSProperties = {
  background: "#0f151c",
  border: "1px solid #1d2733",
  borderRadius: 14,
  padding: 16,
};

export default function JobDocumentsPage() {
  const r = useRouter();
  const jobId = (r.query.id as string) || "";
  const activePath = r.asPath;

  const tabs = useMemo(
    () => [
      { label: "Overview", href: `/job/${jobId}`, active: activePath === `/job/${jobId}` },
      { label: "Floor Plan", href: `/job/${jobId}/floorplan`, active: activePath.startsWith(`/job/${jobId}/floorplan`) },
      { label: "Documents", href: `/job/${jobId}/documents`, active: true },
      { label: "Products", href: `/job/${jobId}/products`, active: activePath.startsWith(`/job/${jobId}/products`) },
    ],
    [activePath, jobId]
  );

  async function share() {
    const url = `${window.location.origin}/job/${jobId}/documents`;
    try {
      if ((navigator as any).share) await (navigator as any).share({ title: "Job Documents", url });
      else {
        await navigator.clipboard.writeText(url);
        alert("Link copied.");
      }
    } catch {
      await navigator.clipboard.writeText(url);
      alert("Link copied.");
    }
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
        {tabs.map((t) => (
          <Link key={t.href} href={t.href} style={tabLink(t.active)}>
            {t.label}
          </Link>
        ))}
        <span style={{ marginLeft: "auto" }} />
        <Link href="/jobs" style={btn(false)}>
          Back to Jobs
        </Link>
        <button onClick={share} style={btn(false)}>
          Share
        </button>
      </div>

      <div style={tile}>
        {/* TODO: hook up your actual documents list / uploads */}
        <div style={{ opacity: 0.85 }}>Documents module — upload/list drawings, RAMS, transport sheets, etc.</div>
      </div>
    </div>
  );
}

----- FILE: ./pages/job/[id]/floorplan.tsx -----
import Link from 'next/link';
// at the top of your component's return, before the planner panel:
const activePath = r.asPath;
const tabs = [
  { label: "Overview", href: `/job/${jobId}`, active: activePath === `/job/${jobId}` },
  { label: "Floor Plan", href: `/job/${jobId}/floorplan`, active: true },
  { label: "Documents", href: `/job/${jobId}/documents`, active: false },
  { label: "Products", href: `/job/${jobId}/products`, active: false },
];

const tabLink = (active: boolean): React.CSSProperties => ({
  padding: "8px 12px",
  borderRadius: 8,
  border: "1px solid #1d2733",
  background: active ? "#141d29" : "#0b1118",
  color: "#e8eef6",
  textDecoration: "none",
  fontWeight: active ? 800 : 700,
});
const btn = (solid = false): React.CSSProperties => ({
  padding: "10px 14px",
  borderRadius: 10,
  border: solid ? "1px solid #196ed1" : "1px solid #1d2733",
  background: solid ? "#1d91ff" : "#0f151c",
  color: solid ? "#fff" : "#e8eef6",
  fontWeight: 800,
  textDecoration: "none",
  cursor: "pointer",
});

// then render:
<div style={{ display: "flex", gap: 8, flexWrap: "wrap", marginBottom: 16 }}>
  {tabs.map((t) => (
    <Link key={t.href} href={t.href} style={tabLink(t.active)}>
      {t.label}
    </Link>
  ))}
  <span style={{ marginLeft: "auto" }} />
  <Link href="/jobs" style={btn(false)}>Back to Jobs</Link>
  <button
    onClick={async () => {
      const url = `${window.location.origin}/job/${jobId}/floorplan`;
      try {
        if ((navigator as any).share) await (navigator as any).share({ title: "Job Floor Plan", url });
        else { await navigator.clipboard.writeText(url); alert("Link copied."); }
      } catch { await navigator.clipboard.writeText(url); alert("Link copied."); }
    }}
    style={btn(false)}
  >
    Share
  </button>
</div>

----- FILE: ./pages/job/[id]/index.tsx -----
/**
 * Job Detail — header + StatusPill wired to real data from Supabase.
 * Reads public.v_jobs_list for header (reference/title/client),
 * reads/writes status directly to public.jobs by id.
 */

import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { supabase } from "@/lib/supabaseClient";
import StatusPill, { JobStatus } from "@/components/ui/StatusPill";

type HeaderRow = {
  id: string;
  reference: string | null;
  title: string | null;
  client_name: string | null;
  status: JobStatus;
};

export default function JobDetailPage() {
  const router = useRouter();
  const { id } = router.query as { id?: string };

  const [row, setRow] = React.useState<HeaderRow | null>(null);
  const [loading, setLoading] = React.useState(true);
  const [err, setErr] = React.useState<string | null>(null);

  async function load() {
    if (!id) return;
    setLoading(true);
    setErr(null);
    // Header from view (gives us client + names consistently)
    const { data, error } = await supabase
      .from("v_jobs_list")
      .select("id, reference, title, client_name, status")
      .eq("id", id)
      .limit(1)
      .maybeSingle();

    if (error) {
      setErr(error.message);
      setRow(null);
    } else {
      // Fallback cast: status may be null/legacy → default to 'planned'
      const status = (data?.status ?? "planned") as JobStatus;
      setRow(data ? { ...data, status } : null);
    }
    setLoading(false);
  }

  React.useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  async function updateJobStatus(next: JobStatus) {
    if (!row) return;
    // Write to base table; RLS must permit update for current user in your setup.
    const { error } = await supabase
      .from("jobs")
      .update({ status: next })
      .eq("id", row.id);
    if (error) {
      setErr(error.message);
      return;
    }
    setRow({ ...row, status: next });
  }

  return (
    <>
      <Head>
        <title>{row ? `Job ${row.reference} • BHIT Work OS` : "Job • BHIT Work OS"}</title>
      </Head>

      <main style={{ padding: 16 }}>
        {err && (
          <div style={{ marginBottom: 12, color: "#ff6b6b" }}>
            Error: {err} <button onClick={load}>Retry</button>
          </div>
        )}

        {loading && <div>Loading…</div>}

        {!loading && row && (
          <>
            {/* Header */}
            <section
              style={{
                display: "grid",
                gridTemplateColumns: "1fr auto",
                alignItems: "center",
                gap: 12,
                maxWidth: 1200,
                margin: "0 auto",
                padding: "12px 16px",
                borderRadius: 14,
                border: "1px solid rgba(255,255,255,0.08)",
                background: "rgba(255,255,255,0.03)",
                backdropFilter: "blur(6px)",
              }}
            >
              <div>
                <div style={{ opacity: 0.75, fontSize: 12, marginBottom: 4 }}>Reference</div>
                <h1 style={{ margin: 0, fontSize: 22, lineHeight: 1.2 }}>
                  {row.reference ?? "—"} — {row.title ?? "—"}
                  <span style={{ opacity: 0.65 }}> • {row.client_name ?? "—"}</span>
                </h1>
              </div>

              <div style={{ display: "flex", gap: 10, alignItems: "center" }}>
                <StatusPill
                  value={row.status}
                  onChange={updateJobStatus}
                  title="Click to advance · Alt/Ctrl/Cmd + Click to revert"
                />
              </div>
            </section>

            {/* Tabs placeholder — keep your existing tabs below */}
            <section style={{ maxWidth: 1200, margin: "16px auto", opacity: 0.85 }}>
              Tabs go here: Tasks • Notes • Photos • Overview • Floor Plan • Documents • Products.
            </section>
          </>
        )}
      </main>
    </>
  );
}

----- FILE: ./pages/job/[id]/products.tsx -----
import Link from "next/link";
import { useRouter } from "next/router";
import { useMemo } from "react";

const tabLink = (active: boolean): React.CSSProperties => ({
  padding: "8px 12px",
  borderRadius: 8,
  border: "1px solid #1d2733",
  background: active ? "#141d29" : "#0b1118",
  color: "#e8eef6",
  textDecoration: "none",
  fontWeight: active ? 800 : 700,
});
const btn = (solid = false): React.CSSProperties => ({
  padding: "10px 14px",
  borderRadius: 10,
  border: solid ? "1px solid #196ed1" : "1px solid #1d2733",
  background: solid ? "#1d91ff" : "#0f151c",
  color: solid ? "#fff" : "#e8eef6",
  fontWeight: 800,
  textDecoration: "none",
  cursor: "pointer",
});
const tile: React.CSSProperties = {
  background: "#0f151c",
  border: "1px solid #1d2733",
  borderRadius: 14,
  padding: 16,
};

export default function JobProductsPage() {
  const r = useRouter();
  const jobId = (r.query.id as string) || "";
  const activePath = r.asPath;

  const tabs = useMemo(
    () => [
      { label: "Overview", href: `/job/${jobId}`, active: activePath === `/job/${jobId}` },
      { label: "Floor Plan", href: `/job/${jobId}/floorplan`, active: activePath.startsWith(`/job/${jobId}/floorplan`) },
      { label: "Documents", href: `/job/${jobId}/documents`, active: activePath.startsWith(`/job/${jobId}/documents`) },
      { label: "Products", href: `/job/${jobId}/products`, active: true },
    ],
    [activePath, jobId]
  );

  async function share() {
    const url = `${window.location.origin}/job/${jobId}/products`;
    try {
      if ((navigator as any).share) await (navigator as any).share({ title: "Job Products", url });
      else {
        await navigator.clipboard.writeText(url);
        alert("Link copied.");
      }
    } catch {
      await navigator.clipboard.writeText(url);
      alert("Link copied.");
    }
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
        {tabs.map((t) => (
          <Link key={t.href} href={t.href} style={tabLink(t.active)}>
            {t.label}
          </Link>
        ))}
        <span style={{ marginLeft: "auto" }} />
        <Link href="/jobs" style={btn(false)}>
          Back to Jobs
        </Link>
        <button onClick={share} style={btn(false)}>
          Share
        </button>
      </div>

      <div style={tile}>
        {/* TODO: connect Smart Quote output / product lines */}
        <div style={{ opacity: 0.85 }}>Products module — show parsed items / quantities here.</div>
      </div>
    </div>
  );
}

----- FILE: ./pages/job/new.tsx -----
// apps/web/pages/job/new.tsx
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";
import { useRequireAuth } from "../../hooks/useRequireAuth";
import { useUserRole } from "../../hooks/useUserRole";

type NewJob = {
  title: string;
  client_name: string;
  reference: string;
  status: "planned" | "in_progress" | "completed" | "snagging";
  location_x?: number | null;
  location_y?: number | null;
};

export default function NewJobPage() {
  useRequireAuth();
  const { role } = useUserRole();
  const canManage = role === "director" || role === "ops";

  const router = useRouter();
  const [f, setF] = useState<NewJob>({
    title: "",
    client_name: "",
    reference: "",
    status: "planned",
    location_x: null,
    location_y: null
  });
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    if (!canManage) setMsg("You do not have permission to create jobs.");
  }, [canManage]);

  async function getAccountIdForUser(userId: string): Promise<string | null> {
    const { data, error } = await supabase
      .from("users")
      .select("account_id")
      .eq("id", userId)
      .limit(1)
      .single();
    if (error) {
      console.error("Failed to fetch account_id:", error);
      return null;
    }
    return (data as any)?.account_id ?? null;
  }

  async function submit() {
    setMsg(null);
    if (!canManage) {
      setMsg("You do not have permission to create jobs.");
      return;
    }
    if (!f.title.trim()) {
      setMsg("Title is required.");
      return;
    }

    setBusy(true);

    // Resolve current user
    const { data: userData, error: userErr } = await supabase.auth.getUser();
    if (userErr || !userData?.user) {
      setBusy(false);
      setMsg("Could not resolve the current user session.");
      return;
    }
    const userId = userData.user.id;

    // Resolve account_id from public.users (RLS predicates rely on this)
    const accountId = await getAccountIdForUser(userId);
    if (!accountId) {
      setBusy(false);
      setMsg("Your account could not be determined. Please ensure your user has an account_id.");
      return;
    }

    const payload: any = {
      title: f.title.trim(),
      client_name: f.client_name.trim() || null,
      reference: f.reference.trim() || null,
      status: f.status,
      location_x: f.location_x ?? null,
      location_y: f.location_y ?? null,
      created_by: userId,
      account_id: accountId
    };

    const { data, error } = await supabase
      .from("jobs")
      .insert(payload)
      .select("id")
      .single();

    setBusy(false);

    if (error) {
      console.error("Insert jobs error:", error);
      setMsg(error.message || "Insert failed due to security policy or missing fields.");
      return;
    }

    const id = (data as any)?.id as string | undefined;
    if (id) router.replace(`/job/${id}`);
    else setMsg("Created, but could not resolve new Job ID.");
  }

  function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
    return {
      padding: "10px 12px",
      background: "#111823",
      border: `1px solid ${theme.colors.panelBorder}`,
      color: theme.colors.text,
      borderRadius: 8,
      ...(extra || {})
    };
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ fontWeight: 800, fontSize: 24, letterSpacing: 0.2 }}>New Job</div>

      <div style={{ ...panelStyle, padding: 16, opacity: canManage ? 1 : 0.6 }}>
        <div style={{ display: "grid", gap: 12, maxWidth: 720 }}>
          <Field label="Title">
            <input
              value={f.title}
              onChange={(e) => setF({ ...f, title: e.target.value })}
              placeholder="Project / Site name"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Client">
            <input
              value={f.client_name}
              onChange={(e) => setF({ ...f, client_name: e.target.value })}
              placeholder="Client name"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Reference">
            <input
              value={f.reference}
              onChange={(e) => setF({ ...f, reference: e.target.value })}
              placeholder="Internal ref (optional)"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Status">
            <select
              value={f.status}
              onChange={(e) => setF({ ...f, status: e.target.value as NewJob["status"] })}
              style={inputStyle()}
              disabled={!canManage || busy}
            >
              <option value="planned">Planned</option>
              <option value="in_progress">In Progress</option>
              <option value="snagging">Snagging</option>
              <option value="completed">Completed</option>
            </select>
          </Field>

          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
            <Field label="Map X (0–100)">
              <input
                type="number"
                min={0}
                max={100}
                value={f.location_x ?? ""}
                onChange={(e) =>
                  setF({ ...f, location_x: e.target.value === "" ? null : Math.max(0, Math.min(100, Number(e.target.value))) })
                }
                placeholder="Optional"
                style={inputStyle({ textAlign: "right" })}
                disabled={!canManage || busy}
              />
            </Field>
            <Field label="Map Y (0–100)">
              <input
                type="number"
                min={0}
                max={100}
                value={f.location_y ?? ""}
                onChange={(e) =>
                  setF({ ...f, location_y: e.target.value === "" ? null : Math.max(0, Math.min(100, Number(e.target.value))) })
                }
                placeholder="Optional"
                style={inputStyle({ textAlign: "right" })}
                disabled={!canManage || busy}
              />
            </Field>
          </div>

          <div style={{ display: "flex", gap: 8 }}>
            <button
              onClick={submit}
              disabled={!canManage || busy}
              style={{
                padding: "10px 14px",
                background: theme.colors.accent,
                color: "white",
                border: 0,
                borderRadius: 8,
                cursor: !canManage || busy ? "not-allowed" : "pointer",
                opacity: !canManage || busy ? 0.7 : 1
              }}
            >
              Create Job
            </button>
            <button
              onClick={() => router.back()}
              style={{
                padding: "10px 14px",
                borderRadius: 8,
                border: `1px solid ${theme.colors.panelBorder}`,
                background: "#0f151c",
                color: theme.colors.text
              }}
            >
              Cancel
            </button>
            {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
          </div>
        </div>
      </div>
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "200px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}

----- FILE: ./pages/jobs/index.tsx -----
/**
 * Jobs List — wired to the SQL view `v_jobs_list`.
 *
 * Assumptions:
 * - The database has a view: public.v_jobs_list
 *     (id, reference, title, client_name, status, lead_installer_name, created_at)
 * - `apps/web/lib/supabaseClient.ts` exports a browser Supabase client named `supabase`.
 * - `apps/web/components/ui/StatusPill.tsx` exists (neon/glass style).
 *
 * This page:
 * - Fetches from `v_jobs_list`
 * - Shows a search box (client-side filter on reference/title/client_name)
 * - Displays graceful errors (including schema cache/view missing)
 * - Provides a "Reload" button
 */

import * as React from "react";
import Link from "next/link";
import { supabase } from "../../lib/supabaseClient";
import StatusPill, { JobStatus } from "../../components/ui/StatusPill";
import { theme } from "../../lib/theme";

type VJob = {
  id: string;
  reference: string;
  title: string;
  client_name: string | null;
  status: JobStatus;
  lead_installer_name: string | null;
  created_at: string | null;
};

export default function JobsIndexPage() {
  const [rows, setRows] = React.useState<VJob[]>([]);
  const [loading, setLoading] = React.useState<boolean>(false);
  const [error, setError] = React.useState<string | null>(null);
  const [q, setQ] = React.useState<string>("");

  const load = React.useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from("v_jobs_list")
        .select(
          "id, reference, title, client_name, status, lead_installer_name, created_at"
        )
        .order("created_at", { ascending: false });

      if (error) throw error;
      setRows(data ?? []);
    } catch (e: any) {
      // normalize the most common PostgREST schema-cache error into a helpful message
      const msg =
        typeof e?.message === "string"
          ? e.message
          : "Failed to load jobs (check that view `public.v_jobs_list` exists and PostgREST schema cache reloaded).";
      setError(msg);
    } finally {
      setLoading(false);
    }
  }, []);

  React.useEffect(() => {
    load();
  }, [load]);

  const filtered = React.useMemo(() => {
    const needle = q.trim().toLowerCase();
    if (!needle) return rows;
    return rows.filter((r) => {
      return (
        r.reference?.toLowerCase().includes(needle) ||
        r.title?.toLowerCase().includes(needle) ||
        (r.client_name ?? "").toLowerCase().includes(needle)
      );
    });
  }, [rows, q]);

  return (
    <main
      style={{
        minHeight: "100vh",
        background: theme.colors.page,
        color: theme.colors.text,
        padding: 16,
      }}
    >
      <header
        style={{
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          gap: 12,
          maxWidth: 1200,
          margin: "0 auto 12px",
        }}
      >
        <h1 style={{ margin: 0, fontSize: 22 }}>Jobs</h1>
        <div style={{ display: "flex", gap: 8 }}>
          <button
            onClick={load}
            style={pillButtonStyle}
            disabled={loading}
            title="Reload"
          >
            {loading ? "Loading…" : "Reload"}
          </button>
          <Link href="/jobs/new" legacyBehavior>
            <a style={primaryButtonStyle}>+ New Job</a>
          </Link>
        </div>
      </header>

      <section style={{ maxWidth: 1200, margin: "0 auto" }}>
        <input
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Search reference, title, client…"
          style={searchStyle}
        />

        <div style={tableWrapStyle}>
          <div style={tableHeaderStyle}>
            <div style={{ flex: 2 }}>Reference / Title</div>
            <div style={{ flex: 1 }}>Client</div>
            <div style={{ width: 180 }}>Status</div>
            <div style={{ flex: 1 }}>Lead installer</div>
            <div style={{ width: 140, textAlign: "right" }}>Actions</div>
          </div>

          {error ? (
            <div style={errorRowStyle}>
              <span>
                <strong>Error:</strong> {error}
              </span>
              <button onClick={load} style={pillButtonStyle}>
                Retry
              </button>
            </div>
          ) : loading ? (
            <div style={emptyRowStyle}>Loading…</div>
          ) : filtered.length === 0 ? (
            <div style={emptyRowStyle}>No jobs found.</div>
          ) : (
            filtered.map((r) => (
              <div key={r.id} style={tableRowStyle}>
                <div style={{ flex: 2, display: "flex", flexDirection: "column" }}>
                  <Link href={`/job/${r.id}`} legacyBehavior>
                    <a style={linkStyle}>
                      <strong>{r.reference}</strong> — {r.title}
                    </a>
                  </Link>
                  <span style={{ opacity: 0.6, fontSize: 12 }}>
                    Created {toLocalDate(r.created_at)}
                  </span>
                </div>

                <div style={{ flex: 1 }}>{r.client_name ?? "—"}</div>

                <div style={{ width: 180 }}>
                  {/* Status is view-only here (single control lives on job detail) */}
                  <StatusPill value={r.status} size="sm" title={r.status} />
                </div>

                <div style={{ flex: 1 }}>{r.lead_installer_name ?? "—"}</div>

                <div style={{ width: 140, textAlign: "right" }}>
                  <Link href={`/job/${r.id}`} legacyBehavior>
                    <a style={pillButtonStyle}>Open</a>
                  </Link>
                </div>
              </div>
            ))
          )}
        </div>
      </section>
    </main>
  );
}

/* -------------------------------- Styles --------------------------------- */

const searchStyle: React.CSSProperties = {
  width: "100%",
  padding: "12px 14px",
  margin: "8px 0 12px",
  borderRadius: 10,
  border: `1px solid ${theme.colors.panelBorder}`,
  background: "rgba(255,255,255,0.03)",
  color: theme.colors.text,
  outline: "none",
};

const tableWrapStyle: React.CSSProperties = {
  border: `1px solid ${theme.colors.panelBorder}`,
  borderRadius: 12,
  overflow: "hidden",
  background: "rgba(255,255,255,0.02)",
};

const tableHeaderStyle: React.CSSProperties = {
  display: "flex",
  gap: 12,
  padding: "12px 14px",
  background: "rgba(255,255,255,0.04)",
  borderBottom: `1px solid ${theme.colors.panelBorder}`,
  fontSize: 12,
  letterSpacing: 0.3,
  textTransform: "uppercase",
  opacity: 0.8,
};

const tableRowStyle: React.CSSProperties = {
  display: "flex",
  gap: 12,
  padding: "14px 14px",
  borderTop: `1px solid ${theme.colors.panelBorder}`,
  alignItems: "center",
};

const emptyRowStyle: React.CSSProperties = {
  padding: 20,
  textAlign: "center",
  opacity: 0.8,
};

const errorRowStyle: React.CSSProperties = {
  padding: 16,
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between",
  gap: 12,
  color: "#ff6b6b",
};

const linkStyle: React.CSSProperties = {
  color: theme.colors.text,
  textDecoration: "none",
  transition: "opacity .15s ease",
} as const;

const pillButtonStyle: React.CSSProperties = {
  display: "inline-flex",
  alignItems: "center",
  gap: 8,
  padding: "8px 12px",
  borderRadius: 999,
  border: `1px solid ${theme.colors.panelBorder}`,
  background: "rgba(255,255,255,0.06)",
  color: theme.colors.text,
  cursor: "pointer",
  textDecoration: "none",
};

const primaryButtonStyle: React.CSSProperties = {
  ...pillButtonStyle,
  background: "rgba(0, 132, 255, 0.18)",
  border: "1px solid rgba(0,132,255,0.35)",
} as const;

/* -------------------------------- Utils ---------------------------------- */

function toLocalDate(iso: string | null): string {
  if (!iso) return "—";
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return "—";
  return d.toLocaleString();
}

----- FILE: ./pages/jobs/new.tsx -----
import { useEffect, useState } from "react";
import { useRouter } from "next/router";

import { supabase } from "@/lib/supabaseClient";
import { panelStyle, theme } from "@/lib/theme";
import { useRequireAuth } from "@/hooks/useRequireAuth";
import { useUserRole } from "@/hooks/useUserRole";

type NewJob = {
  title: string;
  client_name: string;
  reference: string;
  status: "planned" | "in_progress" | "completed" | "snagging";
  location_x?: number | null;
  location_y?: number | null;
};

export default function NewJobPage() {
  useRequireAuth();
  const { role } = useUserRole();
  const canManage = role === "director" || role === "ops";

  const router = useRouter();
  const [f, setF] = useState<NewJob>({
    title: "",
    client_name: "",
    reference: "",
    status: "planned",
    location_x: null,
    location_y: null,
  });
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    if (!canManage) setMsg("You do not have permission to create jobs.");
  }, [canManage]);

  async function submit() {
    setMsg(null);
    if (!canManage) {
      setMsg("You do not have permission to create jobs.");
      return;
    }
    if (!f.title.trim()) {
      setMsg("Title is required.");
      return;
    }

    setBusy(true);

    const payload: any = {
      title: f.title.trim(),
      client_name: f.client_name.trim() || null,
      reference: f.reference.trim() || null,
      status: f.status,
      location_x: f.location_x ?? null,
      location_y: f.location_y ?? null,
      // created_by/account_id auto-filled by DB trigger
    };

    const { data, error } = await supabase
      .from("jobs")
      .insert(payload)
      .select("id")
      .single();

    setBusy(false);

    if (error) {
      console.error("Insert jobs error:", error);
      setMsg(error.message || "Insert failed.");
      return;
    }
    const id = (data as any)?.id as string | undefined;
    if (id) router.replace(`/job/${id}`);
    else setMsg("Created, but could not resolve new Job ID.");
  }

  function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
    return {
      padding: "10px 12px",
      background: "#111823",
      border: `1px solid ${theme.colors.panelBorder}`,
      color: theme.colors.text,
      borderRadius: 8,
      ...(extra || {}),
    };
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ fontWeight: 800, fontSize: 24, letterSpacing: 0.2 }}>New Job</div>

      <div style={{ ...panelStyle, padding: 16, opacity: canManage ? 1 : 0.6 }}>
        <div style={{ display: "grid", gap: 12, maxWidth: 720 }}>
          <Field label="Title">
            <input
              value={f.title}
              onChange={(e) => setF({ ...f, title: e.target.value })}
              placeholder="Project / Site name"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Client">
            <input
              value={f.client_name}
              onChange={(e) => setF({ ...f, client_name: e.target.value })}
              placeholder="Client name"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Reference">
            <input
              value={f.reference}
              onChange={(e) => setF({ ...f, reference: e.target.value })}
              placeholder="Internal ref (optional)"
              style={inputStyle()}
              disabled={!canManage || busy}
            />
          </Field>
          <Field label="Status">
            <select
              value={f.status}
              onChange={(e) => setF({ ...f, status: e.target.value as NewJob["status"] })}
              style={inputStyle()}
              disabled={!canManage || busy}
            >
              <option value="planned">Planned</option>
              <option value="in_progress">In Progress</option>
              <option value="snagging">Snagging</option>
              <option value="completed">Completed</option>
            </select>
          </Field>

          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
            <Field label="Map X (0–100)">
              <input
                type="number"
                min={0}
                max={100}
                value={f.location_x ?? ""}
                onChange={(e) =>
                  setF({
                    ...f,
                    location_x:
                      e.target.value === "" ? null : Math.max(0, Math.min(100, Number(e.target.value))),
                  })
                }
                placeholder="Optional"
                style={inputStyle({ textAlign: "right" })}
                disabled={!canManage || busy}
              />
            </Field>
            <Field label="Map Y (0–100)">
              <input
                type="number"
                min={0}
                max={100}
                value={f.location_y ?? ""}
                onChange={(e) =>
                  setF({
                    ...f,
                    location_y:
                      e.target.value === "" ? null : Math.max(0, Math.min(100, Number(e.target.value))),
                  })
                }
                placeholder="Optional"
                style={inputStyle({ textAlign: "right" })}
                disabled={!canManage || busy}
              />
            </Field>
          </div>

          <div style={{ display: "flex", gap: 8 }}>
            <button
              onClick={submit}
              disabled={!canManage || busy}
              style={{
                padding: "10px 14px",
                background: theme.colors.accent,
                color: "white",
                border: 0,
                borderRadius: 8,
                cursor: !canManage || busy ? "not-allowed" : "pointer",
                opacity: !canManage || busy ? 0.7 : 1,
              }}
            >
              Create Job
            </button>
            <button
              onClick={() => router.back()}
              style={{
                padding: "10px 14px",
                borderRadius: 8,
                border: `1px solid ${theme.colors.panelBorder}`,
                background: "#0f151c",
                color: theme.colors.text,
              }}
            >
              Cancel
            </button>
            {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
          </div>
        </div>
      </div>
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "200px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}

----- FILE: ./pages/login.tsx -----
/**
 * Clean login for BHIT Work OS.
 * - Redirects to /dashboard on success
 * - Shows "signed in" state with buttons
 */
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { supabase } from "../lib/supabaseClient";

export default function LoginPage() {
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [signedIn, setSignedIn] = useState(false);

  useEffect(() => {
    let alive = true;
    supabase.auth.getSession().then(({ data }) => {
      if (!alive) return;
      if (data.session) setSignedIn(true);
    });
    const { data: sub } = supabase.auth.onAuthStateChange((_e, session) => {
      if (!alive) return;
      setSignedIn(!!session);
    });
    return () => {
      alive = false;
      sub?.subscription?.unsubscribe();
    };
  }, []);

  async function handleSignIn(e: React.FormEvent) {
    e.preventDefault();
    setBusy(true);
    setError(null);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    setBusy(false);
    if (error) { setError(error.message); return; }
    router.replace("/dashboard");
  }

  async function handleSignOut() {
    await supabase.auth.signOut();
    setSignedIn(false);
  }

  return (
    <div style={{ minHeight: "100vh", background: "#0e141b", color: "#e8eef6" }}>
      <div style={{ maxWidth: 360, margin: "80px auto", padding: 24, border: "1px solid #1d2733", borderRadius: 12, background: "#121a23" }}>
        <h1 style={{ marginTop: 0, marginBottom: 12 }}>Sign In</h1>

        {signedIn ? (
          <>
            <p>You are signed in.</p>
            <div style={{ display: "flex", gap: 8 }}>
              <button onClick={() => router.push("/dashboard")}
                style={{ padding: "8px 12px", borderRadius: 8, border: "1px solid #1d2733", background: "#0b1117", color: "#e8eef6", cursor: "pointer" }}>
                Go to Dashboard
              </button>
              <button onClick={handleSignOut}
                style={{ padding: "8px 12px", borderRadius: 8, border: "1px solid #1d2733", background: "#0b1117", color: "#9fb2c8", cursor: "pointer" }}>
                Sign out
              </button>
            </div>
          </>
        ) : (
          <form onSubmit={handleSignIn} style={{ display: "grid", gap: 12 }}>
            <label style={{ display: "grid", gap: 6 }}>
              <span>Email</span>
              <input type="email" autoComplete="email" value={email} onChange={(e) => setEmail(e.target.value)} required
                     style={{ padding: "10px 12px", borderRadius: 8, border: "1px solid #1d2733", background: "#0b1117", color: "#e8eef6" }} />
            </label>
            <label style={{ display: "grid", gap: 6 }}>
              <span>Password</span>
              <input type="password" autoComplete="current-password" value={password} onChange={(e) => setPassword(e.target.value)} required
                     style={{ padding: "10px 12px", borderRadius: 8, border: "1px solid #1d2733", background: "#0b1117", color: "#e8eef6" }} />
            </label>
            {error && <div style={{ color: "#ef4444", fontSize: 14 }}>{error}</div>}
            <button type="submit" disabled={busy}
                    style={{ padding: "10px 12px", borderRadius: 8, border: "1px solid #1d2733",
                             background: busy ? "#223041" : "#3b82f6", color: "#fff", cursor: busy ? "not-allowed" : "pointer", fontWeight: 600 }}>
              {busy ? "Signing in…" : "Sign In"}
            </button>
          </form>
        )}
      </div>
    </div>
  );
}

----- FILE: ./pages/settings/index.tsx -----
import { Fragment, useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { useRequireAuth } from "../../hooks/useRequireAuth";
import { useUserRole } from "../../hooks/useUserRole";
import { panelStyle, theme } from "../../lib/theme";

type OrgSettings = {
  id: number;
  company_name: string | null;
  brand_color: string | null;
  day_rates: Record<string, number> | null;
  guest_enabled: boolean;
  guest_can_view_docs: boolean;
  cost_visibility: "director" | "ops+director";
};

export default function SettingsPage() {
  useRequireAuth();
  const { role } = useUserRole();
  const isDirector = role === "director";
  const [s, setS] = useState<OrgSettings | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      const { data, error } = await supabase.from("org_settings").select("*").eq("id", 1).single();
      if (error) {
        // Create a local default; first save will persist it.
        const fallback: OrgSettings = {
          id: 1,
          company_name: null,
          brand_color: "#f59e0b",
          day_rates: {},
          guest_enabled: true,
          guest_can_view_docs: true,
          cost_visibility: "director"
        };
        setS(fallback);
      } else {
        const d = (data || {}) as any;
        const merged: OrgSettings = {
          id: 1,
          company_name: d.company_name ?? null,
          brand_color: d.brand_color ?? "#f59e0b",
          day_rates: d.day_rates ?? {},
          guest_enabled: d.guest_enabled ?? true,
          guest_can_view_docs: d.guest_can_view_docs ?? true,
          cost_visibility: (d.cost_visibility ?? "director") as OrgSettings["cost_visibility"]
        };
        setS(merged);
      }
    })();
  }, []);

  async function save() {
    if (!s) return;
    setBusy(true);
    setMsg(null);
    const payload = {
      id: 1,
      company_name: s.company_name,
      brand_color: s.brand_color || "#f59e0b",
      day_rates: s.day_rates || {},
      guest_enabled: !!s.guest_enabled,
      guest_can_view_docs: !!s.guest_can_view_docs,
      cost_visibility: s.cost_visibility
    };
    const { error } = await supabase.from("org_settings").upsert(payload, { onConflict: "id" });
    setBusy(false);
    setMsg(error ? error.message : "Saved");
  }

  function setRate(key: string, value: number) {
    setS((prev) => {
      const next = { ...(prev as OrgSettings) };
      next.day_rates = { ...(next.day_rates || {}), [key]: value };
      return next;
    });
  }

  if (!s) return <div style={{ ...panelStyle, padding: 16 }}>Loading…</div>;

  return (
    <div style={{ display: "grid", gap: 16, maxWidth: 960 }}>
      <div style={{ fontWeight: 800, fontSize: 24, letterSpacing: 0.2 }}>Settings</div>

      {/* Organisation */}
      <Card title="Organisation">
        <Field label="Company name">
          <input
            value={s.company_name ?? ""}
            onChange={(e) => setS({ ...s, company_name: e.target.value })}
            style={inputStyle()}
          />
        </Field>
        <Field label="Brand color">
          <input
            type="color"
            value={s.brand_color || "#f59e0b"}
            onChange={(e) => setS({ ...s, brand_color: e.target.value })}
            style={{ width: 60, height: 36, background: "transparent", border: "none" }}
          />
        </Field>
      </Card>

      {/* Access & Roles */}
      <Card title="Access & Roles" note={!isDirector ? "Read-only (Director only)" : undefined}>
        <Field label="Guest links enabled">
          <Toggle
            checked={!!s.guest_enabled}
            onChange={(v) => isDirector && setS({ ...s, guest_enabled: v })}
            disabled={!isDirector}
          />
        </Field>
        <Field label="Guests can open documents">
          <Toggle
            checked={!!s.guest_can_view_docs}
            onChange={(v) => isDirector && setS({ ...s, guest_can_view_docs: v })}
            disabled={!isDirector}
          />
        </Field>
        <Field label="Costs visible to">
          <select
            value={s.cost_visibility}
            onChange={(e) => isDirector && setS({ ...s, cost_visibility: e.target.value as OrgSettings["cost_visibility"] })}
            style={inputStyle()}
            disabled={!isDirector}
          >
            <option value="director">Director only</option>
            <option value="ops+director">Ops + Director</option>
          </select>
        </Field>
      </Card>

      {/* Day Rates */}
      <Card title="Day Rates">
        <div style={{ display: "grid", gridTemplateColumns: "1fr 160px", gap: 8, alignItems: "center" }}>
          {[
            ["installer", "Installer (£/day)"],
            ["supervisor", "Supervisor (£/day)"],
            ["vehicle", "Vehicle (£/day)"],
            ["waste_load", "Waste load (£/load)"]
          ].map(([k, label]) => (
            <Fragment key={k}>
              <div style={{ color: theme.colors.subtext }}>{label}</div>
              <input
                type="number"
                value={Number((s.day_rates || {})[k]) || 0}
                onChange={(e) => setRate(k, Number(e.target.value))}
                style={inputStyle({ textAlign: "right" })}
              />
            </Fragment>
          ))}
        </div>
      </Card>

      <div style={{ display: "flex", gap: 8 }}>
        <button
          onClick={save}
          disabled={busy || !isDirector}
          style={{
            padding: "10px 14px",
            background: theme.colors.accent,
            color: "white",
            border: 0,
            borderRadius: 8,
            cursor: busy || !isDirector ? "not-allowed" : "pointer",
            opacity: busy || !isDirector ? 0.7 : 1
          }}
        >
          Save
        </button>
        {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
      </div>
    </div>
  );
}

function Card({ title, children, note }: { title: string; children: React.ReactNode; note?: string }) {
  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ display: "flex", alignItems: "center", marginBottom: 8 }}>
        <div style={{ fontWeight: 600 }}>{title}</div>
        {note && <div style={{ marginLeft: 8, fontSize: 12, color: theme.colors.subtext }}>({note})</div>}
      </div>
      <div style={{ display: "grid", gap: 8 }}>{children}</div>
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "220px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}

function Toggle({ checked, onChange, disabled }: { checked: boolean; onChange: (v: boolean) => void; disabled?: boolean }) {
  return (
    <button
      type="button"
      onClick={() => !disabled && onChange(!checked)}
      disabled={disabled}
      style={{
        width: 54,
        height: 28,
        borderRadius: 999,
        border: `1px solid ${theme.colors.panelBorder}`,
        background: checked ? theme.colors.accent : "#111823",
        position: "relative",
        cursor: disabled ? "not-allowed" : "pointer",
        opacity: disabled ? 0.6 : 1
      }}
    >
      <span
        style={{
          position: "absolute",
          top: 2,
          left: checked ? 28 : 2,
          width: 24,
          height: 24,
          borderRadius: 999,
          background: "#fff"
        }}
      />
    </button>
  );
}

function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    ...(extra || {})
  };
}

----- FILE: ./pages/settings/organization.tsx -----
// apps/web/pages/settings/organization.tsx
import { useEffect, useState, Fragment } from "react";
import Layout from "../../components/Layout";
import { panelStyle, theme } from "../../lib/theme";
import { supabase } from "../../lib/supabaseClient";
import { useRequireAuth } from "../../hooks/useRequireAuth";

type OrgSettings = {
  id: number;
  company_name: string | null;
  brand_color: string | null;
  day_rates: Record<string, number> | null;
};

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "220px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}

function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    ...(extra || {}),
  };
}

export default function OrganizationSettings() {
  useRequireAuth();

  const [s, setS] = useState<OrgSettings | null>(null);
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      const { data, error } = await supabase.from("org_settings").select("*").eq("id", 1).maybeSingle();
      if (error) {
        setMsg(error.message);
      }
      const initial: OrgSettings = data || {
        id: 1,
        company_name: null,
        brand_color: "#f59e0b",
        day_rates: {},
      };
      setS(initial);
    })();
  }, []);

  async function save() {
    if (!s) return;
    setBusy(true);
    setMsg(null);
    const payload = {
      id: 1,
      company_name: s.company_name,
      brand_color: s.brand_color || "#f59e0b",
      day_rates: s.day_rates || {},
    };
    const { error } = await supabase.from("org_settings").upsert(payload, { onConflict: "id" });
    setBusy(false);
    setMsg(error ? error.message : "Saved");
  }

  function setRate(key: string, value: number) {
    setS((prev) => {
      const next = { ...(prev || { id: 1, day_rates: {} }) };
      next.day_rates = { ...(next.day_rates || {}), [key]: value };
      return next as OrgSettings;
    });
  }

  if (!s) {
    return (
      <Layout>
        <div style={{ ...panelStyle, padding: 16 }}>Loading…</div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div style={{ display: "grid", gap: 16, maxWidth: 820 }}>
        <div style={{ fontSize: 22, fontWeight: 800, letterSpacing: 0.2 }}>Organization</div>

        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ fontWeight: 600, marginBottom: 8 }}>Basics</div>
          <div style={{ display: "grid", gap: 12 }}>
            <Field label="Company name">
              <input
                value={s.company_name ?? ""}
                onChange={(e) => setS({ ...s, company_name: e.target.value })}
                style={inputStyle()}
              />
            </Field>
            <Field label="Brand color">
              <input
                type="color"
                value={(s.brand_color as string) || "#f59e0b"}
                onChange={(e) => setS({ ...s, brand_color: e.target.value })}
                style={{ width: 60, height: 36, background: "transparent", border: "none" }}
              />
            </Field>
          </div>
        </div>

        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ fontWeight: 600, marginBottom: 8 }}>Day rates</div>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 160px", gap: 8, alignItems: "center" }}>
            {[
              ["installer", "Installer (£/day)"],
              ["supervisor", "Supervisor (£/day)"],
              ["vehicle", "Vehicle (£/day)"],
              ["waste_load", "Waste load (£/load)"],
            ].map(([k, label]) => (
              <Fragment key={k}>
                <div style={{ color: theme.colors.subtext }}>{label}</div>
                <input
                  type="number"
                  value={Number((s.day_rates || {})[k]) || 0}
                  onChange={(e) => setRate(k, Number(e.target.value))}
                  style={inputStyle({ textAlign: "right" })}
                />
              </Fragment>
            ))}
          </div>
        </div>

        <div style={{ display: "flex", gap: 8 }}>
          <button
            onClick={save}
            disabled={busy}
            style={{
              padding: "10px 14px",
              background: theme.colors.accent,
              color: "white",
              border: 0,
              borderRadius: 8,
              cursor: busy ? "not-allowed" : "pointer",
              opacity: busy ? 0.7 : 1,
            }}
          >
            Save
          </button>
          {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
        </div>
      </div>
    </Layout>
  );
}

----- FILE: ./pages/smart-quote.tsx -----
// apps/web/pages/smart-quote.tsx

import { useState, DragEvent } from 'react';

type ParsedProduct = {
  productCode: string;
  quantity: number;
  cleanDescription: string;
};

const ActionCard = ({ title, description, onClick }: { title: string; description: string; onClick: () => void; }) => (
  <button
    onClick={onClick}
    style={{
      background: '#0e141b',
      border: '1px solid #1d2733',
      borderRadius: '12px',
      padding: '32px',
      textAlign: 'center',
      cursor: 'pointer',
      width: '100%',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      gap: '8px',
      color: '#e8eef6',
    }}
  >
    <h3 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0 }}>{title}</h3>
    <p style={{ margin: '8px 0 0', color: '#9fb2c8' }}>{description}</p>
    <div style={{ marginTop: 'auto', color: '#3b82f6', fontWeight: 'bold' }}>Proceed &rarr;</div>
  </button>
);

const HomePage = ({ onSelectView }: { onSelectView: (view: string) => void; }) => (
  <div style={{ textAlign: 'center', padding: '16px' }}>
    <h1 style={{ fontSize: '36px', fontWeight: 'bold' }}>Welcome to SmartQuote</h1>
    <p style={{ fontSize: '18px', color: '#9fb2c8', marginBottom: '32px' }}>
      Your intelligent quoting assistant. Choose an option below to get started.
    </p>
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
      gap: '24px',
      maxWidth: '1200px',
      margin: '0 auto'
    }}>
      <ActionCard
        title="Parse Documents"
        description="AI-powered extraction from text or files."
        onClick={() => onSelectView('parsing')}
      />
      <ActionCard
        title="Manual Entry"
        description="Build a quote by selecting products."
        onClick={() => onSelectView('manual')}
      />
      <ActionCard
        title="Quote History"
        description="View your previously saved quotes."
        onClick={() => onSelectView('history')}
      />
      <ActionCard
        title="Admin Panel"
        description="Customize application settings."
        onClick={() => onSelectView('admin')}
      />
    </div>
  </div>
);

const InitialInput = ({
  onParse,
  isLoading
}: {
  onParse: (formData: FormData) => void;
  isLoading: boolean;
}) => {
  const [text, setText] = useState('');
  const [files, setFiles] = useState<File[]>([]);
  const [isDragging, setIsDragging] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setFiles(prev => [...prev, ...Array.from(event.target.files!)]);
    }
  };

  const handleDragOver = (event: DragEvent<HTMLElement>) => {
    event.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (event: DragEvent<HTMLElement>) => {
    event.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (event: DragEvent<HTMLElement>) => {
    event.preventDefault();
    setIsDragging(false);
    if (event.dataTransfer.files) {
      setFiles(prev => [...prev, ...Array.from(event.dataTransfer.files)]);
    }
  };

  const removeFile = (fileName: string) => {
    setFiles(prev => prev.filter(file => file.name !== fileName));
  };

  const handleSubmit = () => {
    if (!text.trim() && files.length === 0) return;

    const formData = new FormData();
    if (text.trim()) {
      formData.append('textContent', text.trim());
    }
    files.forEach(file => {
      formData.append('files', file);
    });

    onParse(formData);
  };

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto' }}>
      <h2 style={{ fontSize: '24px', fontWeight: 'bold' }}>Parse Document</h2>
      <p style={{ color: '#9fb2c8', marginBottom: '16px' }}>
        Paste text and/or upload files to extract product details.
      </p>

      <label
        htmlFor="file-upload"
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        style={{
          display: 'block',
          border: `2px dashed ${isDragging ? '#3b82f6' : '#2a3a4a'}`,
          borderRadius: '8px',
          padding: '24px',
          textAlign: 'center',
          marginBottom: '16px',
          cursor: 'pointer',
        }}
      >
        Drag & drop files here, or click to select
      </label>
      <input
        id="file-upload"
        type="file"
        multiple
        accept=".pdf,.jpg,.jpeg,.png,.xlsx,.csv"
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />

      {files.length > 0 && (
        <div style={{ marginBottom: '16px', display: 'flex', flexDirection: 'column', gap: '8px' }}>
          {files.map((file, index) => (
            <div
              key={index}
              style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                background: '#0e141b',
                padding: '8px 12px',
                borderRadius: '6px',
              }}
            >
              <span>📄 {file.name}</span>
              <button
                onClick={() => removeFile(file.name)}
                style={{
                  background: 'none',
                  border: 'none',
                  color: '#ef4444',
                  cursor: 'pointer',
                  fontSize: '16px',
                }}
              >
                &times;
              </button>
            </div>
          ))}
        </div>
      )}

      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Or paste additional text here..."
        style={{
          width: '100%',
          minHeight: '150px',
          background: '#0e141b',
          border: '1px solid #1d2733',
          borderRadius: '8px',
          color: 'white',
          padding: '12px',
          fontSize: '14px',
          resize: 'vertical',
        }}
      />

      <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '16px', gap: '12px' }}>
        <button
          onClick={handleSubmit}
          disabled={isLoading || (!text.trim() && files.length === 0)}
          style={{
            padding: '10px 16px',
            background: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '16px',
            opacity: (isLoading || (!text.trim() && files.length === 0)) ? 0.5 : 1,
          }}
        >
          {isLoading ? 'Parsing...' : 'Parse'}
        </button>
      </div>
    </div>
  );
};

export default function SmartQuotePage() {
  const [view, setView] = useState('home');
  const [isLoading, setIsLoading] = useState(false);
  const [parsedProducts, setParsedProducts] = useState<ParsedProduct[]>([]);
  const [error, setError] = useState<string | null>(null);

  const handleParse = async (formData: FormData) => {
    setIsLoading(true);
    setParsedProducts([]);
    setError(null);

    try {
      const response = await fetch('/api/parse-quote', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.detail || data.error || `Server error: ${response.status}`);
      }

      if (!Array.isArray(data.products)) {
        throw new Error('Invalid response format: expected { products: [...] }');
      }

      setParsedProducts(data.products);
    } catch (err: any) {
      setError(`❌ Parse Failed: ${err.message}`);
      console.error('Parse error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const renderContent = () => {
    switch (view) {
      case 'home':
        return <HomePage onSelectView={setView} />;
      case 'parsing':
        return (
          <div style={{ padding: '16px' }}>
            <InitialInput onParse={handleParse} isLoading={isLoading} />
            {error && (
              <p
                style={{
                  color: '#ef4444',
                  textAlign: 'center',
                  marginTop: '16px',
                  background: '#2a1a1a',
                  padding: '10px',
                  borderRadius: '8px',
                }}
              >
                {error}
              </p>
            )}
            {parsedProducts.length > 0 && (
              <div style={{ maxWidth: '800px', margin: '24px auto 0' }}>
                <h3 style={{ fontSize: '18px', fontWeight: 'bold' }}>Parsed Products</h3>
                <div style={{
                  background: '#0e141b',
                  border: '1px solid #1d2733',
                  borderRadius: '12px',
                  overflow: 'hidden',
                }}>
                  <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                    <thead style={{ background: '#1d2733' }}>
                      <tr>
                        <th style={{ padding: '12px 16px', textAlign: 'left' }}>Qty</th>
                        <th style={{ padding: '12px 16px', textAlign: 'left' }}>Product Code</th>
                        <th style={{ padding: '12px 16px', textAlign: 'left' }}>Description</th>
                      </tr>
                    </thead>
                    <tbody>
                      {parsedProducts.map((p, index) => (
                        <tr key={index} style={{ borderTop: '1px solid #1d2733' }}>
                          <td style={{ padding: '12px 16px', textAlign: 'center' }}>{p.quantity}</td>
                          <td style={{ padding: '12px 16px' }}>{p.productCode}</td>
                          <td style={{ padding: '12px 16px' }}>{p.cleanDescription}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
            <button
              onClick={() => setView('home')}
              style={{
                marginTop: '24px',
                background: 'transparent',
                border: '1px solid #2a3a4a',
                borderRadius: '8px',
                color: '#9fb2c8',
                padding: '8px 16px',
                cursor: 'pointer',
              }}
            >
              ← Back to Home
            </button>
          </div>
        );
      default:
        return <HomePage onSelectView={setView} />;
    }
  };

  return <div>{renderContent()}</div>;
}
----- FILE: ./pages/test-ai.tsx -----
import { useState } from 'react';

export default function TestAiPage() {
    const [response, setResponse] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const runTest = async () => {
        setIsLoading(true);
        setResponse('');
        try {
            const res = await fetch('/api/test-ai');
            const data = await res.json();
            setResponse(JSON.stringify(data, null, 2));
        } catch (error) {
            setResponse('Failed to get a response.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div>
            <h1>AI Connection Test</h1>
            <p>Click the button to send a simple prompt to the Gemini API.</p>
            <button onClick={runTest} disabled={isLoading}>
                {isLoading ? 'Testing...' : 'Run AI Test'}
            </button>
            {response && (
                <div style={{ marginTop: '20px' }}>
                    <h2>Response:</h2>
                    <pre style={{ background: '#0e141b', padding: '16px', borderRadius: '8px' }}>
                        <code>{response}</code>
                    </pre>
                </div>
            )}
        </div>
    );
}
----- FILE: ./pages/today/guest.tsx -----
import { useEffect, useMemo, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { panelStyle, theme } from "../../lib/theme";
import Link from "next/link";

type JobRow = {
  id: string;
  title: string;
  client_name: string | null;
  status: "planned" | "in_progress" | "completed" | "snagging";
  created_at: string;
};

export default function GuestPage() {
  const [token, setToken] = useState("");
  const [pin, setPin] = useState("");
  const [msg, setMsg] = useState<string | null>(null);
  const [busy, setBusy] = useState(false);
  const [job, setJob] = useState<JobRow | null>(null);
  const [settings, setSettings] = useState<{ guest_enabled: boolean; guest_can_view_docs: boolean } | null>(null);

  // Preload flags so we respect Settings
  useEffect(() => {
    (async () => {
      const { data } = await supabase.from("org_settings").select("guest_enabled, guest_can_view_docs").eq("id", 1).single();
      setSettings({ guest_enabled: !!data?.guest_enabled, guest_can_view_docs: !!data?.guest_can_view_docs });
    })();
  }, []);

  const qs = useMemo(() => {
    if (typeof window === "undefined") return {} as Record<string, string>;
    const u = new URL(window.location.href);
    const t = u.searchParams.get("token") || "";
    return { token: t };
  }, []);

  useEffect(() => {
    if (qs.token) setToken(qs.token);
  }, [qs]);

  async function unlock() {
    setMsg(null);
    if (!settings) { setMsg("Loading configuration…"); return; }
    if (!settings.guest_enabled) { setMsg("Guest access is disabled."); return; }
    if (!token.trim() || !pin.trim()) { setMsg("Enter token and PIN."); return; }
    setBusy(true);

    const { data, error } = await supabase.rpc("verify_guest_pin", { token, pin });
    setBusy(false);

    if (error) { setMsg(error.message); setJob(null); return; }

    const rows = (data as any[]) || [];
    if (rows.length === 0) { setMsg("Invalid or expired token, or wrong PIN."); setJob(null); return; }

    const j = rows[0] as JobRow;
    setJob(j);
    setMsg(null);
  }

  function pill(status: JobRow["status"]) {
    const color =
      status === "planned" ? theme.colors.subtext :
      status === "in_progress" ? theme.colors.accent :
      status === "snagging" ? theme.colors.warning :
      theme.colors.success;
    return (
      <span style={{
        display: "inline-flex", alignItems: "center", gap: 8, padding: "6px 10px",
        borderRadius: 999, background: "#111823", border: `1px solid ${theme.colors.panelBorder}`,
        color: theme.colors.text, fontSize: 12
      }}>
        <span style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        {status === "in_progress" ? "In Progress" : status[0].toUpperCase()+status.slice(1)}
      </span>
    );
  }

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ fontWeight: 800, fontSize: 24, letterSpacing: 0.2 }}>Guest Access</div>

      {/* Unlock */}
      {!job && (
        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ display: "grid", gap: 10, maxWidth: 560 }}>
            <Field label="Token">
              <input value={token} onChange={(e) => setToken(e.target.value)} style={inputStyle()} placeholder="Paste shared token" />
            </Field>
            <Field label="PIN">
              <input value={pin} onChange={(e) => setPin(e.target.value)} style={inputStyle()} placeholder="4-digit PIN" maxLength={4} />
            </Field>
            <div style={{ display: "flex", gap: 8 }}>
              <button
                onClick={unlock}
                disabled={busy}
                style={{
                  padding: "10px 14px",
                  background: theme.colors.accent,
                  color: "white",
                  border: 0,
                  borderRadius: 8,
                  cursor: busy ? "not-allowed" : "pointer",
                  opacity: busy ? 0.7 : 1
                }}
              >
                Unlock Job
              </button>
              {msg && <div style={{ alignSelf: "center", color: theme.colors.subtext }}>{msg}</div>}
            </div>
          </div>
        </div>
      )}

      {/* Read-only job view */}
      {job && (
        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
            <div style={{ fontWeight: 800, fontSize: 20 }}>{job.title}</div>
            <div style={{ color: theme.colors.subtext }}>{job.client_name ?? "—"} • {new Date(job.created_at).toLocaleString()}</div>
            <div style={{ marginLeft: "auto" }}>{pill(job.status)}</div>
          </div>

          <div style={{ marginTop: 12, display: "flex", gap: 8 }}>
            <Link
              href={`/job/${job.id}`}
              style={{
                padding: "8px 12px",
                borderRadius: 10,
                border: `1px solid ${theme.colors.panelBorder}`,
                background: "#0f151c",
                color: theme.colors.text,
                textDecoration: "none"
              }}
            >
              Open Job (read-only)
            </Link>
            {!settings?.guest_can_view_docs && (
              <div style={{ alignSelf: "center", color: theme.colors.subtext }}>Document access disabled by admin</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 10, alignItems: "center" }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext }}>{label}</div>
      {children}
    </div>
  );
}
function inputStyle(extra?: React.CSSProperties): React.CSSProperties {
  return {
    padding: "10px 12px",
    background: "#111823",
    border: `1px solid ${theme.colors.panelBorder}`,
    color: theme.colors.text,
    borderRadius: 8,
    ...(extra || {})
  };
}

----- FILE: ./pages/today/index.tsx -----
// apps/web/pages/today/index.tsx
import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { useRequireAuth } from "../../hooks/useRequireAuth";
import { panelStyle, theme } from "../../lib/theme";
import StatusPill from "../../components/ui/StatusPill";

type JobLite = {
  id: string;
  reference: string | null;
  title: string;
  client_name: string | null;
  status: "planned" | "in_progress" | "completed" | "snagging";
  created_at: string;
};

type AlertRow = { id: string; text: string; occurred_at: string };

export default function Today() {
  useRequireAuth();

  const [counts, setCounts] = useState({ planned: 0, in_progress: 0, snagging: 0 });
  const [nextJobs, setNextJobs] = useState<JobLite[]>([]);
  const [alerts, setAlerts] = useState<AlertRow[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let active = true;
    (async () => {
      setLoading(true);

      const [cPlanned, cProg, cSnag] = await Promise.all([
        supabase.from("jobs").select("*", { count: "exact", head: true }).eq("status", "planned"),
        supabase.from("jobs").select("*", { count: "exact", head: true }).eq("status", "in_progress"),
        supabase.from("jobs").select("*", { count: "exact", head: true }).eq("status", "snagging")
      ]);

      const { data: jobsList } = await supabase
        .from("jobs")
        .select("id, reference, title, client_name, status, created_at")
        .in("status", ["planned", "in_progress"])
        .order("status", { ascending: true })
        .order("created_at", { ascending: true })
        .limit(4);

      const { data: alertsList } = await supabase
        .from("activity_log")
        .select("id, text, occurred_at")
        .order("occurred_at", { ascending: false })
        .limit(6);

      if (!active) return;

      setCounts({
        planned: cPlanned.count || 0,
        in_progress: cProg.count || 0,
        snagging: cSnag.count || 0
      });
      setNextJobs((jobsList as JobLite[]) || []);
      setAlerts((alertsList as AlertRow[]) || []);
      setLoading(false);
    })();
    return () => { active = false; };
  }, []);

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(220px, 1fr))", gap: 16 }}>
        <Kpi title="Planned" value={counts.planned} accent />
        <Kpi title="In Progress" value={counts.in_progress} />
        <Kpi title="Snagging" value={counts.snagging} />
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}>
        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ fontWeight: 600, marginBottom: 8 }}>Next 4 Jobs</div>
          {loading ? (
            <div style={{ color: theme.colors.subtext }}>Loading…</div>
          ) : nextJobs.length === 0 ? (
            <div style={{ color: theme.colors.subtext }}>No upcoming jobs.</div>
          ) : (
            <ul style={{ listStyle: "none", margin: 0, padding: 0, display: "grid", gap: 10 }}>
              {nextJobs.map((j) => (
                <li
                  key={j.id}
                  onClick={() => (window.location.href = `/job/${j.id}`)}
                  style={{
                    display: "grid",
                    gridTemplateColumns: "minmax(180px, 1fr) 1fr auto",
                    gap: 12,
                    padding: "10px 12px",
                    border: `1px solid ${theme.colors.panelBorder}`,
                    borderRadius: 10,
                    cursor: "pointer"
                  }}
                >
                  <div style={{ fontWeight: 600 }}>
                    {j.reference ? `${j.reference} — ` : ""}
                    {j.title}
                  </div>
                  <div style={{ color: theme.colors.subtext }}>{j.client_name ?? "-"}</div>
                  <div style={{ justifySelf: "end" }}>
                    <StatusPill value={j.status} />
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>

        <div style={{ ...panelStyle, padding: 16 }}>
          <div style={{ fontWeight: 600, marginBottom: 8 }}>Automation Alerts</div>
          {loading ? (
            <div style={{ color: theme.colors.subtext }}>Loading…</div>
          ) : alerts.length === 0 ? (
            <div style={{ color: theme.colors.subtext }}>All quiet.</div>
          ) : (
            <ul style={{ listStyle: "none", margin: 0, padding: 0, display: "grid", gap: 10 }}>
              {alerts.map((a) => (
                <li
                  key={a.id}
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: 10,
                    padding: "10px 12px",
                    border: `1px solid ${theme.colors.panelBorder}`,
                    borderRadius: 10
                  }}
                >
                  <span
                    aria-hidden
                    style={{
                      width: 8,
                      height: 8,
                      borderRadius: 99,
                      background: theme.colors.brand
                    }}
                  />
                  <div style={{ flex: 1 }}>{a.text}</div>
                  <div style={{ color: theme.colors.subtext, fontSize: 12 }}>
                    {new Date(a.occurred_at).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </div>
  );
}

function Kpi({ title, value, accent = false }: { title: string; value: number | string; accent?: boolean }) {
  return (
    <div style={{ ...panelStyle, padding: 16 }}>
      <div style={{ fontSize: 12, color: theme.colors.subtext, marginBottom: 6 }}>
        {title.toUpperCase()}
      </div>
      <div style={{ fontSize: 28, fontWeight: 800, letterSpacing: 0.2, color: accent ? theme.colors.brand : theme.colors.text }}>
        {value}
      </div>
    </div>
  );
}

----- FILE: ./tsconfig.json -----
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "types": ["node"],

    "baseUrl": ".",
    "paths": {
      "@/*": ["*"],
      "@/lib/*": ["lib/*"],
      "@/hooks/*": ["hooks/*"],
      "@/components/*": ["components/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
