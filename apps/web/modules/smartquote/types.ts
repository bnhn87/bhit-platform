

export enum AppState {
    Idle,
    Loading, // Covers parsing and calculating
    AwaitingInput,
    AccessoryReview, // Review excluded accessories before details entry
    DetailsEntry, // After parsing, before calculating
    Success,
    Error,
}

export interface QuoteDetails {
    quoteRef: string;
    client: string;
    project: string;
    deliveryAddress: string;
    preparedBy: string;
    upliftViaStairs: boolean;
    extendedUplift: boolean;
    customExtendedUpliftDays?: number | null; // Custom number of days for extended uplift
    customExtendedUpliftFitters?: number | null; // Custom number of fitters for extended uplift
    upliftSupervisor?: boolean; // Whether to include a supervisor for uplift work
    specialistReworking: boolean;
    manuallyAddSupervisor?: boolean;
    overrideFitterCount?: number | null;
    overrideSupervisorCount?: number | null;
    overrideVanType?: 'oneMan' | 'twoMan' | null;
    overrideWasteVolumeM3?: number | null;
    dailyParkingCharge?: number | null;
    selectedVehicles?: Record<string, number>; // Vehicle ID -> quantity mapping for transport
    
    // Out-of-hours working options
    outOfHoursWorking?: boolean; // Whether to calculate out-of-hours rates
    outOfHoursType?: 'weekday_evening' | 'saturday' | 'sunday_bank_holiday'; // Type of out-of-hours work
    outOfHoursDays?: number | null; // How many days will be out-of-hours (can be partial)
}

// Represents the raw, unmodified data extracted by the AI
export interface ParsedProduct {
    lineNumber: number;
    productCode: string;
    rawDescription: string; // The full, original line text
    cleanDescription: string; // A human-readable summary generated by the AI
    quantity: number;
    description?: string; // The final, standardized display description will be added here later
    confidence?: number; // AI confidence score (0-1)
}

export interface ProductReference {
    installTimeHours: number;
    wasteVolumeM3: number;
    isHeavy: boolean;
}

export type ParseContent = (string | { mimeType: string; data: string; })[];

export interface ParseResult {
    products: ParsedProduct[];
    excludedProducts?: ParsedProduct[]; // Accessories/items for user review
    details: Partial<Pick<QuoteDetails, 'client' | 'project' | 'quoteRef'>>;
}


// Represents a fully resolved and calculated product line item
export interface CalculatedProduct extends ParsedProduct {
    description: string; // The standardized description is now required here
    timePerUnit: number;
    totalTime: number;
    wastePerUnit: number;
    totalWaste: number;
    isHeavy: boolean;
    isManuallyEdited?: boolean;
    source: 'catalogue' | 'user-inputted' | 'default' | 'learned';
}

export interface LabourResults {
    totalHours: number;
    upliftBufferPercentage: number;
    hoursAfterUplift: number;
    durationBufferPercentage: number;
    bufferedHours: number;
    totalDays: number;
}

export interface CrewResults {
    crewSize: number; // Total team size: fitters + supervisors + specialists
    vanCount: number;
    vanFitters: number;
    onFootFitters: number;
    supervisorCount: number;
    specialistCount: number;
    daysPerFitter: number;
    totalProjectDays: number; // Total calendar days the job will take on-site
    isTwoManVanRequired: boolean;
    hourLoadPerPerson: number; // Workload per *productive* fitter
}

export interface WasteResults {
    totalVolumeM3: number;
    loadsRequired: number;
    isFlagged: boolean;
}

export interface PricingResults {
    totalCost: number;
    vanCost: number;
    fitterCost: number;
    supervisorCost: number;
    reworkingCost: number;
    parkingCost: number;
    transportCost: number; // Cost of selected vehicles for transport
    billableDays: number;
    
    // Out-of-hours surcharges
    outOfHoursSurcharge?: number; // Additional cost for out-of-hours work
    outOfHoursMultiplier?: number; // Rate multiplier applied (1.5, 2.0, 2.25)
    standardCost?: number; // Original cost before out-of-hours markup
}

export interface CalculationResults {
    labour: LabourResults;
    crew: CrewResults;
    waste: WasteResults;
    pricing: PricingResults;
    detailedProducts: CalculatedProduct[];
    notes: {
        parking: string;
        mileage: string;
        ulez: string;
        delivery: string;
    }
}

export interface QuoteVersion {
    version: number;
    savedAt: string; // ISO 8601 date string
    savedBy?: string; // User ID who saved this version
    details: QuoteDetails;
    results: CalculationResults;
    products: CalculatedProduct[];
    changesSummary?: string; // Brief description of what changed
}

export interface QuoteAuditEntry {
    timestamp: string; // ISO 8601 date string
    action: 'created' | 'updated' | 'exported_pdf' | 'exported_xlsx' | 'job_created';
    userId?: string;
    userName?: string;
    details?: string; // Additional context about the action
    version?: number; // Which version this action relates to
}

export interface SavedQuote {
    id: string;
    details: QuoteDetails;
    results: CalculationResults;
    products: CalculatedProduct[];
    savedAt: string; // ISO 8601 date string
    version: number; // Current version number
    versions?: QuoteVersion[]; // Version history
    auditTrail?: QuoteAuditEntry[]; // Audit log
}

// --- Configuration Types ---

export interface LaborCostConfig {
    oneManVanCostToCompany: number;
    twoManVanCostToCompany: number;
    additionalFitterCostToCompany: number;
    supervisorCostToCompany: number;
    specialistReworkingCostToCompany: number;
    useHourlyRate: boolean; // true for hourly, false for day rate
    hourlyRateMultiplier: number; // multiplier to convert day rates to hourly
}

export interface PricingConfig {
    oneManVanDayRate: number;
    twoManVanDayRate: number;
    additionalFitterDayRate: number;
    supervisorDayRate: number;
    specialistReworkingFlatRate: number;
}

export interface RulesConfig {
    hoursPerDay: number;
    vanCapacityM3: number;
    upliftStairsBufferPercent: number;
    extendedUpliftBufferPercent: number;
    defaultWasteVolumeM3: number;
    supervisorThresholdDays: number;
    preparedByOptions: string[];
    durationBufferPercentage?: number; // Optional for backward compatibility
}

export interface Vehicle {
    id: string;
    name: string;
    costPerDay: number;
    euroPalletCapacity: number; // How many Euro pallets (1200mm x 800mm) it can carry
    standardPalletCapacity: number; // How many Standard pallets (1200mm x 1000mm) it can carry
    isActive: boolean;
}

export interface AppConfig {
    pricing: PricingConfig;
    laborCosts: LaborCostConfig;
    rules: RulesConfig;
    productCatalogue: Record<string, ProductReference>;
    vehicles: Record<string, Vehicle>; // Vehicle fleet configuration
}