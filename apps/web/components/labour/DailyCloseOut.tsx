import React, { useState, useEffect, useRef, useCallback } from 'react';

interface DailyCloseOutProps {
  jobId: string;
  onCloseoutComplete: (closeoutId: string) => void;
}

interface CloseoutData {
  summary: {
    unitsCompleted: number;
    hoursWorked: number;
    workersOnSite: number;
    weatherConditions: string;
    notes: string;
  };
  autoGenerated: {
    totalUnitsCompleted: number;
    totalUnits: number;
    overallProgress: number;
    productBreakdown: Array<{
      product_type: string;
      product_name: string;
      completed: number;
      total: number;
      progress: number;
    }>;
  };
  labourAnalysis: {
    remainingHours: number;
    efficiency: number;
    projectedCompletion: Date;
    recommendedTeamSize: number;
    efficiencyRating: string;
  };
  tomorrowPlan: {
    targets: { [productType: string]: number };
    priority: Array<{
      product_type: string;
      product_name: string;
      units_remaining: number;
    }>;
    estimatedHours: number;
    recommendations: string[];
  };
}

export default function DailyCloseOut({ jobId, onCloseoutComplete }: DailyCloseOutProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [closeoutData, setCloseoutData] = useState<CloseoutData | null>(null);
  const [formData, setFormData] = useState({
    unitsCompleted: 0,
    hoursWorked: 8,
    workersOnSite: 4,
    weatherConditions: 'Fair',
    notes: '',
    photoUrls: [] as string[],
    supervisorSignature: '',
    contractorSignature: ''
  });
  
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [activeSignature, setActiveSignature] = useState<'supervisor' | 'contractor' | null>(null);

  const generateAutoSummary = useCallback(async () => {
    try {
      setIsLoading(true);

      // Fetch labour analysis to generate auto summary
      const response = await fetch(`/api/v2/projects/${jobId}/labour-analysis`);
      const analysisData = await response.json();

      if (analysisData.success) {
        const analysis = analysisData.analysis;

        setCloseoutData({
          summary: formData,
          autoGenerated: {
            totalUnitsCompleted: analysis.overallProgress?.completed || 0,
            totalUnits: analysis.overallProgress?.total || 1,
            overallProgress: analysis.overallProgress?.percentage || 0,
            productBreakdown: analysis.productBreakdown || []
          },
          labourAnalysis: {
            remainingHours: analysis.hoursRemaining || 0,
            efficiency: analysis.efficiency || 100,
            projectedCompletion: new Date(analysis.projectedCompletion),
            recommendedTeamSize: analysis.requiredTeamSize || 4,
            efficiencyRating: analysis.efficiency >= 100 ? 'Excellent' :
                           analysis.efficiency >= 85 ? 'Good' :
                           analysis.efficiency >= 70 ? 'Fair' : 'Poor'
          },
          tomorrowPlan: analysis.tomorrowPlan || {
            targets: {},
            priority: [],
            estimatedHours: 0,
            recommendations: []
          }
        });
      }
    } catch (error) {
      console.error('Failed to generate auto summary:', error);
    } finally {
      setIsLoading(false);
    }
  }, [jobId, formData]);

  useEffect(() => {
    generateAutoSummary();
  }, [jobId, generateAutoSummary]);

  const handleSubmitCloseout = async () => {
    if (!closeoutData) return;

    try {
      setIsLoading(true);

      const response = await fetch('/api/v2/daily-closeout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          job_id: jobId,
          summary: formData,
          photoUrls: formData.photoUrls,
          supervisorSignature: formData.supervisorSignature,
          contractorSignature: formData.contractorSignature,
          generatePdf: true,
          sendEmail: true
        })
      });

      const result = await response.json();

      if (result.success) {
        onCloseoutComplete(result.closeout.id);
      } else {
        throw new Error(result.error || 'Failed to create closeout');
      }
    } catch (error) {
      console.error('Failed to submit closeout:', error);
      alert('Failed to submit closeout. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    if (!canvasRef.current || !activeSignature) return;
    
    setIsDrawing(true);
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    
    const x = 'touches' in e ? e.touches[0].clientX - rect.left : e.clientX - rect.left;
    const y = 'touches' in e ? e.touches[0].clientY - rect.top : e.clientY - rect.top;
    
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.beginPath();
      ctx.moveTo(x, y);
    }
  };

  const draw = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    if (!isDrawing || !canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    
    const x = 'touches' in e ? e.touches[0].clientX - rect.left : e.clientX - rect.left;
    const y = 'touches' in e ? e.touches[0].clientY - rect.top : e.clientY - rect.top;
    
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.lineWidth = 2;
      ctx.lineCap = 'round';
      ctx.strokeStyle = '#000';
      ctx.lineTo(x, y);
      ctx.stroke();
    }
  };

  const stopDrawing = () => {
    if (!canvasRef.current || !activeSignature) return;
    
    setIsDrawing(false);
    
    // Save signature as base64
    const dataURL = canvasRef.current.toDataURL();
    setFormData(prev => ({
      ...prev,
      [activeSignature + 'Signature']: dataURL
    }));
  };

  const clearSignature = () => {
    if (!canvasRef.current || !activeSignature) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
    
    setFormData(prev => ({
      ...prev,
      [activeSignature + 'Signature']: ''
    }));
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-AU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (isLoading && !closeoutData) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6 pb-20">
      {/* Header */}
      <div className="bg-white rounded-lg p-6 border">
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Daily Close-Out</h2>
        <p className="text-gray-600">{formatDate(new Date())}</p>
      </div>

      {/* Manual Input Section */}
      <div className="bg-white rounded-lg p-6 border">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Daily Summary</h3>
        
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Units Completed Today
              </label>
              <input
                type="number"
                min="0"
                value={formData.unitsCompleted}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  unitsCompleted: parseInt(e.target.value) || 0 
                }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Hours Worked
              </label>
              <input
                type="number"
                min="0"
                step="0.5"
                value={formData.hoursWorked}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  hoursWorked: parseFloat(e.target.value) || 0 
                }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Workers On-Site
              </label>
              <input
                type="number"
                min="1"
                value={formData.workersOnSite}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  workersOnSite: parseInt(e.target.value) || 1 
                }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Weather
              </label>
              <select
                value={formData.weatherConditions}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  weatherConditions: e.target.value 
                }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="Fair">Fair</option>
                <option value="Partly Cloudy">Partly Cloudy</option>
                <option value="Cloudy">Cloudy</option>
                <option value="Light Rain">Light Rain</option>
                <option value="Heavy Rain">Heavy Rain</option>
                <option value="Hot">Hot</option>
                <option value="Cold">Cold</option>
              </select>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Notes
            </label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Any issues, delays, or important observations..."
            />
          </div>
        </div>
      </div>

      {/* Auto-Generated Summary */}
      {closeoutData && (
        <div className="bg-white rounded-lg p-6 border">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Progress Summary</h3>
          
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="text-sm text-gray-600">Overall Progress</div>
                <div className="text-2xl font-bold text-gray-900">
                  {Math.round(closeoutData.autoGenerated.overallProgress)}%
                </div>
                <div className="text-sm text-gray-500">
                  {closeoutData.autoGenerated.totalUnitsCompleted} / {closeoutData.autoGenerated.totalUnits} units
                </div>
              </div>
              
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="text-sm text-gray-600">Efficiency</div>
                <div className="text-2xl font-bold text-gray-900">
                  {Math.round(closeoutData.labourAnalysis.efficiency)}%
                </div>
                <div className="text-sm text-gray-500">
                  {closeoutData.labourAnalysis.efficiencyRating}
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Product Breakdown</h4>
              <div className="space-y-2">
                {closeoutData.autoGenerated.productBreakdown.slice(0, 5).map((product, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <span className="text-gray-700">{product.product_name}</span>
                    <span className="text-gray-600">
                      {product.completed} / {product.total} ({product.progress}%)
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tomorrow's Plan */}
      {closeoutData && closeoutData.tomorrowPlan.priority.length > 0 && (
        <div className="bg-white rounded-lg p-6 border">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Tomorrow&apos;s Plan</h3>
          
          <div className="space-y-4">
            <div className="bg-blue-50 rounded-lg p-4">
              <div className="text-sm text-blue-600 font-medium">
                Estimated {closeoutData.tomorrowPlan.estimatedHours} hours
              </div>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Priority Items</h4>
              <div className="space-y-2">
                {closeoutData.tomorrowPlan.priority.slice(0, 3).map((item, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <span className="text-gray-700">{item.product_name}</span>
                    <span className="text-gray-600">
                      {item.units_remaining} units remaining
                    </span>
                  </div>
                ))}
              </div>
            </div>
            
            {closeoutData.tomorrowPlan.recommendations.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Recommendations</h4>
                <ul className="space-y-1">
                  {closeoutData.tomorrowPlan.recommendations.map((rec, index) => (
                    <li key={index} className="text-sm text-gray-600">• {rec}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Digital Signatures */}
      <div className="bg-white rounded-lg p-6 border">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Signatures</h3>
        
        <div className="space-y-6">
          {['supervisor', 'contractor'].map((role) => (
            <div key={role}>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {role.charAt(0).toUpperCase() + role.slice(1)} Signature
                </label>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setActiveSignature(role as 'supervisor' | 'contractor')}
                    className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
                  >
                    Sign
                  </button>
                  <button
                    onClick={clearSignature}
                    className="px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600"
                  >
                    Clear
                  </button>
                </div>
              </div>
              
              {activeSignature === role && (
                <canvas
                  ref={canvasRef}
                  width={300}
                  height={150}
                  className="w-full border border-gray-300 rounded-lg cursor-crosshair touch-none"
                  onMouseDown={startDrawing}
                  onMouseMove={draw}
                  onMouseUp={stopDrawing}
                  onTouchStart={startDrawing}
                  onTouchMove={draw}
                  onTouchEnd={stopDrawing}
                />
              )}
              
              {formData[`${role}Signature` as keyof typeof formData] && (
                <div className="mt-2">
                  <div
                    style={{
                      background: `url(${formData[`${role}Signature` as keyof typeof formData] as string}) center/contain no-repeat`,
                      height: '80px',
                      border: '1px solid #d1d5db',
                      borderRadius: '4px'
                    }}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Submit Button */}
      <div className="bg-white rounded-lg p-6 border">
        <button
          onClick={handleSubmitCloseout}
          disabled={isLoading || !formData.supervisorSignature || !formData.contractorSignature}
          className="w-full bg-blue-500 text-white py-4 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-600 transition-colors"
        >
          {isLoading ? 'Creating Close-Out...' : 'Complete Daily Close-Out'}
        </button>
        
        <p className="text-sm text-gray-500 mt-2 text-center">
          This will generate a PDF report and send email notifications
        </p>
      </div>
    </div>
  );
}